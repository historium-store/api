{
  "stats": {
    "suites": 107,
    "tests": 90,
    "passes": 90,
    "pending": 0,
    "failures": 0,
    "start": "2023-07-14T18:04:25.141Z",
    "end": "2023-07-14T18:04:39.939Z",
    "duration": 14798,
    "testsRegistered": 90,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "3b1c3b90-21b6-4042-bad5-ac6890d569f3",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "e583f53e-6cd9-4c02-8a51-755fea1c07c2",
          "title": "auth system",
          "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\auth-test.js",
          "file": "\\test\\auth-test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"auth system\"",
              "fullTitle": "auth system \"before all\" hook in \"auth system\"",
              "timedOut": false,
              "duration": 29,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mongoose\n\t.connect(process.env.TEST_CONNECTION_STRING)\n\t.catch(err => {\n\t\tconsole.log(`Failed to connect to database: ${err.message}`);\n\t});",
              "err": {},
              "uuid": "a4426095-584e-4b96-93ec-33bf6d69ae34",
              "parentUUID": "e583f53e-6cd9-4c02-8a51-755fea1c07c2",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"auth system\"",
              "fullTitle": "auth system \"after all\" hook in \"auth system\"",
              "timedOut": false,
              "duration": 8,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mongoose.connection.collection('users').deleteMany();\nawait mongoose.connection.collection('carts').deleteMany();\nawait mongoose.connection.close();",
              "err": {},
              "uuid": "c879b648-e60e-45ef-b565-002616549525",
              "parentUUID": "e583f53e-6cd9-4c02-8a51-755fea1c07c2",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "cde4155c-8d6f-4489-8c97-067e48189254",
              "title": " \"/signup\" Create new user ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\auth-test.js",
              "file": "\\test\\auth-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "The data should be validated and the body of the created user should be returned",
                  "fullTitle": "auth system  \"/signup\" Create new user  The data should be validated and the body of the created user should be returned",
                  "timedOut": false,
                  "duration": 303,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expectedFields = [\n\t'firstName',\n\t'lastName',\n\t'phoneNumber',\n\t'email',\n\t'role',\n\t'reviews',\n\t'_id',\n\t'createdAt',\n\t'updatedAt',\n\t'history',\n\t'wishlist',\n\t'waitlist'\n];\nawait request(app)\n\t.post('/signup')\n\t.send(adminUser)\n\t.then(async response => {\n\t\texpect(response.status).to.equal(201);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body).to.include.keys(...expectedFields);\n\t});",
                  "err": {},
                  "uuid": "34a89fca-b464-42da-9234-50b72868517c",
                  "parentUUID": "cde4155c-8d6f-4489-8c97-067e48189254",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "34a89fca-b464-42da-9234-50b72868517c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 303,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a19355cd-c43d-4ea9-853c-52739d007936",
              "title": " \"/login\" Login existing user ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\auth-test.js",
              "file": "\\test\\auth-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "The password and login are correct, the token is returned",
                  "fullTitle": "auth system  \"/login\" Login existing user  The password and login are correct, the token is returned",
                  "timedOut": false,
                  "duration": 248,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputData = {\n\tlogin: adminUser.email,\n\tpassword: adminUser.password\n};\nawait request(app)\n\t.post('/login')\n\t.send(inputData)\n\t.then(response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body).to.include.keys('token');\n\t});",
                  "err": {},
                  "uuid": "cc66f4d0-9b49-4207-86e4-806b1d7109b3",
                  "parentUUID": "a19355cd-c43d-4ea9-853c-52739d007936",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cc66f4d0-9b49-4207-86e4-806b1d7109b3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 248,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f3bd57dd-0450-4357-a295-c86a8002b3e2",
          "title": " author system ",
          "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\author-test.js",
          "file": "\\test\\author-test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \" author system \"",
              "fullTitle": " author system  \"before all\" hook in \" author system \"",
              "timedOut": false,
              "duration": 510,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mongoose\n\t.connect(process.env.TEST_CONNECTION_STRING)\n\t.catch(err => {\n\t\tconsole.log(`Failed to connect to database: ${err.message}`);\n\t});\n//#region add admin user to db and take token\nawait request(app).post('/signup').send(adminUser);\nawait mongoose.connection\n\t.collection('users')\n\t.updateOne(\n\t\t{ email: adminUser.email },\n\t\t{ $set: { role: 'admin' } }\n\t);\nconst userData = {\n\tlogin: adminUser.email,\n\tpassword: adminUser.password\n};\nuserToken += (await request(app).post('/login').send(userData))\n\t.body.token;\n//#endregion",
              "err": {},
              "uuid": "2b469409-9653-4291-8f3f-bad39557cdd6",
              "parentUUID": "f3bd57dd-0450-4357-a295-c86a8002b3e2",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \" author system \"",
              "fullTitle": " author system  \"after all\" hook in \" author system \"",
              "timedOut": false,
              "duration": 4,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mongoose.connection.collection('authors').deleteMany();\nawait mongoose.connection.collection('users').deleteMany();\nawait mongoose.connection.collection('carts').deleteMany();\nawait mongoose.connection.close();",
              "err": {},
              "uuid": "6dad5cef-5cd3-4959-896e-e60697857177",
              "parentUUID": "f3bd57dd-0450-4357-a295-c86a8002b3e2",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "a8af0ce5-a0b6-45f4-b3b0-41f898221e1a",
              "title": " POST \"/author/\" Create new author ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\author-test.js",
              "file": "\\test\\author-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Shoud create new author in database ",
                  "fullTitle": " author system   POST \"/author/\" Create new author   Shoud create new author in database ",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const newAuthor = {\n\tfullName: 'John Smith',\n\tbiography:\n\t\t'Lorem ipsum dolor sit amet, consectetur adipiscing elit.',\n\tbooks: [],\n\tpictures: ['picture1.jpg', 'picture2.jpg']\n};\nconst expectedFields = [\n\t'fullName',\n\t'biography',\n\t'books',\n\t'_id',\n\t'pictures',\n\t'createdAt',\n\t'updatedAt'\n];\nawait request(app)\n\t.post('/author/')\n\t.set('Authorization', userToken)\n\t.send(newAuthor)\n\t.then(response => {\n\t\texpect(response.status).to.equal(201);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body).to.include.keys(...expectedFields);\n\t\tauthorId = response.body._id;\n\t});",
                  "err": {},
                  "uuid": "c121f37d-af18-4995-bd68-1031910ec1f7",
                  "parentUUID": "a8af0ce5-a0b6-45f4-b3b0-41f898221e1a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c121f37d-af18-4995-bd68-1031910ec1f7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 11,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f77afe4d-9cc7-4794-b873-8d38b66575f1",
              "title": " GET \"/author/\" Get all authors ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\author-test.js",
              "file": "\\test\\author-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return all authors ",
                  "fullTitle": " author system   GET \"/author/\" Get all authors   Should return all authors ",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app)\n\t.get('/author/')\n\t.set('Authorization', userToken)\n\t.then(response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body).to.be.an('array');\n\t});",
                  "err": {},
                  "uuid": "a5a28085-3dad-4b90-9a15-e4e2cd9d109b",
                  "parentUUID": "f77afe4d-9cc7-4794-b873-8d38b66575f1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a5a28085-3dad-4b90-9a15-e4e2cd9d109b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 8,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7ff72e11-fda7-4f1c-81c3-3e28ae1a98f7",
              "title": " GET \"/author/:id\" Get one author ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\author-test.js",
              "file": "\\test\\author-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return one author by id ",
                  "fullTitle": " author system   GET \"/author/:id\" Get one author   Should return one author by id ",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expectedFields = [\n\t'fullName',\n\t'biography',\n\t'books',\n\t'_id',\n\t'pictures',\n\t'createdAt',\n\t'updatedAt'\n];\nawait request(app)\n\t.get(`/author/${authorId}`)\n\t.set('Authorization', userToken)\n\t.then(response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body).to.include.keys(...expectedFields);\n\t});",
                  "err": {},
                  "uuid": "ee47bab8-52a8-4d12-9bc4-5ab11349b5d6",
                  "parentUUID": "7ff72e11-fda7-4f1c-81c3-3e28ae1a98f7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ee47bab8-52a8-4d12-9bc4-5ab11349b5d6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "21031a32-7443-4833-8e4e-fd2aefd78dcc",
              "title": " PATCH \"/author/:id\" Update one existing author ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\author-test.js",
              "file": "\\test\\author-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return one author with updated data ",
                  "fullTitle": " author system   PATCH \"/author/:id\" Update one existing author   Should return one author with updated data ",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const updatedAuthorData = {\n\tfullName: \"Ім'ян Прізвиськов\",\n\tpictures: ['url-to-new-picture', 'url-to-another-new-picture']\n};\nawait request(app)\n\t.patch(`/author/${authorId}`)\n\t.set('Authorization', userToken)\n\t.send(updatedAuthorData)\n\t.then(response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body.fullName).to.equal(\n\t\t\t\"Ім'ян Прізвиськов\"\n\t\t);\n\t\texpect(response.body.pictures).to.includes(\n\t\t\t'url-to-new-picture',\n\t\t\t'url-to-another-new-picture'\n\t\t);\n\t});",
                  "err": {},
                  "uuid": "5f3e343a-cc6a-48d7-9ab1-ba25d7c770ae",
                  "parentUUID": "21031a32-7443-4833-8e4e-fd2aefd78dcc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5f3e343a-cc6a-48d7-9ab1-ba25d7c770ae"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 12,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8066d0f8-1e7c-42f7-b815-712bca70c6d1",
              "title": " DELETE \"/author/:id\" Delete one author ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\author-test.js",
              "file": "\\test\\author-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should mark author as deleted via the \"deletedAt\" field, but not delete. ",
                  "fullTitle": " author system   DELETE \"/author/:id\" Delete one author   Should mark author as deleted via the \"deletedAt\" field, but not delete. ",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app)\n\t.delete(`/author/${authorId}`)\n\t.set('Authorization', userToken)\n\t.then(async response => {\n\t\texpect(response.status).to.be.equal(204);\n\t\tconst author = await mongoose.connection\n\t\t\t.collection('authors')\n\t\t\t.findOne({});\n\t\texpect(author.deletedAt).to.not.be.null;\n\t});",
                  "err": {},
                  "uuid": "d2084823-a713-42b5-8634-067d436c61c8",
                  "parentUUID": "8066d0f8-1e7c-42f7-b815-712bca70c6d1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d2084823-a713-42b5-8634-067d436c61c8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 13,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "cdb6f921-4ba8-4423-aa33-386756e215be",
          "title": " banner system ",
          "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\banner-test.js",
          "file": "\\test\\banner-test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \" banner system \"",
              "fullTitle": " banner system  \"before all\" hook in \" banner system \"",
              "timedOut": false,
              "duration": 5,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mongoose\n\t.connect(process.env.TEST_CONNECTION_STRING)\n\t.catch(err => {\n\t\tconsole.log(`Failed to connect to database: ${err.message}`);\n\t});",
              "err": {},
              "uuid": "8a5c7207-7d9a-41ae-a7e9-172d0cbfaf30",
              "parentUUID": "cdb6f921-4ba8-4423-aa33-386756e215be",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \" banner system \"",
              "fullTitle": " banner system  \"before each\" hook in \" banner system \"",
              "timedOut": false,
              "duration": 5,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const userData = {\n\tlogin: 'dobriy.edu@gmail.com',\n\tpassword: '41424344'\n};\nuserToken += (await request(app).post('/login').send(userData))\n\t.body.token;",
              "err": {},
              "uuid": "5d8b3261-f935-4a77-b731-e94ae78fabf4",
              "parentUUID": "cdb6f921-4ba8-4423-aa33-386756e215be",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \" banner system \"",
              "fullTitle": " banner system  \"after all\" hook in \" banner system \"",
              "timedOut": false,
              "duration": 6,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mongoose.connection.collection('banners').deleteMany();\nawait mongoose.connection.close();",
              "err": {},
              "uuid": "2480bdb9-4250-4dcc-bdd6-8f4105988da4",
              "parentUUID": "cdb6f921-4ba8-4423-aa33-386756e215be",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook in \" banner system \"",
              "fullTitle": " banner system  \"after each\" hook in \" banner system \"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "userToken = 'Bearer ';",
              "err": {},
              "uuid": "b27177e8-a02d-4819-be3e-70b907c3f9a1",
              "parentUUID": "cdb6f921-4ba8-4423-aa33-386756e215be",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "417992d1-40b9-4bd2-aa05-e4c26aa4aba7",
              "title": " \"/banner/\" POST request ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\banner-test.js",
              "file": "\\test\\banner-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " the banner data is correct; the new banner object is returned ",
                  "fullTitle": " banner system   \"/banner/\" POST request   the banner data is correct; the new banner object is returned ",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "3c0318c5-f451-429e-9472-c058e35f80d0",
                  "parentUUID": "417992d1-40b9-4bd2-aa05-e4c26aa4aba7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3c0318c5-f451-429e-9472-c058e35f80d0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5cd0ed53-8fae-48bb-92ed-7a05c282057b",
              "title": " \"/banner/\" GET request ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\banner-test.js",
              "file": "\\test\\banner-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " should return an array of banners ",
                  "fullTitle": " banner system   \"/banner/\" GET request   should return an array of banners ",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "378289e6-1612-4122-b60f-577107e0d0e2",
                  "parentUUID": "5cd0ed53-8fae-48bb-92ed-7a05c282057b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "378289e6-1612-4122-b60f-577107e0d0e2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "441c0ae1-3f8e-4dc9-99ce-ebc810a01767",
              "title": " \"/banner/:id\" GET request ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\banner-test.js",
              "file": "\\test\\banner-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " should return banner object",
                  "fullTitle": " banner system   \"/banner/:id\" GET request   should return banner object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "7787fc48-f06d-4062-b134-67d829a6cf08",
                  "parentUUID": "441c0ae1-3f8e-4dc9-99ce-ebc810a01767",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7787fc48-f06d-4062-b134-67d829a6cf08"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d3a1801f-63e5-454c-9530-ded62a375e94",
              "title": " \"/banner/:id\" PATCH request ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\banner-test.js",
              "file": "\\test\\banner-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " correct values are sent; the changed banner object is returned ",
                  "fullTitle": " banner system   \"/banner/:id\" PATCH request   correct values are sent; the changed banner object is returned ",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "b8a5f77c-37d2-40a2-b57f-3fe53172ad68",
                  "parentUUID": "d3a1801f-63e5-454c-9530-ded62a375e94",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b8a5f77c-37d2-40a2-b57f-3fe53172ad68"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "53964120-2b95-4ecd-948a-ce80e50e8947",
              "title": " \"/banner/:id\" DELETE request ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\banner-test.js",
              "file": "\\test\\banner-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " should set the \"deletedAt\" field. the object must be removed from the database ",
                  "fullTitle": " banner system   \"/banner/:id\" DELETE request   should set the \"deletedAt\" field. the object must be removed from the database ",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "1d09cd8a-9ce2-405c-a2fb-0149e5ab2fff",
                  "parentUUID": "53964120-2b95-4ecd-948a-ce80e50e8947",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1d09cd8a-9ce2-405c-a2fb-0149e5ab2fff"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "6d1d0381-fb0a-4de7-87cc-692fc8db6461",
          "title": " book-series system ",
          "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\book-series-test.js",
          "file": "\\test\\book-series-test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \" book-series system \"",
              "fullTitle": " book-series system  \"before all\" hook in \" book-series system \"",
              "timedOut": false,
              "duration": 490,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mongoose\n\t.connect(process.env.TEST_CONNECTION_STRING)\n\t.catch(err => {\n\t\tconsole.log(`Failed to connect to database: ${err.message}`);\n\t});\n//#region add admin user to db and take token\nawait request(app).post('/signup').send(adminUser);\nawait mongoose.connection\n\t.collection('users')\n\t.updateOne(\n\t\t{ email: adminUser.email },\n\t\t{ $set: { role: 'admin' } }\n\t);\nconst userData = {\n\tlogin: adminUser.email,\n\tpassword: adminUser.password\n};\nuserToken += (await request(app).post('/login').send(userData))\n\t.body.token;\n//#endregion",
              "err": {},
              "uuid": "e58a71ba-3c6b-4629-9112-de6e559715c7",
              "parentUUID": "6d1d0381-fb0a-4de7-87cc-692fc8db6461",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \" book-series system \"",
              "fullTitle": " book-series system  \"after all\" hook in \" book-series system \"",
              "timedOut": false,
              "duration": 8,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mongoose.connection.collection('bookseries').deleteMany();\nawait mongoose.connection.collection('publishers').deleteMany();\nawait mongoose.connection.collection('users').deleteMany();\nawait mongoose.connection.collection('carts').deleteMany();\nawait mongoose.connection.close();",
              "err": {},
              "uuid": "96ae4ada-a8f5-490a-bce9-e802fc7fec18",
              "parentUUID": "6d1d0381-fb0a-4de7-87cc-692fc8db6461",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "77bff9ed-f533-496c-9604-b4e6f1af9828",
              "title": " POST \"/book-series/\" Create new book series ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\book-series-test.js",
              "file": "\\test\\book-series-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should create new book series in database ",
                  "fullTitle": " book-series system   POST \"/book-series/\" Create new book series   Should create new book series in database ",
                  "timedOut": false,
                  "duration": 25,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//#region adding the necessary objects to the database\nconst Publisher = {\n\tname: 'Новий Вік',\n\tbooks: [],\n\tbookSeries: [],\n\tdescription:\n\t\t'Видавництво, спеціалізуючеся на публікації літератури різних жанрів',\n\tlogo: 'https://example.com/logo.png'\n};\nconst publisherId = (\n\tawait request(app)\n\t\t.post('/publisher/')\n\t\t.set('Authorization', userToken)\n\t\t.send(Publisher)\n).body._id;\n//#endregion\nconst newBookSeries = {\n\tname: 'Українська класика',\n\tpublisher: publisherId,\n\tbooks: []\n};\nconst expectedFields = [\n\t'name',\n\t'publisher',\n\t'books',\n\t'_id',\n\t'createdAt',\n\t'updatedAt'\n];\nawait request(app)\n\t.post('/book-series/')\n\t.set('Authorization', userToken)\n\t.send(newBookSeries)\n\t.then(response => {\n\t\texpect(response.status).to.equal(201);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body).to.include.keys(...expectedFields);\n\t\tbookSeriesId = response.body._id;\n\t});",
                  "err": {},
                  "uuid": "ecd890d8-1e34-45a1-b69a-c53b6c130faf",
                  "parentUUID": "77bff9ed-f533-496c-9604-b4e6f1af9828",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ecd890d8-1e34-45a1-b69a-c53b6c130faf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 25,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "53522299-542f-4801-b8af-88ffd4ae031f",
              "title": " GET \"/book-series/\" Get all book series ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\book-series-test.js",
              "file": "\\test\\book-series-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return all book series ",
                  "fullTitle": " book-series system   GET \"/book-series/\" Get all book series   Should return all book series ",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app)\n\t.get('/book-series/')\n\t.set('Authorization', userToken)\n\t.then(response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body).to.be.an('array');\n\t});",
                  "err": {},
                  "uuid": "82793e08-ae87-421a-a5a9-cd2efe12f3c6",
                  "parentUUID": "53522299-542f-4801-b8af-88ffd4ae031f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "82793e08-ae87-421a-a5a9-cd2efe12f3c6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6ae4a946-0f26-4a1c-9991-546357998201",
              "title": " GET \"/book-series/:id\" Get one book series ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\book-series-test.js",
              "file": "\\test\\book-series-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return one book series by id ",
                  "fullTitle": " book-series system   GET \"/book-series/:id\" Get one book series   Should return one book series by id ",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expectedFields = [\n\t'name',\n\t'publisher',\n\t'books',\n\t'_id',\n\t'createdAt',\n\t'updatedAt'\n];\nawait request(app)\n\t.get(`/book-series/${bookSeriesId}`)\n\t.set('Authorization', userToken)\n\t.then(response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body).to.include.keys(...expectedFields);\n\t});",
                  "err": {},
                  "uuid": "9cec37f5-7f40-47d9-9068-7c065306ab87",
                  "parentUUID": "6ae4a946-0f26-4a1c-9991-546357998201",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9cec37f5-7f40-47d9-9068-7c065306ab87"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "433b183f-8267-4d77-a512-8c22f65f76a3",
              "title": " PATCH \"/book-series/:id\" Update one existing book series ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\book-series-test.js",
              "file": "\\test\\book-series-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return one book series with updated data ",
                  "fullTitle": " book-series system   PATCH \"/book-series/:id\" Update one existing book series   Should return one book series with updated data ",
                  "timedOut": false,
                  "duration": 17,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const updatedBookSeries = {\n\tname: 'Українська класика *updated'\n};\nawait request(app)\n\t.patch(`/book-series/${bookSeriesId}`)\n\t.set('Authorization', userToken)\n\t.send(updatedBookSeries)\n\t.then(response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body.name).to.equal(\n\t\t\t'Українська класика *updated'\n\t\t);\n\t});",
                  "err": {},
                  "uuid": "6a00bed2-e325-48ab-9b22-64c536bb5099",
                  "parentUUID": "433b183f-8267-4d77-a512-8c22f65f76a3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6a00bed2-e325-48ab-9b22-64c536bb5099"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 17,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b5680b7a-f51b-4adf-97f7-9dfdc692f7f7",
              "title": " DELETE \"/book-series/:id\" Delete one book series ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\book-series-test.js",
              "file": "\\test\\book-series-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should mark book series as deleted via the \"deletedAt\" field, but not delete ",
                  "fullTitle": " book-series system   DELETE \"/book-series/:id\" Delete one book series   Should mark book series as deleted via the \"deletedAt\" field, but not delete ",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app)\n\t.delete(`/book-series/${bookSeriesId}`)\n\t.set('Authorization', userToken)\n\t.then(async response => {\n\t\texpect(response.status).to.be.equal(204);\n\t\tconst deletedBookSeries = await mongoose.connection\n\t\t\t.collection('bookseries')\n\t\t\t.findOne({});\n\t\texpect(deletedBookSeries.deletedAt).to.not.be.null;\n\t\tconst publisher = await mongoose.connection\n\t\t\t.collection('publishers')\n\t\t\t.findOne({});\n\t\texpect(publisher.bookSeries).to.be.empty;\n\t});",
                  "err": {},
                  "uuid": "5a161f62-0be3-477a-964b-bb07569bdae4",
                  "parentUUID": "b5680b7a-f51b-4adf-97f7-9dfdc692f7f7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5a161f62-0be3-477a-964b-bb07569bdae4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 13,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "46d5f098-ea0d-493e-bf4a-a4400190eed6",
          "title": " boook system ",
          "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\book-test.js",
          "file": "\\test\\book-test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \" boook system \"",
              "fullTitle": " boook system  \"before all\" hook in \" boook system \"",
              "timedOut": false,
              "duration": 473,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mongoose\n\t.connect(process.env.TEST_CONNECTION_STRING)\n\t.catch(err => {\n\t\tconsole.log(`Failed to connect to database: ${err.message}`);\n\t});\n//#region add admin user to db and take token\nawait request(app).post('/signup').send(adminUser);\nawait mongoose.connection\n\t.collection('users')\n\t.updateOne(\n\t\t{ email: adminUser.email },\n\t\t{ $set: { role: 'admin' } }\n\t);\nconst userData = {\n\tlogin: adminUser.email,\n\tpassword: adminUser.password\n};\nuserToken += (await request(app).post('/login').send(userData))\n\t.body.token;\n//#endregion",
              "err": {},
              "uuid": "c65e1fa9-be8e-4c04-bf5b-517da2d13ff2",
              "parentUUID": "46d5f098-ea0d-493e-bf4a-a4400190eed6",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \" boook system \"",
              "fullTitle": " boook system  \"after all\" hook in \" boook system \"",
              "timedOut": false,
              "duration": 16,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mongoose.connection.collection('books').deleteMany();\nawait mongoose.connection.collection('bookseries').deleteMany();\nawait mongoose.connection.collection('authors').deleteMany();\nawait mongoose.connection.collection('compilers').deleteMany();\nawait mongoose.connection.collection('editors').deleteMany();\nawait mongoose.connection.collection('illustrators').deleteMany();\nawait mongoose.connection.collection('products').deleteMany();\nawait mongoose.connection.collection('producttypes').deleteMany();\nawait mongoose.connection.collection('publishers').deleteMany();\nawait mongoose.connection.collection('sections').deleteMany();\nawait mongoose.connection.collection('translators').deleteMany();\nawait mongoose.connection.collection('users').deleteMany();\nawait mongoose.connection.collection('carts').deleteMany();\nawait mongoose.connection.close();",
              "err": {},
              "uuid": "6a5b01e3-e875-404c-a358-fe372d21c8a2",
              "parentUUID": "46d5f098-ea0d-493e-bf4a-a4400190eed6",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "e63682be-dfaa-44c4-b69e-81e0e9d4fe33",
              "title": " POST \"/book/\" Create new book ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\book-test.js",
              "file": "\\test\\book-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should create new book to database ",
                  "fullTitle": " boook system   POST \"/book/\" Create new book   Should create new book to database ",
                  "timedOut": false,
                  "duration": 73,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//#region adding the necessary objects to the database\nconst productType = {\n\tname: 'Книга',\n\tkey: 'book'\n};\nconst productTypeId = (\n\tawait mongoose.connection\n\t\t.collection('producttypes')\n\t\t.insertOne(productType)\n).insertedId;\nconst section = {\n\tname: 'Комікси і графічні романи',\n\tkey: 'Komiksy i hrafichni romany',\n\tproducts: [],\n\tsections: []\n};\nconst sectionId = (\n\tawait mongoose.connection\n\t\t.collection('sections')\n\t\t.insertOne(section)\n).insertedId;\nconst publisher = {\n\tname: 'Новий Вік',\n\tbooks: [],\n\tbookSeries: [],\n\tdescription:\n\t\t'Видавництво, спеціалізуючеся на публікації літератури різних жанрів',\n\tlogo: 'https://example.com/logo.png'\n};\nconst publisherId = (\n\tawait mongoose.connection\n\t\t.collection('publishers')\n\t\t.insertOne(publisher)\n).insertedId;\nconst author = {\n\tfullName: 'Іван Сидоренко',\n\tbiography: 'Текст біографії автора на українській мові.',\n\tbooks: [],\n\tpictures: ['picture1.jpg', 'picture2.jpg']\n};\nconst authorId = (\n\tawait mongoose.connection\n\t\t.collection('authors')\n\t\t.insertOne(author)\n).insertedId;\nconst authorName = (\n\tawait mongoose.connection.collection('authors').findOne({})\n).fullName;\nconst compiler = {\n\tfullName: 'Іван Бойко',\n\tbooks: []\n};\nconst compilerId = (\n\tawait mongoose.connection\n\t\t.collection('compilers')\n\t\t.insertOne(compiler)\n).insertedId;\nconst translator = {\n\tfullName: 'Анна Мельник',\n\tbooks: []\n};\nconst translatorId = (\n\tawait mongoose.connection\n\t\t.collection('translators')\n\t\t.insertOne(translator)\n).insertedId;\nconst illustrator = {\n\tfullName: 'Ірина Левченко',\n\tbooks: []\n};\nconst illustratorId = (\n\tawait mongoose.connection\n\t\t.collection('illustrators')\n\t\t.insertOne(illustrator)\n).insertedId;\nconst editor = {\n\tfullName: 'Юлія Григоренко',\n\tbooks: []\n};\nconst editorId = (\n\tawait mongoose.connection\n\t\t.collection('editors')\n\t\t.insertOne(editor)\n).insertedId;\nconst bookSeries = {\n\tname: 'Українська класика',\n\tpublisher: publisherId,\n\tbooks: []\n};\nconst bookSeriesId = (\n\tawait mongoose.connection\n\t\t.collection('bookseries')\n\t\t.insertOne(bookSeries)\n).insertedId;\nconst product = {\n\tname: 'Збірка українських поезій',\n\ttype: productTypeId,\n\tprice: 99,\n\tquantity: 10,\n\tdescription:\n\t\t'\"Збірка українських поезій\" - поетичний скарб, що втілює красу та духовність української літератури.',\n\timages: ['image1.png'],\n\tsections: [sectionId],\n\tcreators: [authorName]\n};\nconst productId = (\n\tawait request(app)\n\t\t.post('/product/')\n\t\t.set('Authorization', userToken)\n\t\t.send(product)\n).body._id;\n//#endregion\nconst expectedFields = [\n\t'product',\n\t'type',\n\t'publisher',\n\t'languages',\n\t'publishedIn',\n\t'authors',\n\t'compilers',\n\t'translators',\n\t'illustrators',\n\t'editors',\n\t'series',\n\t'copies',\n\t'isbns',\n\t'firstPublishedIn',\n\t'originalName',\n\t'font',\n\t'format',\n\t'pages',\n\t'weight',\n\t'bindingType',\n\t'paperType',\n\t'illustrationsType',\n\t'literaturePeriod',\n\t'literatureCountry',\n\t'foreignLiterature',\n\t'timePeriod',\n\t'suitableAge',\n\t'packaging',\n\t'occasion',\n\t'style',\n\t'suitableFor'\n];\nconst newBook = {\n\tproduct: productId,\n\ttype: 'Паперова',\n\tpublisher: publisherId,\n\tlanguages: ['Українська'],\n\tpublishedIn: '1980',\n\tauthors: [authorId],\n\tcompilers: [compilerId],\n\ttranslators: [translatorId],\n\tillustrators: [illustratorId],\n\teditors: [editorId],\n\tseries: [bookSeriesId],\n\tcopies: 100,\n\tisbns: ['978-3-16-148410-0'],\n\tfirstPublishedIn: '1981',\n\toriginalName: 'Збірка українських поезій',\n\tfont: 'Arial',\n\tformat: '135х205 мм',\n\tpages: 180,\n\tweight: 300,\n\tbindingType: 'Пришивна палітурка',\n\tpaperType: 'Глянцевий',\n\tillustrationsType: ['Повнокольоровий'],\n\tliteraturePeriod: ['Постмодернізм'],\n\tliteratureCountry: ['Україна'],\n\tforeignLiterature: false,\n\ttimePeriod: ['1980-1990'],\n\tsuitableAge: ['12+'],\n\tpackaging: 'У коробці',\n\toccasion: ['Без приводу'],\n\tstyle: ['Сучасна поезія'],\n\tsuitableFor: ['Дорослих']\n};\nawait request(app)\n\t.post('/book/')\n\t.set('Authorization', userToken)\n\t.send(newBook)\n\t.then(async response => {\n\t\texpect(response.status).to.equal(201);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body).to.include.keys(...expectedFields);\n\t\tbookId = response.body._id;\n\t\t//#region check data integrity\n\t\tawait mongoose.connection\n\t\t\t.collection('publishers')\n\t\t\t.findOne({})\n\t\t\t.then(result => {\n\t\t\t\texpect(\n\t\t\t\t\tresult.books.map(id => id.toString())\n\t\t\t\t).to.include(bookId);\n\t\t\t});\n\t\tawait mongoose.connection\n\t\t\t.collection('authors')\n\t\t\t.findOne({})\n\t\t\t.then(result => {\n\t\t\t\texpect(\n\t\t\t\t\tresult.books.map(id => id.toString())\n\t\t\t\t).to.include(bookId);\n\t\t\t});\n\t\tawait mongoose.connection\n\t\t\t.collection('compilers')\n\t\t\t.findOne({})\n\t\t\t.then(result => {\n\t\t\t\texpect(\n\t\t\t\t\tresult.books.map(id => id.toString())\n\t\t\t\t).to.include(bookId);\n\t\t\t});\n\t\tawait mongoose.connection\n\t\t\t.collection('translators')\n\t\t\t.findOne({})\n\t\t\t.then(result => {\n\t\t\t\texpect(\n\t\t\t\t\tresult.books.map(id => id.toString())\n\t\t\t\t).to.include(bookId);\n\t\t\t});\n\t\tawait mongoose.connection\n\t\t\t.collection('illustrators')\n\t\t\t.findOne({})\n\t\t\t.then(result => {\n\t\t\t\texpect(\n\t\t\t\t\tresult.books.map(id => id.toString())\n\t\t\t\t).to.include(bookId);\n\t\t\t});\n\t\tawait mongoose.connection\n\t\t\t.collection('editors')\n\t\t\t.findOne({})\n\t\t\t.then(result => {\n\t\t\t\texpect(\n\t\t\t\t\tresult.books.map(id => id.toString())\n\t\t\t\t).to.include(bookId);\n\t\t\t});\n\t\tawait mongoose.connection\n\t\t\t.collection('bookseries')\n\t\t\t.findOne({})\n\t\t\t.then(result => {\n\t\t\t\texpect(\n\t\t\t\t\tresult.books.map(id => id.toString())\n\t\t\t\t).to.include(bookId);\n\t\t\t});\n\t\t//#endregion\n\t});",
                  "err": {},
                  "uuid": "1666fdbf-1b4d-4507-8a4f-a0afaa251675",
                  "parentUUID": "e63682be-dfaa-44c4-b69e-81e0e9d4fe33",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1666fdbf-1b4d-4507-8a4f-a0afaa251675"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 73,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c967761a-9a28-4116-b898-c08377959b6f",
              "title": " GET \"/book/\" Get all books ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\book-test.js",
              "file": "\\test\\book-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return all books ",
                  "fullTitle": " boook system   GET \"/book/\" Get all books   Should return all books ",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app)\n\t.get('/book/')\n\t.set('Authorization', userToken)\n\t.then(response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body.result).to.be.an('array');\n\t});",
                  "err": {},
                  "uuid": "05414381-eee3-4e0a-9901-bb16d0f4e714",
                  "parentUUID": "c967761a-9a28-4116-b898-c08377959b6f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "05414381-eee3-4e0a-9901-bb16d0f4e714"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 10,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "947f7107-126e-4070-9625-3f9aa5317622",
              "title": " GET \"/book/:id\" Get one book ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\book-test.js",
              "file": "\\test\\book-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return one book by id ",
                  "fullTitle": " boook system   GET \"/book/:id\" Get one book   Should return one book by id ",
                  "timedOut": false,
                  "duration": 14,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expectedFields = [\n\t'product',\n\t'type',\n\t'publisher',\n\t'languages',\n\t'publishedIn',\n\t'authors',\n\t'compilers',\n\t'translators',\n\t'illustrators',\n\t'editors',\n\t'series',\n\t'copies',\n\t'isbns',\n\t'firstPublishedIn',\n\t'originalName',\n\t'font',\n\t'format',\n\t'pages',\n\t'weight',\n\t'bindingType',\n\t'paperType',\n\t'illustrationsType',\n\t'literaturePeriod',\n\t'literatureCountry',\n\t'foreignLiterature',\n\t'timePeriod',\n\t'suitableAge',\n\t'packaging',\n\t'occasion',\n\t'style',\n\t'suitableFor'\n];\nawait request(app)\n\t.get(`/book/${bookId}`)\n\t.set('Authorization', userToken)\n\t.then(response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body).to.include.keys(...expectedFields);\n\t});",
                  "err": {},
                  "uuid": "9a114b20-329f-499d-92b1-448a3bbc9e14",
                  "parentUUID": "947f7107-126e-4070-9625-3f9aa5317622",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9a114b20-329f-499d-92b1-448a3bbc9e14"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 14,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "49646e9a-5f0b-489c-87c5-f8c59962ab3f",
              "title": " PATCH \"/book/:id\" Update one existing book ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\book-test.js",
              "file": "\\test\\book-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return book with updated data ",
                  "fullTitle": " boook system   PATCH \"/book/:id\" Update one existing book   Should return book with updated data ",
                  "timedOut": false,
                  "duration": 19,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const updatedBookData = {\n\tpublishedIn: '1982',\n\tlanguages: ['English']\n};\nawait request(app)\n\t.patch(`/book/${bookId}`)\n\t.set('Authorization', userToken)\n\t.send(updatedBookData)\n\t.then(response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body.publishedIn).to.equal(1982);\n\t\texpect(response.body.languages).to.include('English');\n\t});",
                  "err": {},
                  "uuid": "a088b619-ca70-4504-85c6-43ebe5372907",
                  "parentUUID": "49646e9a-5f0b-489c-87c5-f8c59962ab3f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a088b619-ca70-4504-85c6-43ebe5372907"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 19,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3cac17bf-ba02-4262-a073-b5fa0d7febc6",
              "title": " DELETE \"/book/:id\" Delete one book ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\book-test.js",
              "file": "\\test\\book-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should mark product as deleted via the \"deletedAt\" field, but not delete. ",
                  "fullTitle": " boook system   DELETE \"/book/:id\" Delete one book   Should mark product as deleted via the \"deletedAt\" field, but not delete. ",
                  "timedOut": false,
                  "duration": 29,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app)\n\t.delete(`/book/${bookId}`)\n\t.set('Authorization', userToken)\n\t.then(async response => {\n\t\texpect(response.status).to.be.equal(204);\n\t\tconst deletedBook = await mongoose.connection\n\t\t\t.collection('books')\n\t\t\t.findOne({});\n\t\texpect(deletedBook.deletedAt).to.not.be.null;\n\t\t//#region checking all dependencies\n\t\tconst author = await mongoose.connection\n\t\t\t.collection('authors')\n\t\t\t.findOne();\n\t\texpect(author.books).to.be.empty;\n\t\tconst compiler = await mongoose.connection\n\t\t\t.collection('compilers')\n\t\t\t.findOne();\n\t\texpect(compiler.books).to.be.empty;\n\t\tconst editor = await mongoose.connection\n\t\t\t.collection('editors')\n\t\t\t.findOne();\n\t\texpect(editor.books).to.be.empty;\n\t\tconst illustrator = await mongoose.connection\n\t\t\t.collection('illustrators')\n\t\t\t.findOne();\n\t\texpect(illustrator.books).to.be.empty;\n\t\tconst translator = await mongoose.connection\n\t\t\t.collection('translators')\n\t\t\t.findOne();\n\t\texpect(translator.books).to.be.empty;\n\t\tconst product = await mongoose.connection\n\t\t\t.collection('products')\n\t\t\t.findOne();\n\t\texpect(product.deletedAt).to.not.be.null;\n\t\tconst section = await mongoose.connection\n\t\t\t.collection('sections')\n\t\t\t.findOne();\n\t\texpect(section.products).to.be.empty;\n\t\t//#endregion\n\t});",
                  "err": {},
                  "uuid": "36af6d5b-31f2-4aba-94b9-76f018663d81",
                  "parentUUID": "3cac17bf-ba02-4262-a073-b5fa0d7febc6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "36af6d5b-31f2-4aba-94b9-76f018663d81"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 29,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "950ba1a5-b4c1-449e-8cb0-47e976ace17e",
          "title": " cart system ",
          "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\cart-test.js",
          "file": "\\test\\cart-test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \" cart system \"",
              "fullTitle": " cart system  \"before all\" hook in \" cart system \"",
              "timedOut": false,
              "duration": 507,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mongoose\n\t.connect(process.env.TEST_CONNECTION_STRING)\n\t.catch(err => {\n\t\tconsole.log(`Failed to connect to database: ${err.message}`);\n\t});\n//#region add admin user to db and take token\nawait request(app).post('/signup').send(adminUser);\nawait mongoose.connection\n\t.collection('users')\n\t.updateOne(\n\t\t{ email: adminUser.email },\n\t\t{ $set: { role: 'admin' } }\n\t);\nconst userData = {\n\tlogin: adminUser.email,\n\tpassword: adminUser.password\n};\nuserToken += (await request(app).post('/login').send(userData))\n\t.body.token;\n//#endregion",
              "err": {},
              "uuid": "6045ba47-eccb-434a-abf1-d51bafc90bec",
              "parentUUID": "950ba1a5-b4c1-449e-8cb0-47e976ace17e",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \" cart system \"",
              "fullTitle": " cart system  \"after all\" hook in \" cart system \"",
              "timedOut": false,
              "duration": 16,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mongoose.connection.collection('products').deleteMany();\nawait mongoose.connection.collection('producttypes').deleteMany();\nawait mongoose.connection.collection('sections').deleteMany();\nawait mongoose.connection.collection('cartitems').deleteMany();\nawait mongoose.connection.collection('users').deleteMany();\nawait mongoose.connection.collection('carts').deleteMany();\nawait mongoose.connection.close();",
              "err": {},
              "uuid": "8d3f9758-0833-4425-9f57-72a3cd71ba40",
              "parentUUID": "950ba1a5-b4c1-449e-8cb0-47e976ace17e",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "274f9485-6e1b-4b8b-aa31-ddc2fc5298ce",
              "title": " GET \"/cart/\" Get cart associated with user ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\cart-test.js",
              "file": "\\test\\cart-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return information about the cart of the authorized user ",
                  "fullTitle": " cart system   GET \"/cart/\" Get cart associated with user   Should return information about the cart of the authorized user ",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expectedFields = ['items', 'totalPrice', 'totalQuantity'];\nawait request(app)\n\t.get('/cart/')\n\t.set('Authorization', userToken)\n\t.then(response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body).to.be.include.keys(...expectedFields);\n\t});",
                  "err": {},
                  "uuid": "b1c477d7-9f36-47b4-90d0-b14b776b9d10",
                  "parentUUID": "274f9485-6e1b-4b8b-aa31-ddc2fc5298ce",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b1c477d7-9f36-47b4-90d0-b14b776b9d10"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fcc08086-aac7-40e1-8330-4442d1804afd",
              "title": " DELETE \"/cart/\" Clear user cart ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\cart-test.js",
              "file": "\\test\\cart-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should empty cart of the authorized user ",
                  "fullTitle": " cart system   DELETE \"/cart/\" Clear user cart   Should empty cart of the authorized user ",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app)\n\t.delete('/cart/')\n\t.set('Authorization', userToken)\n\t.then(async response => {\n\t\texpect(response.status).to.equal(204);\n\t\tconst cart = await mongoose.connection\n\t\t\t.collection('carts')\n\t\t\t.findOne({});\n\t\texpect(cart.items).to.be.empty;\n\t});",
                  "err": {},
                  "uuid": "3cc206b2-915f-4733-9dbc-8e83f01ef435",
                  "parentUUID": "fcc08086-aac7-40e1-8330-4442d1804afd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3cc206b2-915f-4733-9dbc-8e83f01ef435"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 10,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4a0fa1e9-7354-4441-addc-4c04e7e10df1",
              "title": " POST \"/cart-item/\" Add item to user cart ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\cart-test.js",
              "file": "\\test\\cart-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should add the product to the cart of an authorized user ",
                  "fullTitle": " cart system   POST \"/cart-item/\" Add item to user cart   Should add the product to the cart of an authorized user ",
                  "timedOut": false,
                  "duration": 28,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//#region adding the necessary objects to the database\nconst productType = {\n\tname: 'Книга',\n\tkey: 'book'\n};\nconst productTypeId = (\n\tawait mongoose.connection\n\t\t.collection('producttypes')\n\t\t.insertOne(productType)\n).insertedId;\nconst section = {\n\tname: 'Фантастика',\n\tkey: 'fantastic',\n\tproducts: [],\n\tsections: []\n};\nconst sectionId = (\n\tawait mongoose.connection\n\t\t.collection('sections')\n\t\t.insertOne(section)\n).insertedId;\nconst product = {\n\tname: 'Збірка українських поезій',\n\ttype: productTypeId,\n\tprice: 99,\n\tdeliveryPrice: 60,\n\tquantity: 10,\n\tdescription:\n\t\t'\"Збірка українських поезій\" - поетичний скарб, що втілює красу та духовність української літератури.',\n\timages: ['image1.png'],\n\tsections: [sectionId],\n\tmodel: 'Book'\n};\nproductId = (\n\tawait request(app)\n\t\t.post('/product/')\n\t\t.set('Authorization', userToken)\n\t\t.send(product)\n).body._id;\n//#endregion\nconst body = {\n\tproduct: productId.toString()\n};\nawait request(app)\n\t.post('/cart-item/')\n\t.set('Authorization', userToken)\n\t.send(body)\n\t.then(async response => {\n\t\texpect(response.status).to.equal(204);\n\t\tconst cart = await mongoose.connection\n\t\t\t.collection('carts')\n\t\t\t.findOne({});\n\t\texpect(cart.items).to.be.not.empty;\n\t\tconst cartItem = await mongoose.connection\n\t\t\t.collection('cartitems')\n\t\t\t.findOne({ _id: cart.items[0] });\n\t\texpect(cartItem.product.toString()).to.be.equal(productId);\n\t});",
                  "err": {},
                  "uuid": "32667576-13f2-4545-81d5-6a90f614356e",
                  "parentUUID": "4a0fa1e9-7354-4441-addc-4c04e7e10df1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "32667576-13f2-4545-81d5-6a90f614356e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 28,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "40326d91-c17c-4693-b282-5ebfabb6dd19",
              "title": " DELETE \"/cart-item/\" Remove item from user cart ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\cart-test.js",
              "file": "\\test\\cart-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should remove the product from the cart of an authorized user ",
                  "fullTitle": " cart system   DELETE \"/cart-item/\" Remove item from user cart   Should remove the product from the cart of an authorized user ",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const body = {\n\tproduct: productId.toString()\n};\nawait request(app)\n\t.delete('/cart-item/')\n\t.set('Authorization', userToken)\n\t.send(body)\n\t.then(async response => {\n\t\texpect(response.status).to.equal(204);\n\t\tconst cart = await mongoose.connection\n\t\t\t.collection('carts')\n\t\t\t.findOne({});\n\t\texpect(cart.items).to.be.empty;\n\t\tconst cartItems = await mongoose.connection\n\t\t\t.collection('cartitems')\n\t\t\t.findOne({});\n\t\texpect(cartItems).to.be.null;\n\t});",
                  "err": {},
                  "uuid": "16bedbc5-6fa4-44f0-88f8-efd9cd3d6e60",
                  "parentUUID": "40326d91-c17c-4693-b282-5ebfabb6dd19",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "16bedbc5-6fa4-44f0-88f8-efd9cd3d6e60"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 10,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "2397fa3f-fdf9-455d-ac06-d0f9c41e7f2b",
          "title": " compiler system ",
          "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\compiler-test.js",
          "file": "\\test\\compiler-test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \" compiler system \"",
              "fullTitle": " compiler system  \"before all\" hook in \" compiler system \"",
              "timedOut": false,
              "duration": 468,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mongoose\n\t.connect(process.env.TEST_CONNECTION_STRING)\n\t.catch(err => {\n\t\tconsole.log(`Failed to connect to database: ${err.message}`);\n\t});\n//#region add admin user to db and take token\nawait request(app).post('/signup').send(adminUser);\nawait mongoose.connection\n\t.collection('users')\n\t.updateOne(\n\t\t{ email: adminUser.email },\n\t\t{ $set: { role: 'admin' } }\n\t);\nconst userData = {\n\tlogin: adminUser.email,\n\tpassword: adminUser.password\n};\nuserToken += (await request(app).post('/login').send(userData))\n\t.body.token;\n//#endregion",
              "err": {},
              "uuid": "06f50c76-3762-4455-85df-889daa450be7",
              "parentUUID": "2397fa3f-fdf9-455d-ac06-d0f9c41e7f2b",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \" compiler system \"",
              "fullTitle": " compiler system  \"after all\" hook in \" compiler system \"",
              "timedOut": false,
              "duration": 3,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mongoose.connection.collection('compilers').deleteMany();\nawait mongoose.connection.collection('users').deleteMany();\nawait mongoose.connection.collection('carts').deleteMany();\nawait mongoose.connection.close();",
              "err": {},
              "uuid": "6c565921-bb36-40ef-9257-3873b69c8eee",
              "parentUUID": "2397fa3f-fdf9-455d-ac06-d0f9c41e7f2b",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "19b57b87-9fae-4ca5-b0f8-095029f29119",
              "title": " POST \"/compiler/\" Create new compiler ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\compiler-test.js",
              "file": "\\test\\compiler-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should create new compiler in database ",
                  "fullTitle": " compiler system   POST \"/compiler/\" Create new compiler   Should create new compiler in database ",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const newCompiler = {\n\tfullName: 'John Smith',\n\tbooks: []\n};\nconst expectedFields = [\n\t'fullName',\n\t'books',\n\t'_id',\n\t'createdAt',\n\t'updatedAt'\n];\nawait request(app)\n\t.post('/compiler/')\n\t.set('Authorization', userToken)\n\t.send(newCompiler)\n\t.then(response => {\n\t\texpect(response.status).to.equal(201);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body).to.include.keys(...expectedFields);\n\t\tcompilerId = response.body._id;\n\t});",
                  "err": {},
                  "uuid": "fddf189c-8ea7-47cf-b18b-9c6470fd5c9d",
                  "parentUUID": "19b57b87-9fae-4ca5-b0f8-095029f29119",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fddf189c-8ea7-47cf-b18b-9c6470fd5c9d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7acc2eb1-9e2b-4144-bc88-1eae0670b223",
              "title": " GET \"/compiler/\" Get all compilers ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\compiler-test.js",
              "file": "\\test\\compiler-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return all compilers ",
                  "fullTitle": " compiler system   GET \"/compiler/\" Get all compilers   Should return all compilers ",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app)\n\t.get('/compiler/')\n\t.set('Authorization', userToken)\n\t.then(response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body).to.be.an('array');\n\t});",
                  "err": {},
                  "uuid": "2b9aa632-cf15-430a-8a67-4805743b1b10",
                  "parentUUID": "7acc2eb1-9e2b-4144-bc88-1eae0670b223",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2b9aa632-cf15-430a-8a67-4805743b1b10"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8115adbd-9044-4333-a4bb-561c0dcecb09",
              "title": " GET \"/compiler/:id\" Get one compiler ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\compiler-test.js",
              "file": "\\test\\compiler-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return one compiler by id ",
                  "fullTitle": " compiler system   GET \"/compiler/:id\" Get one compiler   Should return one compiler by id ",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expectedFields = [\n\t'fullName',\n\t'books',\n\t'_id',\n\t'createdAt',\n\t'updatedAt'\n];\nawait request(app)\n\t.get(`/compiler/${compilerId}`)\n\t.set('Authorization', userToken)\n\t.then(response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body).to.include.keys(...expectedFields);\n\t});",
                  "err": {},
                  "uuid": "9d8df4ad-10a6-4e65-bec4-35ac420802d6",
                  "parentUUID": "8115adbd-9044-4333-a4bb-561c0dcecb09",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9d8df4ad-10a6-4e65-bec4-35ac420802d6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "23cb2595-3843-4a68-9fa7-f363c3a4f001",
              "title": " PATCH \"/compiler/:id\" Update one existing compiler ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\compiler-test.js",
              "file": "\\test\\compiler-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return one compiler with updated data ",
                  "fullTitle": " compiler system   PATCH \"/compiler/:id\" Update one existing compiler   Should return one compiler with updated data ",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const updatedCompilerData = {\n\tfullName: 'Updated compiler name'\n};\nawait request(app)\n\t.patch(`/compiler/${compilerId}`)\n\t.set('Authorization', userToken)\n\t.send(updatedCompilerData)\n\t.then(response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body.fullName).to.be.equal(\n\t\t\t'Updated compiler name'\n\t\t);\n\t});",
                  "err": {},
                  "uuid": "14f25646-2df7-4323-a71a-5e3d6af9492b",
                  "parentUUID": "23cb2595-3843-4a68-9fa7-f363c3a4f001",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "14f25646-2df7-4323-a71a-5e3d6af9492b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1e845953-e0cc-467b-a378-fb4e83f9b151",
              "title": " DELETE \"/compiler/:id\" Delete one compiler ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\compiler-test.js",
              "file": "\\test\\compiler-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should mark compiler as deleted via the \"deletedAt\" field, but not delete ",
                  "fullTitle": " compiler system   DELETE \"/compiler/:id\" Delete one compiler   Should mark compiler as deleted via the \"deletedAt\" field, but not delete ",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app)\n\t.delete(`/compiler/${compilerId}`)\n\t.set('Authorization', userToken)\n\t.then(async response => {\n\t\texpect(response.status).to.be.equal(204);\n\t\tconst deletedCompiler = await mongoose.connection\n\t\t\t.collection('compilers')\n\t\t\t.findOne({});\n\t\texpect(deletedCompiler.deletedAt).to.not.be.null;\n\t});",
                  "err": {},
                  "uuid": "f2e41595-f6b2-409a-94db-0427b01bffc2",
                  "parentUUID": "1e845953-e0cc-467b-a378-fb4e83f9b151",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f2e41595-f6b2-409a-94db-0427b01bffc2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 10,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "fa7add51-3186-41f2-ad73-d4b7f3c10f81",
          "title": " country system ",
          "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\country-test.js",
          "file": "\\test\\country-test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \" country system \"",
              "fullTitle": " country system  \"before all\" hook in \" country system \"",
              "timedOut": false,
              "duration": 476,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mongoose\n\t.connect(process.env.TEST_CONNECTION_STRING)\n\t.catch(err => {\n\t\tconsole.log(`Failed to connect to database: ${err.message}`);\n\t});\n//#region add admin user to db and take token\nawait request(app).post('/signup').send(adminUser);\nawait mongoose.connection\n\t.collection('users')\n\t.updateOne(\n\t\t{ email: adminUser.email },\n\t\t{ $set: { role: 'admin' } }\n\t);\nconst userData = {\n\tlogin: adminUser.email,\n\tpassword: adminUser.password\n};\nuserToken += (await request(app).post('/login').send(userData))\n\t.body.token;\n//#endregion",
              "err": {},
              "uuid": "3f99a6c7-b8f2-40d7-9c63-2b88d716b4c4",
              "parentUUID": "fa7add51-3186-41f2-ad73-d4b7f3c10f81",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \" country system \"",
              "fullTitle": " country system  \"after all\" hook in \" country system \"",
              "timedOut": false,
              "duration": 15,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mongoose.connection.collection('countries').deleteMany();\nawait mongoose.connection.collection('users').deleteMany();\nawait mongoose.connection.collection('carts').deleteMany();\nawait mongoose.connection.close();",
              "err": {},
              "uuid": "2577db36-3559-4a8a-b442-afd84c4ff99e",
              "parentUUID": "fa7add51-3186-41f2-ad73-d4b7f3c10f81",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "1684369e-a202-4d66-bedf-061dbd82388e",
              "title": " GET \"/country/\" Get all countries ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\country-test.js",
              "file": "\\test\\country-test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \" GET \"/country/\" Get all countries \"",
                  "fullTitle": " country system   GET \"/country/\" Get all countries  \"before all\" hook in \" GET \"/country/\" Get all countries \"",
                  "timedOut": false,
                  "duration": 1,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const country = {\n\tname: 'Україна',\n\tcities: ['Одеса', 'Житомир'],\n\tkey: 'ukraine'\n};\ncountryId = (\n\tawait mongoose.connection\n\t\t.collection('countries')\n\t\t.insertOne(country)\n).insertedId;",
                  "err": {},
                  "uuid": "9eeb9c79-6ee0-40de-91e1-2739b235af9b",
                  "parentUUID": "1684369e-a202-4d66-bedf-061dbd82388e",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return all countries ",
                  "fullTitle": " country system   GET \"/country/\" Get all countries   Should return all countries ",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app)\n\t.get('/country/')\n\t.set('Authorization', userToken)\n\t.then(response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body).to.be.an('array');\n\t});",
                  "err": {},
                  "uuid": "89e60bbb-7302-447c-9067-7c090c63a2fc",
                  "parentUUID": "1684369e-a202-4d66-bedf-061dbd82388e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "89e60bbb-7302-447c-9067-7c090c63a2fc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b2a8ebb4-6e92-490e-af1e-21d487580114",
              "title": " GET \"/country/:id\" Get one country ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\country-test.js",
              "file": "\\test\\country-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return one country by id ",
                  "fullTitle": " country system   GET \"/country/:id\" Get one country   Should return one country by id ",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expectedFields = ['name', 'cities'];\nawait request(app)\n\t.get(`/country/${countryId}`)\n\t.set('Authorization', userToken)\n\t.then(response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body).to.include.keys(...expectedFields);\n\t});",
                  "err": {},
                  "uuid": "60221ddd-8216-48d0-b74a-1a589705e81b",
                  "parentUUID": "b2a8ebb4-6e92-490e-af1e-21d487580114",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "60221ddd-8216-48d0-b74a-1a589705e81b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d63602aa-dcc6-45da-9d37-0fcd9d23bb69",
          "title": " delivery type system ",
          "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\delivery-type-test.js",
          "file": "\\test\\delivery-type-test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \" delivery type system \"",
              "fullTitle": " delivery type system  \"before all\" hook in \" delivery type system \"",
              "timedOut": false,
              "duration": 464,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mongoose\n\t.connect(process.env.TEST_CONNECTION_STRING)\n\t.catch(err => {\n\t\tconsole.log(`Failed to connect to database: ${err.message}`);\n\t});\n//#region add admin user to db and take token\nawait request(app).post('/signup').send(adminUser);\nawait mongoose.connection\n\t.collection('users')\n\t.updateOne(\n\t\t{ email: adminUser.email },\n\t\t{ $set: { role: 'admin' } }\n\t);\nconst userData = {\n\tlogin: adminUser.email,\n\tpassword: adminUser.password\n};\nuserToken += (await request(app).post('/login').send(userData))\n\t.body.token;\n//#endregion",
              "err": {},
              "uuid": "ffd71152-5d0d-408a-ace5-eea50ce8243a",
              "parentUUID": "d63602aa-dcc6-45da-9d37-0fcd9d23bb69",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \" delivery type system \"",
              "fullTitle": " delivery type system  \"after all\" hook in \" delivery type system \"",
              "timedOut": false,
              "duration": 9,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mongoose.connection\n\t.collection('deliverytypes')\n\t.deleteMany();\nawait mongoose.connection.collection('countries').deleteMany();\nawait mongoose.connection.collection('users').deleteMany();\nawait mongoose.connection.collection('carts').deleteMany();\nawait mongoose.connection.close();",
              "err": {},
              "uuid": "7147a5c1-44de-4366-b8d5-a90d6436fee2",
              "parentUUID": "d63602aa-dcc6-45da-9d37-0fcd9d23bb69",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "983b530d-e87d-4f4b-abf0-0599d4f6753b",
              "title": " GET \"/delivery-type/\" Get all delivery types ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\delivery-type-test.js",
              "file": "\\test\\delivery-type-test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \" GET \"/delivery-type/\" Get all delivery types \"",
                  "fullTitle": " delivery type system   GET \"/delivery-type/\" Get all delivery types  \"before all\" hook in \" GET \"/delivery-type/\" Get all delivery types \"",
                  "timedOut": false,
                  "duration": 2,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const country = {\n\tname: 'Україна',\n\tcities: ['Одеса', 'Житомир'],\n\tkey: 'ukraine'\n};\nconst countryId = (\n\tawait mongoose.connection\n\t\t.collection('countries')\n\t\t.insertOne(country)\n).insertedId;\nconst deliveryType = {\n\tname: 'Відділення Нова Пошта',\n\tprice: 60,\n\tcountries: [countryId],\n\tcontactInfoRequired: false,\n\tfullAddressRequired: false,\n\tpaymentTypes: [\n\t\t'Оплата карткою On-line',\n\t\t'Готівкою або карткою: При отриманні',\n\t\t'Передплата: по б/г рахунку (для юр. осіб)'\n\t],\n\tvariablePrice: false,\n\tkey: 'viddilennya-nova-poshta'\n};\nawait mongoose.connection\n\t.collection('deliverytypes')\n\t.insertOne(deliveryType);",
                  "err": {},
                  "uuid": "bb96dbd6-e1a5-44dc-b57b-b6c108eeab33",
                  "parentUUID": "983b530d-e87d-4f4b-abf0-0599d4f6753b",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return all delivery types ",
                  "fullTitle": " delivery type system   GET \"/delivery-type/\" Get all delivery types   Should return all delivery types ",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app)\n\t.get('/delivery-type/')\n\t.set('Authorization', userToken)\n\t.then(response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body).to.be.an('array').and.not.be.empty;\n\t});",
                  "err": {},
                  "uuid": "55c02d9e-48fe-427e-b58c-00fc85cd2fb6",
                  "parentUUID": "983b530d-e87d-4f4b-abf0-0599d4f6753b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "55c02d9e-48fe-427e-b58c-00fc85cd2fb6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "ee2e9101-1de8-4d28-8188-7220aca88f2e",
          "title": " editor system ",
          "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\editor-test.js",
          "file": "\\test\\editor-test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \" editor system \"",
              "fullTitle": " editor system  \"before all\" hook in \" editor system \"",
              "timedOut": false,
              "duration": 470,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mongoose\n\t.connect(process.env.TEST_CONNECTION_STRING)\n\t.catch(err => {\n\t\tconsole.log(`Failed to connect to database: ${err.message}`);\n\t});\n//#region add admin user to db and take token\nawait request(app).post('/signup').send(adminUser);\nawait mongoose.connection\n\t.collection('users')\n\t.updateOne(\n\t\t{ email: adminUser.email },\n\t\t{ $set: { role: 'admin' } }\n\t);\nconst userData = {\n\tlogin: adminUser.email,\n\tpassword: adminUser.password\n};\nuserToken += (await request(app).post('/login').send(userData))\n\t.body.token;\n//#endregion",
              "err": {},
              "uuid": "8e411a37-70dd-4ed5-b0ff-85ee22292dee",
              "parentUUID": "ee2e9101-1de8-4d28-8188-7220aca88f2e",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \" editor system \"",
              "fullTitle": " editor system  \"after all\" hook in \" editor system \"",
              "timedOut": false,
              "duration": 14,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mongoose.connection.collection('editors').deleteMany();\nawait mongoose.connection.collection('users').deleteMany();\nawait mongoose.connection.collection('carts').deleteMany();\nawait mongoose.connection.close();",
              "err": {},
              "uuid": "c8d94628-b3fd-4491-aac6-4a80201b94a5",
              "parentUUID": "ee2e9101-1de8-4d28-8188-7220aca88f2e",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "e76d03bc-2f97-4afc-8dfd-a2118c7cf064",
              "title": " POST \"/editor/\" Create new editor ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\editor-test.js",
              "file": "\\test\\editor-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should create new editor in database ",
                  "fullTitle": " editor system   POST \"/editor/\" Create new editor   Should create new editor in database ",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const newEditor = {\n\tfullName: 'Anna Petrova',\n\tbooks: []\n};\nconst expectedFields = [\n\t'fullName',\n\t'books',\n\t'_id',\n\t'createdAt',\n\t'updatedAt'\n];\nawait request(app)\n\t.post('/editor/')\n\t.set('Authorization', userToken)\n\t.send(newEditor)\n\t.then(response => {\n\t\texpect(response.status).to.equal(201);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body).to.include.keys(...expectedFields);\n\t\teditorId = response.body._id;\n\t});",
                  "err": {},
                  "uuid": "3ba07444-7054-43c7-934d-6f2f5572c4ba",
                  "parentUUID": "e76d03bc-2f97-4afc-8dfd-a2118c7cf064",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3ba07444-7054-43c7-934d-6f2f5572c4ba"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "76caa362-49a1-4ecd-86ec-b1086b5cc05a",
              "title": " GET \"/editor/\" Get all editors ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\editor-test.js",
              "file": "\\test\\editor-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return all editors ",
                  "fullTitle": " editor system   GET \"/editor/\" Get all editors   Should return all editors ",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app)\n\t.get('/editor/')\n\t.set('Authorization', userToken)\n\t.then(response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body).to.be.an('array');\n\t});",
                  "err": {},
                  "uuid": "8946f16a-3742-4436-aa1c-35a8215b7b4c",
                  "parentUUID": "76caa362-49a1-4ecd-86ec-b1086b5cc05a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8946f16a-3742-4436-aa1c-35a8215b7b4c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8dc8806c-6d23-4c4d-a6a8-2aa5c76443f5",
              "title": " GET \"/editor/:id\" Get one editor ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\editor-test.js",
              "file": "\\test\\editor-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return one editor by id  ",
                  "fullTitle": " editor system   GET \"/editor/:id\" Get one editor   Should return one editor by id  ",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expectedFields = [\n\t'fullName',\n\t'books',\n\t'_id',\n\t'createdAt',\n\t'updatedAt'\n];\nawait request(app)\n\t.get(`/editor/${editorId}`)\n\t.set('Authorization', userToken)\n\t.then(response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body).to.include.keys(...expectedFields);\n\t});",
                  "err": {},
                  "uuid": "d98df749-2f84-42f1-9845-3056ea571ba3",
                  "parentUUID": "8dc8806c-6d23-4c4d-a6a8-2aa5c76443f5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d98df749-2f84-42f1-9845-3056ea571ba3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a0bb5d1c-c386-4e6d-914e-9345982e6ed4",
              "title": " PATCH \"/editor/:id\" Update one existing editor ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\editor-test.js",
              "file": "\\test\\editor-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return one editor with updated data ",
                  "fullTitle": " editor system   PATCH \"/editor/:id\" Update one existing editor   Should return one editor with updated data ",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const updatedEditorData = {\n\tfullName: 'Updated editor name'\n};\nawait request(app)\n\t.patch(`/editor/${editorId}`)\n\t.set('Authorization', userToken)\n\t.send(updatedEditorData)\n\t.then(response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body.fullName).to.be.equal(\n\t\t\t'Updated editor name'\n\t\t);\n\t});",
                  "err": {},
                  "uuid": "3bc46e20-7348-44ca-a7ca-e2e770169269",
                  "parentUUID": "a0bb5d1c-c386-4e6d-914e-9345982e6ed4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3bc46e20-7348-44ca-a7ca-e2e770169269"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ba97e499-9580-4881-8e9d-67b8d4e4ec64",
              "title": " DELETE \"/editor/:id\" Delete one editor ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\editor-test.js",
              "file": "\\test\\editor-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should mark editor as deleted via the \"deletedAt\" field, but not delete ",
                  "fullTitle": " editor system   DELETE \"/editor/:id\" Delete one editor   Should mark editor as deleted via the \"deletedAt\" field, but not delete ",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app)\n\t.delete(`/editor/${editorId}`)\n\t.set('Authorization', userToken)\n\t.then(async response => {\n\t\texpect(response.status).to.be.equal(204);\n\t\tconst deletedEditor = await mongoose.connection\n\t\t\t.collection('editors')\n\t\t\t.findOne({});\n\t\texpect(deletedEditor.deletedAt).to.not.be.null;\n\t});",
                  "err": {},
                  "uuid": "9ad2d48d-835f-460b-a30d-bee7f0b837df",
                  "parentUUID": "ba97e499-9580-4881-8e9d-67b8d4e4ec64",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9ad2d48d-835f-460b-a30d-bee7f0b837df"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 10,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "38a07917-a13b-437d-9afb-a1246c93bf90",
          "title": " illustrator system ",
          "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\illustrator-test.js",
          "file": "\\test\\illustrator-test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \" illustrator system \"",
              "fullTitle": " illustrator system  \"before all\" hook in \" illustrator system \"",
              "timedOut": false,
              "duration": 489,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mongoose\n\t.connect(process.env.TEST_CONNECTION_STRING)\n\t.catch(err => {\n\t\tconsole.log(`Failed to connect to database: ${err.message}`);\n\t});\n//#region add admin user to db and take token\nawait request(app).post('/signup').send(adminUser);\nawait mongoose.connection\n\t.collection('users')\n\t.updateOne(\n\t\t{ email: adminUser.email },\n\t\t{ $set: { role: 'admin' } }\n\t);\nconst userData = {\n\tlogin: adminUser.email,\n\tpassword: adminUser.password\n};\nuserToken += (await request(app).post('/login').send(userData))\n\t.body.token;\n//#endregion",
              "err": {},
              "uuid": "e20e44c5-519c-42d9-9fb4-07323d6a9e3a",
              "parentUUID": "38a07917-a13b-437d-9afb-a1246c93bf90",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \" illustrator system \"",
              "fullTitle": " illustrator system  \"after all\" hook in \" illustrator system \"",
              "timedOut": false,
              "duration": 12,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mongoose.connection.collection('illustrators').deleteMany();\nawait mongoose.connection.collection('users').deleteMany();\nawait mongoose.connection.collection('carts').deleteMany();\nawait mongoose.connection.close();",
              "err": {},
              "uuid": "5f4dbdea-74fe-4003-a6cf-4e3632a3a8fd",
              "parentUUID": "38a07917-a13b-437d-9afb-a1246c93bf90",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "4a556801-a98b-46da-b584-6d097e2eb9ee",
              "title": " POST \"/illustrator/\" Create new illustrator ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\illustrator-test.js",
              "file": "\\test\\illustrator-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Shold create new illustrator in database ",
                  "fullTitle": " illustrator system   POST \"/illustrator/\" Create new illustrator   Shold create new illustrator in database ",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const newIllustrator = {\n\tfullName: 'Anna Petrova',\n\tbooks: []\n};\nconst expectedFields = [\n\t'fullName',\n\t'books',\n\t'_id',\n\t'createdAt',\n\t'updatedAt'\n];\nawait request(app)\n\t.post('/illustrator/')\n\t.set('Authorization', userToken)\n\t.send(newIllustrator)\n\t.then(response => {\n\t\texpect(response.status).to.equal(201);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body).to.include.keys(...expectedFields);\n\t\tillustratorId = response.body._id;\n\t});",
                  "err": {},
                  "uuid": "6c7b8b82-0a95-4626-8af7-3e054cd01615",
                  "parentUUID": "4a556801-a98b-46da-b584-6d097e2eb9ee",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6c7b8b82-0a95-4626-8af7-3e054cd01615"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 9,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "090dfa3d-004e-4df4-8e02-440b397266df",
              "title": " GET \"/illustrator/\" Get all illustrators ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\illustrator-test.js",
              "file": "\\test\\illustrator-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return all illustrators ",
                  "fullTitle": " illustrator system   GET \"/illustrator/\" Get all illustrators   Should return all illustrators ",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app)\n\t.get('/illustrator/')\n\t.set('Authorization', userToken)\n\t.then(response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body).to.be.an('array');\n\t});",
                  "err": {},
                  "uuid": "80d872c9-2bfd-4fed-bf18-e8e0708e7a3f",
                  "parentUUID": "090dfa3d-004e-4df4-8e02-440b397266df",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "80d872c9-2bfd-4fed-bf18-e8e0708e7a3f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "878229fe-c030-4607-a28c-3304f60122ed",
              "title": " GET \"/illustrator/:id\" Get one illustrator ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\illustrator-test.js",
              "file": "\\test\\illustrator-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return one illustrator by id ",
                  "fullTitle": " illustrator system   GET \"/illustrator/:id\" Get one illustrator   Should return one illustrator by id ",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expectedFields = [\n\t'fullName',\n\t'books',\n\t'_id',\n\t'createdAt',\n\t'updatedAt'\n];\nawait request(app)\n\t.get(`/illustrator/${illustratorId}`)\n\t.set('Authorization', userToken)\n\t.then(response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body).to.include.keys(...expectedFields);\n\t});",
                  "err": {},
                  "uuid": "a315217f-9309-44e4-b5e8-f8a4e1076d16",
                  "parentUUID": "878229fe-c030-4607-a28c-3304f60122ed",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a315217f-9309-44e4-b5e8-f8a4e1076d16"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "bee3ee34-e83c-4855-bdae-b1679663eba5",
              "title": " PATCH \"/illustrator/:id\" Update one existing illustrator ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\illustrator-test.js",
              "file": "\\test\\illustrator-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return one illustrator with updated data ",
                  "fullTitle": " illustrator system   PATCH \"/illustrator/:id\" Update one existing illustrator   Should return one illustrator with updated data ",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const updatedIllustratorData = {\n\tfullName: 'Updated illustrator name'\n};\nawait request(app)\n\t.patch(`/illustrator/${illustratorId}`)\n\t.set('Authorization', userToken)\n\t.send(updatedIllustratorData)\n\t.then(response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body.fullName).to.be.equal(\n\t\t\t'Updated illustrator name'\n\t\t);\n\t});",
                  "err": {},
                  "uuid": "30b0099f-fe1a-47b7-9ee3-09cf9f273024",
                  "parentUUID": "bee3ee34-e83c-4855-bdae-b1679663eba5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "30b0099f-fe1a-47b7-9ee3-09cf9f273024"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 10,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e0621f26-7873-460f-b195-5fea22187245",
              "title": " DELETE \"/illustrator/:id\" Delete one illustrator ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\illustrator-test.js",
              "file": "\\test\\illustrator-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should mark illustrator as deleted via the \"deletedAt\" field, but not delete ",
                  "fullTitle": " illustrator system   DELETE \"/illustrator/:id\" Delete one illustrator   Should mark illustrator as deleted via the \"deletedAt\" field, but not delete ",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app)\n\t.delete(`/illustrator/${illustratorId}`)\n\t.set('Authorization', userToken)\n\t.then(async response => {\n\t\texpect(response.status).to.be.equal(204);\n\t\tconst deletedIllustrator = await mongoose.connection\n\t\t\t.collection('illustrators')\n\t\t\t.findOne({});\n\t\texpect(deletedIllustrator.deletedAt).to.not.be.null;\n\t});",
                  "err": {},
                  "uuid": "2fdb2fe8-2245-43ed-a166-d5b1cf42d0c4",
                  "parentUUID": "e0621f26-7873-460f-b195-5fea22187245",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2fdb2fe8-2245-43ed-a166-d5b1cf42d0c4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 9,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d873f64f-3a5e-4899-90f3-0fcb73754009",
          "title": " Order system ",
          "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\order-test.js",
          "file": "\\test\\order-test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \" Order system \"",
              "fullTitle": " Order system  \"before all\" hook in \" Order system \"",
              "timedOut": false,
              "duration": 565,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mongoose\n\t.connect(process.env.TEST_CONNECTION_STRING)\n\t.catch(err => {\n\t\tconsole.log(`Failed to connect to database: ${err.message}`);\n\t});\n//#region add admin user to db and take token\nawait request(app).post('/signup').send(adminUser);\nawait mongoose.connection\n\t.collection('users')\n\t.updateOne(\n\t\t{ email: adminUser.email },\n\t\t{ $set: { role: 'admin' } }\n\t);\nconst userData = {\n\tlogin: adminUser.email,\n\tpassword: adminUser.password\n};\nuserToken += (await request(app).post('/login').send(userData))\n\t.body.token;\n//#endregion",
              "err": {},
              "uuid": "34eec2a5-a8b9-46b8-90c3-7174071a4c16",
              "parentUUID": "d873f64f-3a5e-4899-90f3-0fcb73754009",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \" Order system \"",
              "fullTitle": " Order system  \"after all\" hook in \" Order system \"",
              "timedOut": false,
              "duration": 15,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mongoose.connection.collection('products').deleteMany();\nawait mongoose.connection.collection('producttypes').deleteMany();\nawait mongoose.connection.collection('sections').deleteMany();\nawait mongoose.connection.collection('countries').deleteMany();\nawait mongoose.connection.collection('cartitems').deleteMany();\nawait mongoose.connection.collection('orders').deleteMany();\nawait mongoose.connection\n\t.collection('deliverytypes')\n\t.deleteMany();\nawait mongoose.connection.collection('users').deleteMany();\nawait mongoose.connection.collection('carts').deleteMany();\nawait mongoose.connection.close();",
              "err": {},
              "uuid": "54656fc8-ed4b-4015-992e-8788a4c9b462",
              "parentUUID": "d873f64f-3a5e-4899-90f3-0fcb73754009",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "7cdd7651-d4d2-43b6-8a1f-1fe9e9816db3",
              "title": " POST \"/order/\" Create new order ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\order-test.js",
              "file": "\\test\\order-test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \" POST \"/order/\" Create new order \"",
                  "fullTitle": " Order system   POST \"/order/\" Create new order  \"before all\" hook in \" POST \"/order/\" Create new order \"",
                  "timedOut": false,
                  "duration": 3,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const country = {\n\tname: 'Україна',\n\tcities: ['Одеса', 'Житомир'],\n\tkey: 'ukraine'\n};\nconst countryId = (\n\tawait mongoose.connection\n\t\t.collection('countries')\n\t\t.insertOne(country)\n).insertedId;\nconst deliveryType = {\n\tname: \"Кур'єр Нова Пошта\",\n\tprice: 60,\n\tcountries: [countryId],\n\tcontactInfoRequired: false,\n\tfullAddressRequired: false,\n\tpaymentTypes: [\n\t\t'Оплата карткою On-line',\n\t\t'Готівкою або карткою: При отриманні',\n\t\t'Передплата: по б/г рахунку (для юр. осіб)'\n\t],\n\tvariablePrice: false,\n\tkey: 'viddilennya-nova-poshta'\n};\nawait mongoose.connection\n\t.collection('deliverytypes')\n\t.insertOne(deliveryType);\nconst productType = {\n\tname: 'Книга',\n\tkey: 'book'\n};\nconst productTypeId = (\n\tawait mongoose.connection\n\t\t.collection('producttypes')\n\t\t.insertOne(productType)\n).insertedId;\nconst section = {\n\tname: 'Фантастика',\n\tkey: 'fantastic',\n\tproducts: [],\n\tsections: []\n};\nconst sectionId = (\n\tawait mongoose.connection\n\t\t.collection('sections')\n\t\t.insertOne(section)\n).insertedId;\nconst product = {\n\tname: 'Збірка українських поезій',\n\ttype: productTypeId,\n\tprice: 99,\n\tquantity: 10,\n\tdescription:\n\t\t'\"Збірка українських поезій\" - поетичний скарб, що втілює красу та духовність української літератури.',\n\timages: ['image1.png'],\n\tsections: [sectionId],\n\tcode: '1023022'\n};\nproductId = (\n\tawait mongoose.connection\n\t\t.collection('products')\n\t\t.insertOne(product)\n).insertedId;",
                  "err": {},
                  "uuid": "c0f6ba1e-adfb-4110-bd20-d6a73cab42b4",
                  "parentUUID": "7cdd7651-d4d2-43b6-8a1f-1fe9e9816db3",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should register a new user and create an order. Also send 2 emails ",
                  "fullTitle": " Order system   POST \"/order/\" Create new order   Should register a new user and create an order. Also send 2 emails ",
                  "timedOut": false,
                  "duration": 4146,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(10000);\nconst order = {\n\tcontactInfo: {\n\t\tfirstName: 'Микола',\n\t\tlastName: 'Пшеничний',\n\t\tphoneNumber: '+380687744321',\n\t\temail: 'jorobe6702@dronetz.com'\n\t},\n\tgift: false,\n\tcallback: true,\n\tdeliveryInfo: {\n\t\tcountry: 'Україна',\n\t\tcity: 'Київ',\n\t\ttype: \"Кур'єр Нова Пошта\",\n\t\taddress: 'вул. Шевченка, 10'\n\t},\n\tpaymentType: 'Готівкою або карткою: При отриманні',\n\titems: [{ product: productId, quantity: 3 }]\n};\nawait request(app)\n\t.post('/order/')\n\t.send(order)\n\t.then(async response => {\n\t\texpect(response.status).to.be.equal(201);\n\t\tconst user = await mongoose.connection\n\t\t\t.collection('users')\n\t\t\t.findOne({ role: { $ne: 'admin' } });\n\t\texpect(user).to.not.be.null;\n\t\tconst cart = await mongoose.connection\n\t\t\t.collection('carts')\n\t\t\t.findOne({ _id: user.cart });\n\t\texpect(cart).to.not.be.null;\n\t\tconst order = await mongoose.connection\n\t\t\t.collection('orders')\n\t\t\t.findOne({});\n\t\texpect(order).to.not.be.null;\n\t\texpect(order.user.toString()).to.be.equal(\n\t\t\tuser._id.toString()\n\t\t);\n\t\torderId = order._id;\n\t});",
                  "err": {},
                  "uuid": "178228f9-9c9b-496c-945d-6918649055ec",
                  "parentUUID": "7cdd7651-d4d2-43b6-8a1f-1fe9e9816db3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "178228f9-9c9b-496c-945d-6918649055ec"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4146,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7c4bf6d4-fe9a-45f8-9237-418ab2ac7d5d",
              "title": " GET \"/order/\" Get all orders ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\order-test.js",
              "file": "\\test\\order-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return all orders ",
                  "fullTitle": " Order system   GET \"/order/\" Get all orders   Should return all orders ",
                  "timedOut": false,
                  "duration": 15,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app)\n\t.get('/order/')\n\t.set('Authorization', userToken)\n\t.then(response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body).to.be.an('array').and.not.be.empty;\n\t});",
                  "err": {},
                  "uuid": "6a1951e2-c49b-43de-834c-7e5eab93372a",
                  "parentUUID": "7c4bf6d4-fe9a-45f8-9237-418ab2ac7d5d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6a1951e2-c49b-43de-834c-7e5eab93372a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 15,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1556d697-0e2f-46d6-98fa-7e39a0a5c2ce",
              "title": " GET \"/order/statuses\" Get all order statuses ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\order-test.js",
              "file": "\\test\\order-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return all order statuses",
                  "fullTitle": " Order system   GET \"/order/statuses\" Get all order statuses   Should return all order statuses",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app)\n\t.get('/order/statuses/')\n\t.set('Authorization', userToken)\n\t.then(response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body).to.be.an('array').and.not.be.empty;\n\t});",
                  "err": {},
                  "uuid": "31110e56-e326-4ae8-b64f-d7703fe42128",
                  "parentUUID": "1556d697-0e2f-46d6-98fa-7e39a0a5c2ce",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "31110e56-e326-4ae8-b64f-d7703fe42128"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cae11599-e8c8-4f90-b2df-f70ea6a4e88c",
              "title": " GET \"/order/:id\" Get one order ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\order-test.js",
              "file": "\\test\\order-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return one order by id ",
                  "fullTitle": " Order system   GET \"/order/:id\" Get one order   Should return one order by id ",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app)\n\t.get(`/order/${orderId}`)\n\t.set('Authorization', userToken)\n\t.then(response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body).to.be.an('object').and.not.be.null;\n\t});",
                  "err": {},
                  "uuid": "31e10603-69ac-47bc-a837-b021bcba4490",
                  "parentUUID": "cae11599-e8c8-4f90-b2df-f70ea6a4e88c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "31e10603-69ac-47bc-a837-b021bcba4490"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7be39740-77bf-4454-bb21-0a70bcbf65bd",
              "title": " PATCH \"/order/status/:id\" Update status of one existing order ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\order-test.js",
              "file": "\\test\\order-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return one order by id with updated status ",
                  "fullTitle": " Order system   PATCH \"/order/status/:id\" Update status of one existing order   Should return one order by id with updated status ",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const status = await mongoose.connection\n\t.collection('order_statuses')\n\t.findOne({ name: 'Виконаний' });\nawait request(app)\n\t.patch(`/order/status/${orderId}`)\n\t.set('Authorization', userToken)\n\t.send({ status: status._id })\n\t.then(async response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\tconst order = await mongoose.connection\n\t\t\t.collection('orders')\n\t\t\t.findOne({});\n\t\texpect(order.status.name).to.be.equal('Виконаний');\n\t});",
                  "err": {},
                  "uuid": "f1dd9b39-3873-4666-8759-df5e3840ba3c",
                  "parentUUID": "7be39740-77bf-4454-bb21-0a70bcbf65bd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f1dd9b39-3873-4666-8759-df5e3840ba3c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 12,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "093c4d27-cb4c-41c8-94d5-423fd0ab80d2",
          "title": " product system ",
          "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\product-test.js",
          "file": "\\test\\product-test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \" product system \"",
              "fullTitle": " product system  \"before all\" hook in \" product system \"",
              "timedOut": false,
              "duration": 469,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mongoose\n\t.connect(process.env.TEST_CONNECTION_STRING)\n\t.catch(err => {\n\t\tconsole.log(`Failed to connect to database: ${err.message}`);\n\t});\n//#region add admin user to db and take token\nawait request(app).post('/signup').send(adminUser);\nawait mongoose.connection\n\t.collection('users')\n\t.updateOne(\n\t\t{ email: adminUser.email },\n\t\t{ $set: { role: 'admin' } }\n\t);\nconst userData = {\n\tlogin: adminUser.email,\n\tpassword: adminUser.password\n};\nuserToken += (await request(app).post('/login').send(userData))\n\t.body.token;\n//#endregion",
              "err": {},
              "uuid": "ffc06d11-abb7-46d8-95df-aef93de4acdb",
              "parentUUID": "093c4d27-cb4c-41c8-94d5-423fd0ab80d2",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \" product system \"",
              "fullTitle": " product system  \"after all\" hook in \" product system \"",
              "timedOut": false,
              "duration": 19,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mongoose.connection.collection('books').deleteMany();\nawait mongoose.connection.collection('bookseries').deleteMany();\nawait mongoose.connection.collection('authors').deleteMany();\nawait mongoose.connection.collection('compilers').deleteMany();\nawait mongoose.connection.collection('editors').deleteMany();\nawait mongoose.connection.collection('illustrators').deleteMany();\nawait mongoose.connection.collection('products').deleteMany();\nawait mongoose.connection.collection('producttypes').deleteMany();\nawait mongoose.connection.collection('publishers').deleteMany();\nawait mongoose.connection.collection('sections').deleteMany();\nawait mongoose.connection.collection('translators').deleteMany();\nawait mongoose.connection.collection('users').deleteMany();\nawait mongoose.connection.collection('carts').deleteMany();\nawait mongoose.connection.close();",
              "err": {},
              "uuid": "dbc4495b-e150-4ab1-bf2e-c8f14fcf1ece",
              "parentUUID": "093c4d27-cb4c-41c8-94d5-423fd0ab80d2",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "c979d7d4-72bd-4ea5-8a24-d599a6a376fb",
              "title": " GET \"/product/\" Create new product ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\product-test.js",
              "file": "\\test\\product-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should add new product to database. The value of the \"currentProductsQuantity\" property of the \"products_quantity\" collection should increase",
                  "fullTitle": " product system   GET \"/product/\" Create new product   Should add new product to database. The value of the \"currentProductsQuantity\" property of the \"products_quantity\" collection should increase",
                  "timedOut": false,
                  "duration": 19,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//#region adding the necessary objects to the database\nconst productType = {\n\tname: 'Книга',\n\tkey: 'book'\n};\nconst productTypeId = (\n\tawait mongoose.connection\n\t\t.collection('producttypes')\n\t\t.insertOne(productType)\n).insertedId;\nconst section = {\n\tname: 'Фантастика',\n\tkey: 'fantastic',\n\tproducts: [],\n\tsections: []\n};\nconst sectionId = (\n\tawait mongoose.connection\n\t\t.collection('sections')\n\t\t.insertOne(section)\n).insertedId;\nconst author = {\n\tfullName: 'John Smith',\n\tbiography:\n\t\t'Lorem ipsum dolor sit amet, consectetur adipiscing elit.',\n\tbooks: [],\n\tpictures: ['picture1.jpg', 'picture2.jpg']\n};\nawait mongoose.connection\n\t.collection('authors')\n\t.insertOne(author);\nconst authorName = (\n\tawait mongoose.connection.collection('authors').findOne({})\n).fullName;\n//#endregion\nconst oldProductsQuantity = (\n\tawait mongoose.connection\n\t\t.collection('products_quantity')\n\t\t.findOne({})\n).currentProductsQuantity;\nconst product = {\n\tname: 'Збірка українських поезій',\n\ttype: productTypeId,\n\tprice: 99,\n\tquantity: 10,\n\tdescription:\n\t\t'\"Збірка українських поезій\" - поетичний скарб, що втілює красу та духовність української літератури.',\n\timages: ['image1.png'],\n\tsections: [sectionId],\n\tcreators: [authorName]\n};\nconst expectedFields = [\n\t'name',\n\t'key',\n\t'price',\n\t'quantity',\n\t'type',\n\t'sections',\n\t'description',\n\t'reviews',\n\t'images',\n\t'creators',\n\t'requiresDelivery',\n\t'_id',\n\t'createdAt',\n\t'updatedAt',\n\t'code'\n];\nawait request(app)\n\t.post('/product/')\n\t.set('Authorization', userToken)\n\t.send(product)\n\t.then(async response => {\n\t\texpect(response.status).to.equal(201);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body).to.include.keys(...expectedFields);\n\t\tconst newProductsQuantity = (\n\t\t\tawait mongoose.connection\n\t\t\t\t.collection('products_quantity')\n\t\t\t\t.findOne({})\n\t\t).currentProductsQuantity;\n\t\texpect(newProductsQuantity).to.be.above(\n\t\t\toldProductsQuantity\n\t\t);\n\t\tproductId = response.body._id;\n\t});",
                  "err": {},
                  "uuid": "5404c46d-346a-49ed-a1a6-d20f087f79f7",
                  "parentUUID": "c979d7d4-72bd-4ea5-8a24-d599a6a376fb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5404c46d-346a-49ed-a1a6-d20f087f79f7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 19,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "edafdb56-62c3-4b1b-8d5c-bcb31c7e0080",
              "title": " GET \"/product/\" Get all products ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\product-test.js",
              "file": "\\test\\product-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return all products ",
                  "fullTitle": " product system   GET \"/product/\" Get all products   Should return all products ",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app)\n\t.get('/product/')\n\t.set('Authorization', userToken)\n\t.then(response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body.result).to.be.an('array');\n\t});",
                  "err": {},
                  "uuid": "a251fcff-1636-4494-86bb-0524bfff1595",
                  "parentUUID": "edafdb56-62c3-4b1b-8d5c-bcb31c7e0080",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a251fcff-1636-4494-86bb-0524bfff1595"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 8,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "84448f96-cabb-4c46-82f4-1be7f53f629a",
              "title": " GET \"/product/:id\" Get one product ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\product-test.js",
              "file": "\\test\\product-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return one product by id ",
                  "fullTitle": " product system   GET \"/product/:id\" Get one product   Should return one product by id ",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expectedFields = [\n\t'name',\n\t'key',\n\t'price',\n\t'quantity',\n\t'type',\n\t'sections',\n\t'description',\n\t'reviews',\n\t'images',\n\t'creators',\n\t'requiresDelivery',\n\t'_id',\n\t'createdAt',\n\t'updatedAt',\n\t'code'\n];\nawait request(app)\n\t.get(`/product/${productId}`)\n\t.set('Authorization', userToken)\n\t.then(response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body).to.include.keys(...expectedFields);\n\t});",
                  "err": {},
                  "uuid": "4c7f8543-d2b1-48e5-852a-03a536d38043",
                  "parentUUID": "84448f96-cabb-4c46-82f4-1be7f53f629a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4c7f8543-d2b1-48e5-852a-03a536d38043"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1c23f093-65ab-4c16-b305-285ec7df4d41",
              "title": " PATCH \"/product/:id\" Update one existing product ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\product-test.js",
              "file": "\\test\\product-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return product with updated data  ",
                  "fullTitle": " product system   PATCH \"/product/:id\" Update one existing product   Should return product with updated data  ",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const updatedProductData = {\n\tprice: 1000,\n\tquantity: 3\n};\nawait request(app)\n\t.patch(`/product/${productId}`)\n\t.set('Authorization', userToken)\n\t.send(updatedProductData)\n\t.then(response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body.price).to.equal(\n\t\t\tupdatedProductData.price\n\t\t);\n\t\texpect(response.body.quantity).to.equal(\n\t\t\tupdatedProductData.quantity\n\t\t);\n\t});",
                  "err": {},
                  "uuid": "34623d73-841e-4596-b2ed-3e2477ce5415",
                  "parentUUID": "1c23f093-65ab-4c16-b305-285ec7df4d41",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "34623d73-841e-4596-b2ed-3e2477ce5415"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 12,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ad339e20-0985-4df3-9160-f2762e7fbb34",
              "title": " DELETE \"/prodcut/:id\" Delete one product ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\product-test.js",
              "file": "\\test\\product-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should mark product as deleted via the \"deletedAt\" field, but not delete ",
                  "fullTitle": " product system   DELETE \"/prodcut/:id\" Delete one product   Should mark product as deleted via the \"deletedAt\" field, but not delete ",
                  "timedOut": false,
                  "duration": 46,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//#region add necessary dependencies\nconst publisher = {\n\tname: 'Квітка',\n\tbooks: [],\n\tbookSeries: []\n};\nconst publisherId = (\n\tawait mongoose.connection\n\t\t.collection('publishers')\n\t\t.insertOne(publisher)\n).insertedId;\nconst book = {\n\tproduct: productId,\n\tpublisher: publisherId,\n\tlanguages: ['Українська'],\n\ttype: 'Паперова',\n\tpublishedIn: 1994\n};\nawait request(app)\n\t.post('/book/')\n\t.set('Authorization', userToken)\n\t.send(book);\n//#endregion\nawait request(app)\n\t.delete(`/product/${productId}`)\n\t.set('Authorization', userToken)\n\t.then(async response => {\n\t\texpect(response.status).to.equal(204);\n\t\tconst product = await mongoose.connection\n\t\t\t.collection('products')\n\t\t\t.findOne({});\n\t\texpect(product.deletedAt).to.be.not.null;\n\t\tconst book = await mongoose.connection\n\t\t\t.collection('books')\n\t\t\t.findOne({});\n\t\texpect(book.deletedAt).to.be.not.null;\n\t\tconst section = await mongoose.connection\n\t\t\t.collection('sections')\n\t\t\t.findOne({});\n\t\texpect(section.products).to.be.empty;\n\t});",
                  "err": {},
                  "uuid": "0e296569-9dc7-4157-86de-3da6aaa44bc5",
                  "parentUUID": "ad339e20-0985-4df3-9160-f2762e7fbb34",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0e296569-9dc7-4157-86de-3da6aaa44bc5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 46,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "91393306-e88e-4460-a1b1-334c73233ea0",
          "title": " product-type system ",
          "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\product-type-test.js",
          "file": "\\test\\product-type-test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \" product-type system \"",
              "fullTitle": " product-type system  \"before all\" hook in \" product-type system \"",
              "timedOut": false,
              "duration": 474,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mongoose\n\t.connect(process.env.TEST_CONNECTION_STRING)\n\t.catch(err => {\n\t\tconsole.log(`Failed to connect to database: ${err.message}`);\n\t});\n//#region add admin user to db and take token\nawait request(app).post('/signup').send(adminUser);\nawait mongoose.connection\n\t.collection('users')\n\t.updateOne(\n\t\t{ email: adminUser.email },\n\t\t{ $set: { role: 'admin' } }\n\t);\nconst userData = {\n\tlogin: adminUser.email,\n\tpassword: adminUser.password\n};\nuserToken += (await request(app).post('/login').send(userData))\n\t.body.token;\n//#endregion",
              "err": {},
              "uuid": "84e95e96-802c-452c-aed8-e13b1cfbc264",
              "parentUUID": "91393306-e88e-4460-a1b1-334c73233ea0",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \" product-type system \"",
              "fullTitle": " product-type system  \"after all\" hook in \" product-type system \"",
              "timedOut": false,
              "duration": 6,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mongoose.connection.collection('producttypes').deleteMany();\nawait mongoose.connection.collection('users').deleteMany();\nawait mongoose.connection.collection('carts').deleteMany();\nawait mongoose.connection.close();",
              "err": {},
              "uuid": "21962897-109a-4fc0-adda-fdab511b98e0",
              "parentUUID": "91393306-e88e-4460-a1b1-334c73233ea0",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "08935c4f-0340-4cdd-b6b7-723e9113c465",
              "title": " POST \"/product-type/\" Create new product type ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\product-type-test.js",
              "file": "\\test\\product-type-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should add new product type to database ",
                  "fullTitle": " product-type system   POST \"/product-type/\" Create new product type   Should add new product type to database ",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const newProductType = {\n\tname: 'Book',\n\tkey: 'book'\n};\nconst expectedFields = [\n\t'name',\n\t'_id',\n\t'createdAt',\n\t'updatedAt'\n];\nawait request(app)\n\t.post('/product-type/')\n\t.set('Authorization', userToken)\n\t.send(newProductType)\n\t.then(response => {\n\t\texpect(response.status).to.equal(201);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body).to.include.keys(...expectedFields);\n\t\tproductTypeId = response.body._id;\n\t});",
                  "err": {},
                  "uuid": "a81372df-badf-48b1-bd4b-816bcf5b2456",
                  "parentUUID": "08935c4f-0340-4cdd-b6b7-723e9113c465",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a81372df-badf-48b1-bd4b-816bcf5b2456"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 9,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d9d1cc27-52bc-4784-aceb-4b2c6142aa4e",
              "title": " GET \"/product-type/\" Get all product types ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\product-type-test.js",
              "file": "\\test\\product-type-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return all product types ",
                  "fullTitle": " product-type system   GET \"/product-type/\" Get all product types   Should return all product types ",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app)\n\t.get('/product-type/')\n\t.set('Authorization', userToken)\n\t.then(response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body).to.be.an('array');\n\t});",
                  "err": {},
                  "uuid": "29611973-a5d7-41ec-b0d0-fee9b0cf84ca",
                  "parentUUID": "d9d1cc27-52bc-4784-aceb-4b2c6142aa4e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "29611973-a5d7-41ec-b0d0-fee9b0cf84ca"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8d26fb91-9b97-417f-aa95-8bc50ff51a61",
              "title": " GET \"/product-type/:id\" Get one product type ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\product-type-test.js",
              "file": "\\test\\product-type-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return one product type by id ",
                  "fullTitle": " product-type system   GET \"/product-type/:id\" Get one product type   Should return one product type by id ",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expectedFields = [\n\t'name',\n\t'_id',\n\t'createdAt',\n\t'updatedAt'\n];\nawait request(app)\n\t.get(`/product-type/${productTypeId}`)\n\t.set('Authorization', userToken)\n\t.then(response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body).to.include.keys(...expectedFields);\n\t});",
                  "err": {},
                  "uuid": "f04d6372-3dfa-45f4-8c18-0c432f6537d6",
                  "parentUUID": "8d26fb91-9b97-417f-aa95-8bc50ff51a61",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f04d6372-3dfa-45f4-8c18-0c432f6537d6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7419a77a-1f1a-409f-89bf-d7269eeabeda",
              "title": " PATCH \"/product-type/:id\" Update one existing product type ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\product-type-test.js",
              "file": "\\test\\product-type-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return product type with updated data ",
                  "fullTitle": " product-type system   PATCH \"/product-type/:id\" Update one existing product type   Should return product type with updated data ",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const updatedProductTypeData = {\n\tname: 'E-Book',\n\tkey: 'e-book'\n};\nconst expectedFields = [\n\t'name',\n\t'_id',\n\t'createdAt',\n\t'updatedAt'\n];\nawait request(app)\n\t.patch(`/product-type/${productTypeId}`)\n\t.set('Authorization', userToken)\n\t.send(updatedProductTypeData)\n\t.then(response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body).to.include.keys(...expectedFields);\n\t});",
                  "err": {},
                  "uuid": "2d1a716d-12c7-4ff9-8ae8-19f5dd15951e",
                  "parentUUID": "7419a77a-1f1a-409f-89bf-d7269eeabeda",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2d1a716d-12c7-4ff9-8ae8-19f5dd15951e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fe6c0b6a-a2a4-4950-b807-3e0b58bf959e",
              "title": " DELETE \"/prodcut-type/:id\" Delete one product type ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\product-type-test.js",
              "file": "\\test\\product-type-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should delete one product type from database ",
                  "fullTitle": " product-type system   DELETE \"/prodcut-type/:id\" Delete one product type   Should delete one product type from database ",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app)\n\t.delete(`/product-type/${productTypeId}`)\n\t.set('Authorization', userToken)\n\t.then(async response => {\n\t\texpect(response.status).to.be.equal(204);\n\t\tconst productTypeObject = await mongoose.connection\n\t\t\t.collection('producttypes')\n\t\t\t.findOne();\n\t\texpect(productTypeObject).to.be.null;\n\t});",
                  "err": {},
                  "uuid": "0cd013d1-b0d5-40fb-b265-d7f959358ccd",
                  "parentUUID": "fe6c0b6a-a2a4-4950-b807-3e0b58bf959e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0cd013d1-b0d5-40fb-b265-d7f959358ccd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 11,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "0ff06a02-0468-4829-9e35-47b824d4a78f",
          "title": " publisher system ",
          "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\publisher-test.js",
          "file": "\\test\\publisher-test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \" publisher system \"",
              "fullTitle": " publisher system  \"before all\" hook in \" publisher system \"",
              "timedOut": false,
              "duration": 491,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mongoose\n\t.connect(process.env.TEST_CONNECTION_STRING)\n\t.catch(err => {\n\t\tconsole.log(`Failed to connect to database: ${err.message}`);\n\t});\n//#region add admin user to db and take token\nawait request(app).post('/signup').send(adminUser);\nawait mongoose.connection\n\t.collection('users')\n\t.updateOne(\n\t\t{ email: adminUser.email },\n\t\t{ $set: { role: 'admin' } }\n\t);\nconst userData = {\n\tlogin: adminUser.email,\n\tpassword: adminUser.password\n};\nuserToken += (await request(app).post('/login').send(userData))\n\t.body.token;\n//#endregion",
              "err": {},
              "uuid": "6176ce38-372e-4c86-b757-f84bc134c80e",
              "parentUUID": "0ff06a02-0468-4829-9e35-47b824d4a78f",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \" publisher system \"",
              "fullTitle": " publisher system  \"after all\" hook in \" publisher system \"",
              "timedOut": false,
              "duration": 10,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mongoose.connection.collection('publishers').deleteMany();\nawait mongoose.connection.collection('users').deleteMany();\nawait mongoose.connection.collection('carts').deleteMany();\nawait mongoose.connection.close();",
              "err": {},
              "uuid": "8f7e6c93-1465-4164-b0cb-933b7b461ccd",
              "parentUUID": "0ff06a02-0468-4829-9e35-47b824d4a78f",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "ce504d9a-086c-43de-8a98-3c5818e4d119",
              "title": " POST \"/publisher/\" Create new publisher ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\publisher-test.js",
              "file": "\\test\\publisher-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should create new publisher ",
                  "fullTitle": " publisher system   POST \"/publisher/\" Create new publisher   Should create new publisher ",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const newPublisher = {\n\tname: 'OpenAI',\n\tbooks: [],\n\tbookSeries: [],\n\tdescription: 'Publishing company specializing in AI research',\n\tlogo: 'https://example.com/logo.png'\n};\nconst expectedFields = [\n\t'name',\n\t'books',\n\t'bookSeries',\n\t'description',\n\t'_id',\n\t'createdAt',\n\t'updatedAt'\n];\nawait request(app)\n\t.post('/publisher/')\n\t.set('Authorization', userToken)\n\t.send(newPublisher)\n\t.then(response => {\n\t\texpect(response.status).to.equal(201);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body).to.include.keys(...expectedFields);\n\t\tpublisherId = response.body._id;\n\t});",
                  "err": {},
                  "uuid": "4a5f9cb3-0c28-421a-97f9-c4004c7bebea",
                  "parentUUID": "ce504d9a-086c-43de-8a98-3c5818e4d119",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4a5f9cb3-0c28-421a-97f9-c4004c7bebea"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 8,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9948ae26-29d5-4b6e-bdf9-6b453520a568",
              "title": " GET \"/publisher/\" Get all publishers ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\publisher-test.js",
              "file": "\\test\\publisher-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return fll publishers ",
                  "fullTitle": " publisher system   GET \"/publisher/\" Get all publishers   Should return fll publishers ",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app)\n\t.get('/publisher/')\n\t.set('Authorization', userToken)\n\t.then(response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body).to.be.an('array');\n\t});",
                  "err": {},
                  "uuid": "994036a7-1591-4ea1-bde2-b8e98b5b3e0b",
                  "parentUUID": "9948ae26-29d5-4b6e-bdf9-6b453520a568",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "994036a7-1591-4ea1-bde2-b8e98b5b3e0b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6f72a4ed-5cac-4de7-8aa4-794f4938a511",
              "title": " GET \"/publisher/:id\" Get one publisher ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\publisher-test.js",
              "file": "\\test\\publisher-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return one publisher by id ",
                  "fullTitle": " publisher system   GET \"/publisher/:id\" Get one publisher   Should return one publisher by id ",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expectedFields = [\n\t'name',\n\t'books',\n\t'bookSeries',\n\t'description',\n\t'_id',\n\t'createdAt',\n\t'updatedAt'\n];\nawait request(app)\n\t.get(`/publisher/${publisherId}`)\n\t.set('Authorization', userToken)\n\t.then(response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body).to.include.keys(...expectedFields);\n\t});",
                  "err": {},
                  "uuid": "c7b6d665-e0ce-4c16-853f-0867a5ec22d3",
                  "parentUUID": "6f72a4ed-5cac-4de7-8aa4-794f4938a511",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c7b6d665-e0ce-4c16-853f-0867a5ec22d3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6885b8fa-7939-4730-9b1e-e1cc5e306eef",
              "title": " PATCH \"/publisher/:id\" Update one existing publisher ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\publisher-test.js",
              "file": "\\test\\publisher-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return one publisher with updated data ",
                  "fullTitle": " publisher system   PATCH \"/publisher/:id\" Update one existing publisher   Should return one publisher with updated data ",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const updatedPublisherData = {\n\tname: 'Updated Publisher',\n\tdescription:\n\t\t'This is an updated description with more than 40 characters.',\n\tlogo: 'https://example.com/updated-logo.png'\n};\nconst expectedFields = [\n\t'name',\n\t'books',\n\t'bookSeries',\n\t'description',\n\t'_id',\n\t'createdAt',\n\t'updatedAt'\n];\nawait request(app)\n\t.patch(`/publisher/${publisherId}`)\n\t.set('Authorization', userToken)\n\t.send(updatedPublisherData)\n\t.then(response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body).to.include.keys(...expectedFields);\n\t});",
                  "err": {},
                  "uuid": "9de71e57-cda8-4bbe-aa73-66470aec598c",
                  "parentUUID": "6885b8fa-7939-4730-9b1e-e1cc5e306eef",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9de71e57-cda8-4bbe-aa73-66470aec598c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 10,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "27d1b4cd-1660-4fe7-8aa2-23437935711b",
              "title": " DELETE \"/publisher/:id\" Delete one publisher ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\publisher-test.js",
              "file": "\\test\\publisher-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should mark section as deleted via the \"deletedAt\" field, but not delete ",
                  "fullTitle": " publisher system   DELETE \"/publisher/:id\" Delete one publisher   Should mark section as deleted via the \"deletedAt\" field, but not delete ",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app)\n\t.delete(`/publisher/${publisherId}`)\n\t.set('Authorization', userToken)\n\t.then(async response => {\n\t\texpect(response.status).to.be.equal(204);\n\t\tconst publisher = await mongoose.connection\n\t\t\t.collection('publishers')\n\t\t\t.findOne({});\n\t\texpect(publisher.deletedAt).to.be.not.null;\n\t});",
                  "err": {},
                  "uuid": "d76e9bd5-63f2-4613-b5b2-c445ec7c445b",
                  "parentUUID": "27d1b4cd-1660-4fe7-8aa2-23437935711b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d76e9bd5-63f2-4613-b5b2-c445ec7c445b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 8,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "0fb22fd1-2727-49aa-9ff4-763e95a77b9f",
          "title": " review system ",
          "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\review-test.js",
          "file": "\\test\\review-test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \" review system \"",
              "fullTitle": " review system  \"before all\" hook in \" review system \"",
              "timedOut": false,
              "duration": 463,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mongoose\n\t.connect(process.env.TEST_CONNECTION_STRING)\n\t.catch(err => {\n\t\tconsole.log(`Failed to connect to database: ${err.message}`);\n\t});\n//#region add admin user to db and take token\nawait request(app).post('/signup').send(adminUser);\nawait mongoose.connection\n\t.collection('users')\n\t.updateOne(\n\t\t{ email: adminUser.email },\n\t\t{ $set: { role: 'admin' } }\n\t);\nconst userData = {\n\tlogin: adminUser.email,\n\tpassword: adminUser.password\n};\nuserToken += (await request(app).post('/login').send(userData))\n\t.body.token;\n//#endregion",
              "err": {},
              "uuid": "17580270-7bee-44ff-82a6-aa3807a62e34",
              "parentUUID": "0fb22fd1-2727-49aa-9ff4-763e95a77b9f",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \" review system \"",
              "fullTitle": " review system  \"after all\" hook in \" review system \"",
              "timedOut": false,
              "duration": 19,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mongoose.connection.collection('products').deleteMany();\nawait mongoose.connection.collection('producttypes').deleteMany();\nawait mongoose.connection.collection('sections').deleteMany();\nawait mongoose.connection.collection('reviews').deleteMany();\nawait mongoose.connection.collection('users').deleteMany();\nawait mongoose.connection.collection('carts').deleteMany();\nawait mongoose.connection.close();",
              "err": {},
              "uuid": "69879493-eaeb-4f65-95cb-b8e9f3c20932",
              "parentUUID": "0fb22fd1-2727-49aa-9ff4-763e95a77b9f",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "b484284a-4126-4258-8bec-36d57a904f97",
              "title": " POST \"/review/\" Create new review ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\review-test.js",
              "file": "\\test\\review-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should create new review ",
                  "fullTitle": " review system   POST \"/review/\" Create new review   Should create new review ",
                  "timedOut": false,
                  "duration": 24,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//#region adding the necessary objects to the database\nconst productType = {\n\tname: 'Книга',\n\tkey: 'book'\n};\nconst productTypeId = (\n\tawait mongoose.connection\n\t\t.collection('producttypes')\n\t\t.insertOne(productType)\n).insertedId;\nconst section = {\n\tname: 'Фантастика',\n\tkey: 'fantastic',\n\tproducts: [],\n\tsections: []\n};\nconst sectionId = (\n\tawait mongoose.connection\n\t\t.collection('sections')\n\t\t.insertOne(section)\n).insertedId;\nconst product = {\n\tname: 'Збірка українських поезій',\n\ttype: productTypeId,\n\tprice: 99,\n\tdeliveryPrice: 60,\n\tquantity: 10,\n\tdescription:\n\t\t'\"Збірка українських поезій\" - поетичний скарб, що втілює красу та духовність української літератури.',\n\timages: ['image1.png'],\n\tsections: [sectionId],\n\tmodel: 'Book'\n};\nconst productId = (\n\tawait request(app)\n\t\t.post('/product/')\n\t\t.set('Authorization', userToken)\n\t\t.send(product)\n).body._id;\nconst userId = (\n\tawait mongoose.connection.collection('users').findOne({})\n)._id;\n//#endregion\nconst review = {\n\tproduct: productId,\n\tuser: userId,\n\ttitle: 'Приголомшлива книжкова подорож',\n\ttext: 'Ця книга змушує вас погрузнутися у захопливий світ, де кожна сторінка відкриває нові глибини емоцій та незабутніх пригод. Ви не зможете відірвати очі від її сторінок, а кожне речення залишить слід у вашому серці.',\n\trating: 5\n};\nconst expectedFields = [\n\t'product',\n\t'user',\n\t'title',\n\t'text',\n\t'likes',\n\t'dislikes',\n\t'rating',\n\t'_id',\n\t'createdAt',\n\t'updatedAt'\n];\nawait request(app)\n\t.post('/review/')\n\t.set('Authorization', userToken)\n\t.send(review)\n\t.then(response => {\n\t\texpect(response.status).to.equal(201);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body).to.include.keys(...expectedFields);\n\t\treviewId = response.body._id;\n\t});",
                  "err": {},
                  "uuid": "0889b037-f5a9-4454-85a9-19b88a08232f",
                  "parentUUID": "b484284a-4126-4258-8bec-36d57a904f97",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0889b037-f5a9-4454-85a9-19b88a08232f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 24,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "283ddbd5-efc8-4d42-9b16-27f633562246",
              "title": " PATCH \"/review/:id\" Update one existing review ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\review-test.js",
              "file": "\\test\\review-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return one section with updated data ",
                  "fullTitle": " review system   PATCH \"/review/:id\" Update one existing review   Should return one section with updated data ",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const updatedReviewData = {\n\ttitle: 'Приголомшлива подорож.'\n};\nawait request(app)\n\t.patch(`/review/${reviewId}`)\n\t.set('Authorization', userToken)\n\t.send(updatedReviewData)\n\t.then(response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body.title).to.be.equal(\n\t\t\t'Приголомшлива подорож.'\n\t\t);\n\t});",
                  "err": {},
                  "uuid": "b2a4d978-5a12-41f4-99ea-b5e1a5b345b3",
                  "parentUUID": "283ddbd5-efc8-4d42-9b16-27f633562246",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b2a4d978-5a12-41f4-99ea-b5e1a5b345b3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 9,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d43c53bd-dc1e-429b-a2b2-36e5220f1783",
              "title": " DELETE \"/review/:id\" Delete one review ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\review-test.js",
              "file": "\\test\\review-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should mark review as deleted via the \"deletedAt\" field, but not delete ",
                  "fullTitle": " review system   DELETE \"/review/:id\" Delete one review   Should mark review as deleted via the \"deletedAt\" field, but not delete ",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app)\n\t.delete(`/review/${reviewId}`)\n\t.set('Authorization', userToken)\n\t.then(async response => {\n\t\texpect(response.status).to.equal(204);\n\t\tconst review = await mongoose.connection\n\t\t\t.collection('reviews')\n\t\t\t.findOne({});\n\t\texpect(review.deletedAt).to.be.not.null;\n\t});",
                  "err": {},
                  "uuid": "cd619a92-bb87-4d5a-b7da-910438c6dc59",
                  "parentUUID": "d43c53bd-dc1e-429b-a2b2-36e5220f1783",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cd619a92-bb87-4d5a-b7da-910438c6dc59"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 11,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9a96e148-9e00-433f-b795-8149a40383c2",
          "title": " serach system ",
          "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\search-test.js",
          "file": "\\test\\search-test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \" serach system \"",
              "fullTitle": " serach system  \"before all\" hook in \" serach system \"",
              "timedOut": false,
              "duration": 474,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mongoose\n\t.connect(process.env.TEST_CONNECTION_STRING)\n\t.catch(err => {\n\t\tconsole.log(`Failed to connect to database: ${err.message}`);\n\t});\n//#region add admin user to db and take token\nawait request(app).post('/signup').send(adminUser);\nawait mongoose.connection\n\t.collection('users')\n\t.updateOne(\n\t\t{ email: adminUser.email },\n\t\t{ $set: { role: 'admin' } }\n\t);\nconst userData = {\n\tlogin: adminUser.email,\n\tpassword: adminUser.password\n};\nuserToken += (await request(app).post('/login').send(userData))\n\t.body.token;\n//#endregion",
              "err": {},
              "uuid": "65b0101a-c17d-43c6-b89e-5d88640f5e6a",
              "parentUUID": "9a96e148-9e00-433f-b795-8149a40383c2",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \" serach system \"",
              "fullTitle": " serach system  \"after all\" hook in \" serach system \"",
              "timedOut": false,
              "duration": 14,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mongoose.connection.collection('authors').deleteMany();\nawait mongoose.connection.collection('products').deleteMany();\nawait mongoose.connection.collection('producttypes').deleteMany();\nawait mongoose.connection.collection('sections').deleteMany();\nawait mongoose.connection.collection('users').deleteMany();\nawait mongoose.connection.collection('carts').deleteMany();\nawait mongoose.connection.close();",
              "err": {},
              "uuid": "cdd78619-6148-43ae-b028-86537830a20f",
              "parentUUID": "9a96e148-9e00-433f-b795-8149a40383c2",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "2288f7c0-e934-4f0d-a9c2-23bf3d7ef49a",
              "title": "GET \"/search?q=\" Search for product(s) ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\search-test.js",
              "file": "\\test\\search-test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"GET \"/search?q=\" Search for product(s) \"",
                  "fullTitle": " serach system  GET \"/search?q=\" Search for product(s)  \"before all\" hook in \"GET \"/search?q=\" Search for product(s) \"",
                  "timedOut": false,
                  "duration": 37,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const productType = {\n\tname: 'Книга',\n\tkey: 'book'\n};\nconst productTypeId = (\n\tawait mongoose.connection\n\t\t.collection('producttypes')\n\t\t.insertOne(productType)\n).insertedId;\nconst section = {\n\tname: 'Фантастика',\n\tkey: 'fantastic',\n\tproducts: [],\n\tsections: []\n};\nconst sectionId = (\n\tawait mongoose.connection\n\t\t.collection('sections')\n\t\t.insertOne(section)\n).insertedId;\nconst author = {\n\tfullName: 'John Smith',\n\tbiography:\n\t\t'Lorem ipsum dolor sit amet, consectetur adipiscing elit.',\n\tbooks: [],\n\tpictures: ['picture1.jpg', 'picture2.jpg']\n};\nawait mongoose.connection\n\t.collection('authors')\n\t.insertOne(author);\nconst authorName = (\n\tawait mongoose.connection.collection('authors').findOne({})\n).fullName;\nconst product1 = {\n\tname: 'Збірка українських поезій',\n\ttype: productTypeId,\n\tprice: 99,\n\tquantity: 10,\n\tdescription:\n\t\t'\"Збірка українських поезій\" - поетичний скарб, що втілює красу та духовність української літератури.',\n\timages: ['image1.png'],\n\tsections: [sectionId],\n\tcreators: [authorName]\n};\nconst product2 = {\n\tname: 'Мистецтво говорити. Таємниці ефективного спілкування',\n\ttype: productTypeId,\n\tprice: 80,\n\tquantity: 10,\n\tdescription:\n\t\t'Бізнес-тренер Джеймс Борґ, відомий своїми відкриттями в галузях спілкування, особистісного розвитку, мови тіла та «контролю мислення», пропонує прості і дієві поради для кожної людини. ',\n\timages: ['image2.png'],\n\tsections: [sectionId],\n\tcreators: [authorName]\n};\nconst product3 = {\n\tname: '48 законів влади',\n\ttype: productTypeId,\n\tprice: 99,\n\tquantity: 10,\n\tdescription:\n\t\t'Сорок вісім хитрих, безжальних, повчальних законів влади від Роберта Гріна, які стануть у пригоді кожному, хто прагне досягати вершин.',\n\timages: ['image3.png'],\n\tsections: [sectionId],\n\tcreators: [authorName]\n};\nproduct1Code = (\n\tawait request(app)\n\t\t.post('/product/')\n\t\t.set('Authorization', userToken)\n\t\t.send(product1)\n).body.code;\nawait request(app)\n\t.post('/product/')\n\t.set('Authorization', userToken)\n\t.send(product2);\nawait request(app)\n\t.post('/product/')\n\t.set('Authorization', userToken)\n\t.send(product3);",
                  "err": {},
                  "uuid": "a931ae61-be15-46ec-8de6-8c3465d14289",
                  "parentUUID": "2288f7c0-e934-4f0d-a9c2-23bf3d7ef49a",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return three poducts with entered author ",
                  "fullTitle": " serach system  GET \"/search?q=\" Search for product(s)   Should return three poducts with entered author ",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app)\n\t.get(`/search?q=${'John Smith'}`)\n\t.then(response => {\n\t\texpect(response.status).to.be.equal(200);\n\t\texpect(response.body.result).to.not.be.empty;\n\t\texpect(response.body.total).to.be.equal(3);\n\t});",
                  "err": {},
                  "uuid": "3be9853f-874e-4b3c-b137-70f9572e0edc",
                  "parentUUID": "2288f7c0-e934-4f0d-a9c2-23bf3d7ef49a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": " Should return three products with an incomplete entered author ",
                  "fullTitle": " serach system  GET \"/search?q=\" Search for product(s)   Should return three products with an incomplete entered author ",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app)\n\t.get(`/search?q=${'Joh'}`)\n\t.then(response => {\n\t\texpect(response.status).to.be.equal(200);\n\t\texpect(response.body.result).to.not.be.empty;\n\t\texpect(response.body.total).to.be.equal(3);\n\t});",
                  "err": {},
                  "uuid": "3620237c-d10b-4b97-8644-ef8a7ba2ddf2",
                  "parentUUID": "2288f7c0-e934-4f0d-a9c2-23bf3d7ef49a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": " Should return one product with entered product code ",
                  "fullTitle": " serach system  GET \"/search?q=\" Search for product(s)   Should return one product with entered product code ",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app)\n\t.get(`/search?q=${product1Code}`)\n\t.then(response => {\n\t\texpect(response.status).to.be.equal(200);\n\t\texpect(response.body.result).to.not.be.empty;\n\t\texpect(response.body.total).to.be.equal(1);\n\t});",
                  "err": {},
                  "uuid": "3b7ea676-7912-4d9d-b2e1-93947f7906b5",
                  "parentUUID": "2288f7c0-e934-4f0d-a9c2-23bf3d7ef49a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": " Should return one product with an incomplete entered product name ",
                  "fullTitle": " serach system  GET \"/search?q=\" Search for product(s)   Should return one product with an incomplete entered product name ",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app)\n\t.get(\n\t\t`/search?q=${encodeURIComponent(\n\t\t\t'Мистецтво говорити. Таємниці ефективного спілкування'\n\t\t)}`\n\t)\n\t.then(response => {\n\t\texpect(response.status).to.be.equal(200);\n\t\texpect(response.body.result).to.not.be.empty;\n\t\texpect(response.body.total).to.be.equal(1);\n\t});",
                  "err": {},
                  "uuid": "93afc0b5-9f38-4a7a-a555-9442cbebe0a3",
                  "parentUUID": "2288f7c0-e934-4f0d-a9c2-23bf3d7ef49a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3be9853f-874e-4b3c-b137-70f9572e0edc",
                "3620237c-d10b-4b97-8644-ef8a7ba2ddf2",
                "3b7ea676-7912-4d9d-b2e1-93947f7906b5",
                "93afc0b5-9f38-4a7a-a555-9442cbebe0a3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 21,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "5226e7b8-63af-41a4-ba7d-cab530e6eebc",
          "title": " section system",
          "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\section-test.js",
          "file": "\\test\\section-test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \" section system\"",
              "fullTitle": " section system \"before all\" hook in \" section system\"",
              "timedOut": false,
              "duration": 470,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mongoose\n\t.connect(process.env.TEST_CONNECTION_STRING)\n\t.catch(err => {\n\t\tconsole.log(`Failed to connect to database: ${err.message}`);\n\t});\n//#region add admin user to db and take token\nawait request(app).post('/signup').send(adminUser);\nawait mongoose.connection\n\t.collection('users')\n\t.updateOne(\n\t\t{ email: adminUser.email },\n\t\t{ $set: { role: 'admin' } }\n\t);\nconst userData = {\n\tlogin: adminUser.email,\n\tpassword: adminUser.password\n};\nuserToken += (await request(app).post('/login').send(userData))\n\t.body.token;\n//#endregion",
              "err": {},
              "uuid": "577f7cb5-dce0-43ab-a3ad-237b87814efa",
              "parentUUID": "5226e7b8-63af-41a4-ba7d-cab530e6eebc",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \" section system\"",
              "fullTitle": " section system \"after all\" hook in \" section system\"",
              "timedOut": false,
              "duration": 14,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mongoose.connection.collection('sections').deleteMany();\nawait mongoose.connection.collection('users').deleteMany();\nawait mongoose.connection.collection('carts').deleteMany();\nawait mongoose.connection.close();",
              "err": {},
              "uuid": "1cbf7b8a-89bd-48a5-8867-f78a0998fff0",
              "parentUUID": "5226e7b8-63af-41a4-ba7d-cab530e6eebc",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "ce8e48a0-0df2-49f5-9e67-f3b87ee0aa15",
              "title": " POST \"/section/\" Create new section ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\section-test.js",
              "file": "\\test\\section-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should add new section to database ",
                  "fullTitle": " section system  POST \"/section/\" Create new section   Should add new section to database ",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const section = {\n\tname: 'Художня література',\n\tkey: 'khudozhnia-literatura',\n\tproducts: [],\n\tsections: []\n};\nconst expectedFields = [\n\t'name',\n\t'key',\n\t'products',\n\t'_id',\n\t'sections',\n\t'createdAt',\n\t'updatedAt'\n];\nawait request(app)\n\t.post('/section/')\n\t.set('Authorization', userToken)\n\t.send(section)\n\t.then(response => {\n\t\texpect(response.status).to.equal(201);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body).to.include.keys(...expectedFields);\n\t\tsectionId = response.body._id;\n\t});",
                  "err": {},
                  "uuid": "c1e7c3f3-6762-41c2-9057-e531e9063927",
                  "parentUUID": "ce8e48a0-0df2-49f5-9e67-f3b87ee0aa15",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c1e7c3f3-6762-41c2-9057-e531e9063927"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 9,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "35dc4876-458f-4150-9ada-fce0eeac60a2",
              "title": " GET \"/section/\" Get all sections ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\section-test.js",
              "file": "\\test\\section-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return all sections  ",
                  "fullTitle": " section system  GET \"/section/\" Get all sections   Should return all sections  ",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app)\n\t.get('/section/')\n\t.set('Authorization', userToken)\n\t.then(response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body).to.be.an('array');\n\t});",
                  "err": {},
                  "uuid": "71f38852-2eeb-427a-b137-22838bd04e0c",
                  "parentUUID": "35dc4876-458f-4150-9ada-fce0eeac60a2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "71f38852-2eeb-427a-b137-22838bd04e0c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8e47ae94-dfef-43f2-b22f-d6dfd405468e",
              "title": " GET \"/section/:id\" Get one section ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\section-test.js",
              "file": "\\test\\section-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return one section by id ",
                  "fullTitle": " section system  GET \"/section/:id\" Get one section   Should return one section by id ",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expectedFields = ['name', 'key', '_id', 'sections'];\nawait request(app)\n\t.get(`/section/${sectionId}`)\n\t.set('Authorization', userToken)\n\t.then(response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body).to.include.keys(...expectedFields);\n\t});",
                  "err": {},
                  "uuid": "5d871f6a-2f05-4787-80f6-e5a9ca274b2b",
                  "parentUUID": "8e47ae94-dfef-43f2-b22f-d6dfd405468e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5d871f6a-2f05-4787-80f6-e5a9ca274b2b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e6d99d1b-7fdf-4643-aaaa-2164bcc6474f",
              "title": " PATCH \"/section/:id\" Update one existing section ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\section-test.js",
              "file": "\\test\\section-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return updated section ",
                  "fullTitle": " section system  PATCH \"/section/:id\" Update one existing section   Should return updated section ",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//#region adding the necessary objects to the database\nconst newSection = {\n\tname: 'Фантастика',\n\tkey: 'fantastic',\n\tproducts: [],\n\tsections: []\n};\nconst newSectionId = (\n\tawait mongoose.connection\n\t\t.collection('sections')\n\t\t.insertOne(newSection)\n).insertedId;\n//#endregion\nconst updatedSectionData = {\n\tsections: [newSectionId]\n};\nawait request(app)\n\t.patch(`/section/${sectionId}`)\n\t.set('Authorization', userToken)\n\t.send(updatedSectionData)\n\t.then(response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body.sections).to.include(\n\t\t\tnewSectionId.toString()\n\t\t);\n\t});",
                  "err": {},
                  "uuid": "25ba2038-a097-49f0-901c-6b3a2c914d2d",
                  "parentUUID": "e6d99d1b-7fdf-4643-aaaa-2164bcc6474f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "25ba2038-a097-49f0-901c-6b3a2c914d2d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 12,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "66674deb-ede5-4476-a274-7e6acec3bf52",
              "title": " GET \"/section/:id/products\" Get all section products ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\section-test.js",
              "file": "\\test\\section-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return all section products ",
                  "fullTitle": " section system  GET \"/section/:id/products\" Get all section products   Should return all section products ",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app)\n\t.get(`/section/${sectionId}/products`)\n\t.set('Authorization', userToken)\n\t.then(response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body.result).to.be.an('array');\n\t});",
                  "err": {},
                  "uuid": "f416bb55-2e97-4f1e-a007-43938c16aa83",
                  "parentUUID": "66674deb-ede5-4476-a274-7e6acec3bf52",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f416bb55-2e97-4f1e-a007-43938c16aa83"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 11,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "71765386-a414-474b-8771-990206174429",
              "title": " DELETE \"/section/:id\" Delete one section ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\section-test.js",
              "file": "\\test\\section-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should mark section as deleted via the \"deletedAt\" field, but not delete ",
                  "fullTitle": " section system  DELETE \"/section/:id\" Delete one section   Should mark section as deleted via the \"deletedAt\" field, but not delete ",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app)\n\t.delete(`/section/${sectionId}`)\n\t.set('Authorization', userToken)\n\t.then(async response => {\n\t\texpect(response.status).to.equal(204);\n\t\tconst section = await mongoose.connection\n\t\t\t.collection('sections')\n\t\t\t.findOne({ _id: new ObjectId(sectionId) });\n\t\texpect(section.deletedAt).not.be.null;\n\t});",
                  "err": {},
                  "uuid": "5b09027c-c376-46cc-98b2-b9b86144dd41",
                  "parentUUID": "71765386-a414-474b-8771-990206174429",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5b09027c-c376-46cc-98b2-b9b86144dd41"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 8,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f0c3c20b-6925-4216-ae55-645d23c5e77d",
          "title": " translator system ",
          "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\translator-test.js",
          "file": "\\test\\translator-test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \" translator system \"",
              "fullTitle": " translator system  \"before all\" hook in \" translator system \"",
              "timedOut": false,
              "duration": 504,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mongoose\n\t.connect(process.env.TEST_CONNECTION_STRING)\n\t.catch(err => {\n\t\tconsole.log(`Failed to connect to database: ${err.message}`);\n\t});\n//#region add admin user to db and take token\nawait request(app).post('/signup').send(adminUser);\nawait mongoose.connection\n\t.collection('users')\n\t.updateOne(\n\t\t{ email: adminUser.email },\n\t\t{ $set: { role: 'admin' } }\n\t);\nconst userData = {\n\tlogin: adminUser.email,\n\tpassword: adminUser.password\n};\nuserToken += (await request(app).post('/login').send(userData))\n\t.body.token;\n//#endregion",
              "err": {},
              "uuid": "12883cdb-b1bf-437f-8d8f-ea8ca2da40a3",
              "parentUUID": "f0c3c20b-6925-4216-ae55-645d23c5e77d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \" translator system \"",
              "fullTitle": " translator system  \"after all\" hook in \" translator system \"",
              "timedOut": false,
              "duration": 9,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mongoose.connection.collection('translators').deleteMany();\nawait mongoose.connection.collection('users').deleteMany();\nawait mongoose.connection.collection('carts').deleteMany();\nawait mongoose.connection.close();",
              "err": {},
              "uuid": "a6129671-727a-4fcf-bb91-81bef7829987",
              "parentUUID": "f0c3c20b-6925-4216-ae55-645d23c5e77d",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "387c336a-84f2-4297-919e-9ec747d95f2b",
              "title": " POST \"/translator/\" Create new translator ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\translator-test.js",
              "file": "\\test\\translator-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should create new translator in database ",
                  "fullTitle": " translator system   POST \"/translator/\" Create new translator   Should create new translator in database ",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const newTranslator = {\n\tfullName: 'Anna Petrova',\n\tbooks: []\n};\nconst expectedFields = [\n\t'fullName',\n\t'books',\n\t'_id',\n\t'createdAt',\n\t'updatedAt'\n];\nawait request(app)\n\t.post('/translator/')\n\t.set('Authorization', userToken)\n\t.send(newTranslator)\n\t.then(response => {\n\t\texpect(response.status).to.equal(201);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body).to.include.keys(...expectedFields);\n\t\ttranslatorId = response.body._id;\n\t});",
                  "err": {},
                  "uuid": "b1b7775b-b25a-4a99-a634-098b4c857cc0",
                  "parentUUID": "387c336a-84f2-4297-919e-9ec747d95f2b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b1b7775b-b25a-4a99-a634-098b4c857cc0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 9,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d83d88df-7551-4bdf-a5b8-6380e9227640",
              "title": " GET \"/translator/\" Get all translators ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\translator-test.js",
              "file": "\\test\\translator-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return all translators ",
                  "fullTitle": " translator system   GET \"/translator/\" Get all translators   Should return all translators ",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app)\n\t.get('/translator/')\n\t.set('Authorization', userToken)\n\t.then(response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body).to.be.an('array');\n\t});",
                  "err": {},
                  "uuid": "fb223435-0652-49aa-a192-183fd2044f56",
                  "parentUUID": "d83d88df-7551-4bdf-a5b8-6380e9227640",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fb223435-0652-49aa-a192-183fd2044f56"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0aee8687-9b5c-4e91-849e-aa3bfde4d415",
              "title": " GET \"/translator/:id\" Get one translator ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\translator-test.js",
              "file": "\\test\\translator-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return one translator by id ",
                  "fullTitle": " translator system   GET \"/translator/:id\" Get one translator   Should return one translator by id ",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expectedFields = [\n\t'fullName',\n\t'books',\n\t'_id',\n\t'createdAt',\n\t'updatedAt'\n];\nawait request(app)\n\t.get(`/translator/${translatorId}`)\n\t.set('Authorization', userToken)\n\t.then(response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body).to.include.keys(...expectedFields);\n\t});",
                  "err": {},
                  "uuid": "42b6a537-4d67-4c24-a935-74b3ec2ad09b",
                  "parentUUID": "0aee8687-9b5c-4e91-849e-aa3bfde4d415",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "42b6a537-4d67-4c24-a935-74b3ec2ad09b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "abdb6d33-326d-40e0-8931-516f4678a8df",
              "title": " PATCH \"/translator/:id\" Update one existing translator ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\translator-test.js",
              "file": "\\test\\translator-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return one translator with updated data ",
                  "fullTitle": " translator system   PATCH \"/translator/:id\" Update one existing translator   Should return one translator with updated data ",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const updatedTranslatorData = {\n\tfullName: 'Updated translator name'\n};\nawait request(app)\n\t.patch(`/translator/${translatorId}`)\n\t.set('Authorization', userToken)\n\t.send(updatedTranslatorData)\n\t.then(response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body.fullName).to.be.equal(\n\t\t\t'Updated translator name'\n\t\t);\n\t});",
                  "err": {},
                  "uuid": "2020c403-1833-4a4c-9028-9ab7b5fabcca",
                  "parentUUID": "abdb6d33-326d-40e0-8931-516f4678a8df",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2020c403-1833-4a4c-9028-9ab7b5fabcca"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 8,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a46d794f-a3a4-4670-9d2b-6c0fe9f200a9",
              "title": " DELETE \"/translator/:id\" Delete one translator ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\translator-test.js",
              "file": "\\test\\translator-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should mark translator as deleted via the \"deletedAt\" field, but not delete ",
                  "fullTitle": " translator system   DELETE \"/translator/:id\" Delete one translator   Should mark translator as deleted via the \"deletedAt\" field, but not delete ",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app)\n\t.delete(`/translator/${translatorId}`)\n\t.set('Authorization', userToken)\n\t.then(async response => {\n\t\texpect(response.status).to.be.equal(204);\n\t\tconst deletedTranslator = await mongoose.connection\n\t\t\t.collection('translators')\n\t\t\t.findOne({});\n\t\texpect(deletedTranslator.deletedAt).to.be.not.null;\n\t});",
                  "err": {},
                  "uuid": "5e9e3bba-87e3-404d-a5c6-4e645a4202b6",
                  "parentUUID": "a46d794f-a3a4-4670-9d2b-6c0fe9f200a9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5e9e3bba-87e3-404d-a5c6-4e645a4202b6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 12,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a56aee03-8e6d-4e18-83f7-b2e40aee498a",
          "title": "user system",
          "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\user-test.js",
          "file": "\\test\\user-test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"user system\"",
              "fullTitle": "user system \"before all\" hook in \"user system\"",
              "timedOut": false,
              "duration": 493,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mongoose\n\t.connect(process.env.TEST_CONNECTION_STRING)\n\t.catch(err => {\n\t\tconsole.log(`Failed to connect to database: ${err.message}`);\n\t});\n//#region add admin user to db and take token\nawait request(app).post('/signup').send(adminUser);\nawait mongoose.connection\n\t.collection('users')\n\t.updateOne(\n\t\t{ email: adminUser.email },\n\t\t{ $set: { role: 'admin' } }\n\t);\nconst userData = {\n\tlogin: adminUser.email,\n\tpassword: adminUser.password\n};\nuserToken += (await request(app).post('/login').send(userData))\n\t.body.token;\n//#endregion",
              "err": {},
              "uuid": "ec4c6155-a208-4ab2-870c-2d9e1803aa05",
              "parentUUID": "a56aee03-8e6d-4e18-83f7-b2e40aee498a",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"user system\"",
              "fullTitle": "user system \"after all\" hook in \"user system\"",
              "timedOut": false,
              "duration": 19,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mongoose.connection.collection('products').deleteMany();\nawait mongoose.connection.collection('producttypes').deleteMany();\nawait mongoose.connection.collection('sections').deleteMany();\nawait mongoose.connection.collection('users').deleteMany();\nawait mongoose.connection.collection('carts').deleteMany();\nawait mongoose.connection.close();",
              "err": {},
              "uuid": "40586325-83c2-40ca-94ce-a343103760bf",
              "parentUUID": "a56aee03-8e6d-4e18-83f7-b2e40aee498a",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "69a9f355-cff3-4580-87e2-315593b69cd9",
              "title": " GET \"/user/\" Get all users ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\user-test.js",
              "file": "\\test\\user-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return an array of users ",
                  "fullTitle": "user system  GET \"/user/\" Get all users   Should return an array of users ",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app)\n\t.get('/user/')\n\t.set('Authorization', userToken)\n\t.then(response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body).to.be.an('array');\n\t\tuserId = response.body[0]._id;\n\t});",
                  "err": {},
                  "uuid": "1c3d6106-d857-408f-aed3-df476d4f9148",
                  "parentUUID": "69a9f355-cff3-4580-87e2-315593b69cd9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1c3d6106-d857-408f-aed3-df476d4f9148"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 9,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fec9d8e7-678e-4915-ba8a-be5982ccacba",
              "title": " GET \"/user/:id\" Get one user ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\user-test.js",
              "file": "\\test\\user-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return user by id ",
                  "fullTitle": "user system  GET \"/user/:id\" Get one user   Should return user by id ",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expectedFields = [\n\t'_id',\n\t'firstName',\n\t'lastName',\n\t'phoneNumber',\n\t'email',\n\t'role',\n\t'reviews',\n\t'wishlist',\n\t'createdAt',\n\t'updatedAt',\n\t'cart'\n];\nawait request(app)\n\t.get(`/user/${userId}`)\n\t.set('Authorization', userToken)\n\t.then(response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body).to.include.keys(...expectedFields);\n\t});",
                  "err": {},
                  "uuid": "b2e7bb16-caf0-4b8b-bb66-0ba772e4942a",
                  "parentUUID": "fec9d8e7-678e-4915-ba8a-be5982ccacba",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b2e7bb16-caf0-4b8b-bb66-0ba772e4942a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 8,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "12bc8a47-20ed-4fd3-98a0-1f9fdb9aa736",
              "title": " PATCH \"/user/:id\" Update one existing user ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\user-test.js",
              "file": "\\test\\user-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return the user with updated data ",
                  "fullTitle": "user system  PATCH \"/user/:id\" Update one existing user   Should return the user with updated data ",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const newData = {\n\tfirstName: 'Артем',\n\tlastName: 'Желіковський'\n};\nawait request(app)\n\t.patch(`/user/${userId}`)\n\t.set('Authorization', userToken)\n\t.send(newData)\n\t.then(response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body.firstName).to.equal(newData.firstName);\n\t\texpect(response.body.lastName).to.equal(newData.lastName);\n\t});",
                  "err": {},
                  "uuid": "17c537cd-59d7-423a-8954-821c3d9eea0f",
                  "parentUUID": "12bc8a47-20ed-4fd3-98a0-1f9fdb9aa736",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "17c537cd-59d7-423a-8954-821c3d9eea0f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 9,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "23d18837-e408-4770-b493-a6c33f706bc7",
              "title": " DELETE \"/user/:id\" Delete one user ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\user-test.js",
              "file": "\\test\\user-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should mark the user as deleted via the \"deletedAt\" field, but not delete him ",
                  "fullTitle": "user system  DELETE \"/user/:id\" Delete one user   Should mark the user as deleted via the \"deletedAt\" field, but not delete him ",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const newUser = {\n\tfirstName: 'Oleg',\n\tlastName: 'Smirniv',\n\tphoneNumber: '380957846372',\n\temail: 'lahefi3700@devswp.com',\n\tpassword: '41424344',\n\trole: 'user'\n};\nconst userId = (\n\tawait mongoose.connection\n\t\t.collection('users')\n\t\t.insertOne(newUser)\n).insertedId.toString();\nawait request(app)\n\t.delete(`/user/${userId}`)\n\t.set('Authorization', userToken)\n\t.then(async () => {\n\t\tconst deletedUser = await mongoose.connection\n\t\t\t.collection('users')\n\t\t\t.findOne({ email: 'lahefi3700@devswp.com' });\n\t\texpect(deletedUser).to.include.keys('deletedAt');\n\t});",
                  "err": {},
                  "uuid": "6597da18-11d0-475e-8303-81e2d480c232",
                  "parentUUID": "23d18837-e408-4770-b493-a6c33f706bc7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6597da18-11d0-475e-8303-81e2d480c232"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 11,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8bdd6fcd-dd6d-4e26-83d5-f1918e12afdf",
              "title": " GET \"/user/account\" Get user account ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\user-test.js",
              "file": "\\test\\user-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return information about the authorized user ",
                  "fullTitle": "user system  GET \"/user/account\" Get user account   Should return information about the authorized user ",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expectedFields = [\n\t'_id',\n\t'firstName',\n\t'lastName',\n\t'phoneNumber',\n\t'email',\n\t'role',\n\t'reviews',\n\t'wishlist',\n\t'createdAt',\n\t'updatedAt',\n\t'cart'\n];\nawait request(app)\n\t.get(`/user/${userId}`)\n\t.set('Authorization', userToken)\n\t.then(response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body).to.include.keys(...expectedFields);\n\t});",
                  "err": {},
                  "uuid": "c9129103-fe9a-48f8-b89d-b15d3be17da8",
                  "parentUUID": "8bdd6fcd-dd6d-4e26-83d5-f1918e12afdf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c9129103-fe9a-48f8-b89d-b15d3be17da8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "464117f0-7dc6-452b-878f-c813ffe6f879",
              "title": " POST \"/user/wishlist/\" Add product to user's wishlist ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\user-test.js",
              "file": "\\test\\user-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should add product to wishlist ",
                  "fullTitle": "user system  POST \"/user/wishlist/\" Add product to user's wishlist   Should add product to wishlist ",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//#region adding the necessary objects to the database\nconst productType = {\n\tname: 'Книга',\n\tkey: 'book'\n};\nconst productTypeId = (\n\tawait mongoose.connection\n\t\t.collection('producttypes')\n\t\t.insertOne(productType)\n).insertedId;\nconst section = {\n\tname: 'Фантастика',\n\tkey: 'fantastic',\n\tproducts: [],\n\tsections: []\n};\nconst sectionId = (\n\tawait mongoose.connection\n\t\t.collection('sections')\n\t\t.insertOne(section)\n).insertedId;\nconst product = {\n\tname: 'Збірка українських поезій',\n\ttype: productTypeId,\n\tprice: 99.99,\n\tquantity: 10,\n\tdescription:\n\t\t'\"Збірка українських поезій\" - поетичний скарб, що втілює красу та духовність української літератури.',\n\timages: ['image1.png'],\n\tsections: [sectionId],\n\tmodel: 'Book'\n};\nproductId = (\n\tawait mongoose.connection\n\t\t.collection('products')\n\t\t.insertOne(product)\n).insertedId;\n//#endregion\nconst requestBody = {\n\tproduct: productId\n};\nawait request(app)\n\t.post('/user/wishlist')\n\t.set('Authorization', userToken)\n\t.send(requestBody)\n\t.then(async response => {\n\t\texpect(response.status).to.equal(204);\n\t\tconst userWishlist = (\n\t\t\tawait mongoose.connection.collection('users').findOne()\n\t\t).wishlist;\n\t\texpect(\n\t\t\tuserWishlist.map(obj => obj.toString())\n\t\t).to.be.include(productId.toString());\n\t});",
                  "err": {},
                  "uuid": "29724bea-2236-43b4-bb19-957a818b8a56",
                  "parentUUID": "464117f0-7dc6-452b-878f-c813ffe6f879",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "29724bea-2236-43b4-bb19-957a818b8a56"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 12,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "96921d7d-00ba-48a7-9ce5-80d739dc9e0a",
              "title": " DELETE \"/user/wishlist/\" Remove product from user's wishlist ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\user-test.js",
              "file": "\\test\\user-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Must remove product from wishlist ",
                  "fullTitle": "user system  DELETE \"/user/wishlist/\" Remove product from user's wishlist   Must remove product from wishlist ",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const requestBody = {\n\tproduct: productId\n};\nawait request(app)\n\t.delete('/user/wishlist/')\n\t.set('Authorization', userToken)\n\t.send(requestBody)\n\t.then(async response => {\n\t\texpect(response.status).to.equal(204);\n\t\tconst userWishlist = (\n\t\t\tawait mongoose.connection.collection('users').findOne()\n\t\t).wishlist;\n\t\texpect(userWishlist).to.be.empty;\n\t});",
                  "err": {},
                  "uuid": "c391852b-a6f1-4aa6-b336-fd3f0ef05450",
                  "parentUUID": "96921d7d-00ba-48a7-9ce5-80d739dc9e0a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c391852b-a6f1-4aa6-b336-fd3f0ef05450"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 8,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ba6f4134-71e5-409b-973a-6e8d1b7c4548",
              "title": " GET \"/user/orders/\" Get all orders made by user ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\user-test.js",
              "file": "\\test\\user-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return an array of orders ",
                  "fullTitle": "user system  GET \"/user/orders/\" Get all orders made by user   Should return an array of orders ",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app)\n\t.get(`/user/orders/`)\n\t.set('Authorization', userToken)\n\t.then(response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body).to.be.an('array');\n\t});",
                  "err": {},
                  "uuid": "26b064e2-a7db-4987-b5f1-86346eaa1c25",
                  "parentUUID": "ba6f4134-71e5-409b-973a-6e8d1b7c4548",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "26b064e2-a7db-4987-b5f1-86346eaa1c25"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}