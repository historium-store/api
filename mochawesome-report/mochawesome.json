{
  "stats": {
    "suites": 107,
    "tests": 90,
    "passes": 90,
    "pending": 0,
    "failures": 0,
    "start": "2023-07-16T10:33:26.106Z",
    "end": "2023-07-16T10:33:43.677Z",
    "duration": 17571,
    "testsRegistered": 90,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "ae8143e0-b672-4e63-92aa-c6a42c615faf",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "6c1bfe88-3fc5-41a5-ae1a-4aa8178571e5",
          "title": "auth system",
          "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\auth-test.js",
          "file": "\\test\\auth-test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"auth system\"",
              "fullTitle": "auth system \"before all\" hook in \"auth system\"",
              "timedOut": false,
              "duration": 28,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mongoose\n\t.connect(process.env.TEST_CONNECTION_STRING)\n\t.catch(err => {\n\t\tconsole.log(`Failed to connect to database: ${err.message}`);\n\t});",
              "err": {},
              "uuid": "ac1d353d-65c3-4a98-b1cf-b7ae3bad3201",
              "parentUUID": "6c1bfe88-3fc5-41a5-ae1a-4aa8178571e5",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"auth system\"",
              "fullTitle": "auth system \"after all\" hook in \"auth system\"",
              "timedOut": false,
              "duration": 14,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mongoose.connection.collection('users').deleteMany();\nawait mongoose.connection.collection('carts').deleteMany();\nawait mongoose.connection.close();",
              "err": {},
              "uuid": "7454c9ef-48a0-4a58-8b3d-9c5b165ec5e4",
              "parentUUID": "6c1bfe88-3fc5-41a5-ae1a-4aa8178571e5",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "33be64df-2d0c-4c33-8886-ebe93fb78365",
              "title": " \"/signup\" Create new user ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\auth-test.js",
              "file": "\\test\\auth-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "The data should be validated and the body of the created user should be returned",
                  "fullTitle": "auth system  \"/signup\" Create new user  The data should be validated and the body of the created user should be returned",
                  "timedOut": false,
                  "duration": 320,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expectedFields = [\n\t'firstName',\n\t'lastName',\n\t'phoneNumber',\n\t'email',\n\t'role',\n\t'reviews',\n\t'_id',\n\t'createdAt',\n\t'updatedAt',\n\t'history',\n\t'wishlist',\n\t'waitlist'\n];\nawait request(app)\n\t.post('/signup')\n\t.send(adminUser)\n\t.then(async response => {\n\t\texpect(response.status).to.equal(201);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body).to.include.keys(...expectedFields);\n\t});",
                  "err": {},
                  "uuid": "cf6a5ddf-8fa7-4e98-b25c-6d724478ea3a",
                  "parentUUID": "33be64df-2d0c-4c33-8886-ebe93fb78365",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cf6a5ddf-8fa7-4e98-b25c-6d724478ea3a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 320,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6980da33-a0e3-4219-9228-d486449f5d37",
              "title": " \"/login\" Login existing user ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\auth-test.js",
              "file": "\\test\\auth-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "The password and login are correct, the token is returned",
                  "fullTitle": "auth system  \"/login\" Login existing user  The password and login are correct, the token is returned",
                  "timedOut": false,
                  "duration": 251,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputData = {\n\tlogin: adminUser.email,\n\tpassword: adminUser.password\n};\nawait request(app)\n\t.post('/login')\n\t.send(inputData)\n\t.then(response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body).to.include.keys('token');\n\t});",
                  "err": {},
                  "uuid": "3bb0d681-3930-4640-b6c7-a49aa67191b0",
                  "parentUUID": "6980da33-a0e3-4219-9228-d486449f5d37",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3bb0d681-3930-4640-b6c7-a49aa67191b0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 251,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "62cf29b9-2024-49d0-acee-23ad71d8e210",
          "title": " author system ",
          "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\author-test.js",
          "file": "\\test\\author-test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \" author system \"",
              "fullTitle": " author system  \"before all\" hook in \" author system \"",
              "timedOut": false,
              "duration": 529,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mongoose\n\t.connect(process.env.TEST_CONNECTION_STRING)\n\t.catch(err => {\n\t\tconsole.log(`Failed to connect to database: ${err.message}`);\n\t});\n//#region add admin user to db and take token\nawait request(app).post('/signup').send(adminUser);\nawait mongoose.connection\n\t.collection('users')\n\t.updateOne(\n\t\t{ email: adminUser.email },\n\t\t{ $set: { role: 'admin' } }\n\t);\nconst userData = {\n\tlogin: adminUser.email,\n\tpassword: adminUser.password\n};\nuserToken += (await request(app).post('/login').send(userData))\n\t.body.token;\n//#endregion",
              "err": {},
              "uuid": "703a4691-210c-4186-9f08-e4df311ab473",
              "parentUUID": "62cf29b9-2024-49d0-acee-23ad71d8e210",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \" author system \"",
              "fullTitle": " author system  \"after all\" hook in \" author system \"",
              "timedOut": false,
              "duration": 11,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mongoose.connection.collection('authors').deleteMany();\nawait mongoose.connection.collection('users').deleteMany();\nawait mongoose.connection.collection('carts').deleteMany();\nawait mongoose.connection.close();",
              "err": {},
              "uuid": "a9c7c5e1-21c8-405e-ab2e-fbf78f316407",
              "parentUUID": "62cf29b9-2024-49d0-acee-23ad71d8e210",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "bb2af094-e1ac-49f6-af28-73ef6fcb896a",
              "title": " POST \"/author/\" Create new author ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\author-test.js",
              "file": "\\test\\author-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Shoud create new author in database ",
                  "fullTitle": " author system   POST \"/author/\" Create new author   Shoud create new author in database ",
                  "timedOut": false,
                  "duration": 14,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const newAuthor = {\n\tfullName: 'John Smith',\n\tbiography:\n\t\t'Lorem ipsum dolor sit amet, consectetur adipiscing elit.',\n\tbooks: [],\n\tpictures: ['picture1.jpg', 'picture2.jpg']\n};\nconst expectedFields = [\n\t'fullName',\n\t'biography',\n\t'books',\n\t'_id',\n\t'pictures',\n\t'createdAt',\n\t'updatedAt'\n];\nawait request(app)\n\t.post('/author/')\n\t.set('Authorization', userToken)\n\t.send(newAuthor)\n\t.then(response => {\n\t\texpect(response.status).to.equal(201);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body).to.include.keys(...expectedFields);\n\t\tauthorId = response.body._id;\n\t});",
                  "err": {},
                  "uuid": "e4ff4bb4-ebcd-4f32-9c81-e3893a81f9cc",
                  "parentUUID": "bb2af094-e1ac-49f6-af28-73ef6fcb896a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e4ff4bb4-ebcd-4f32-9c81-e3893a81f9cc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 14,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "36df982a-4870-4599-8e3c-488b01ff4672",
              "title": " GET \"/author/\" Get all authors ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\author-test.js",
              "file": "\\test\\author-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return all authors ",
                  "fullTitle": " author system   GET \"/author/\" Get all authors   Should return all authors ",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app)\n\t.get('/author/')\n\t.set('Authorization', userToken)\n\t.then(response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body).to.be.an('array');\n\t});",
                  "err": {},
                  "uuid": "a1fb4120-26d5-460a-b8a9-b27115f41630",
                  "parentUUID": "36df982a-4870-4599-8e3c-488b01ff4672",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a1fb4120-26d5-460a-b8a9-b27115f41630"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 8,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4ee6a59e-33f5-4e47-82d2-f55e8e5f2acb",
              "title": " GET \"/author/:id\" Get one author ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\author-test.js",
              "file": "\\test\\author-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return one author by id ",
                  "fullTitle": " author system   GET \"/author/:id\" Get one author   Should return one author by id ",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expectedFields = [\n\t'fullName',\n\t'biography',\n\t'books',\n\t'_id',\n\t'pictures',\n\t'createdAt',\n\t'updatedAt'\n];\nawait request(app)\n\t.get(`/author/${authorId}`)\n\t.set('Authorization', userToken)\n\t.then(response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body).to.include.keys(...expectedFields);\n\t});",
                  "err": {},
                  "uuid": "a77603d0-25a4-4551-826d-8fb924062a30",
                  "parentUUID": "4ee6a59e-33f5-4e47-82d2-f55e8e5f2acb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a77603d0-25a4-4551-826d-8fb924062a30"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 9,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "bcec0358-ea47-4799-b639-d0e00ebabf21",
              "title": " PATCH \"/author/:id\" Update one existing author ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\author-test.js",
              "file": "\\test\\author-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return one author with updated data ",
                  "fullTitle": " author system   PATCH \"/author/:id\" Update one existing author   Should return one author with updated data ",
                  "timedOut": false,
                  "duration": 17,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const updatedAuthorData = {\n\tfullName: \"Ім'ян Прізвиськов\",\n\tpictures: ['url-to-new-picture', 'url-to-another-new-picture']\n};\nawait request(app)\n\t.patch(`/author/${authorId}`)\n\t.set('Authorization', userToken)\n\t.send(updatedAuthorData)\n\t.then(response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body.fullName).to.equal(\n\t\t\t\"Ім'ян Прізвиськов\"\n\t\t);\n\t\texpect(response.body.pictures).to.includes(\n\t\t\t'url-to-new-picture',\n\t\t\t'url-to-another-new-picture'\n\t\t);\n\t});",
                  "err": {},
                  "uuid": "ff2748a1-5963-4d43-ab37-8cd391040f92",
                  "parentUUID": "bcec0358-ea47-4799-b639-d0e00ebabf21",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ff2748a1-5963-4d43-ab37-8cd391040f92"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 17,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "df5219e6-e7ba-464f-a2d4-e6c88bbee5df",
              "title": " DELETE \"/author/:id\" Delete one author ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\author-test.js",
              "file": "\\test\\author-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should mark author as deleted via the \"deletedAt\" field, but not delete. ",
                  "fullTitle": " author system   DELETE \"/author/:id\" Delete one author   Should mark author as deleted via the \"deletedAt\" field, but not delete. ",
                  "timedOut": false,
                  "duration": 16,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app)\n\t.delete(`/author/${authorId}`)\n\t.set('Authorization', userToken)\n\t.then(async response => {\n\t\texpect(response.status).to.be.equal(204);\n\t\tconst author = await mongoose.connection\n\t\t\t.collection('authors')\n\t\t\t.findOne({});\n\t\texpect(author.deletedAt).to.not.be.null;\n\t});",
                  "err": {},
                  "uuid": "7c3d5944-0c12-4171-a2cb-9255e077c403",
                  "parentUUID": "df5219e6-e7ba-464f-a2d4-e6c88bbee5df",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7c3d5944-0c12-4171-a2cb-9255e077c403"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 16,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "03ff69f2-a733-4fb9-8567-6115a91392e6",
          "title": " banner system ",
          "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\banner-test.js",
          "file": "\\test\\banner-test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \" banner system \"",
              "fullTitle": " banner system  \"before all\" hook in \" banner system \"",
              "timedOut": false,
              "duration": 4,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mongoose\n\t.connect(process.env.TEST_CONNECTION_STRING)\n\t.catch(err => {\n\t\tconsole.log(`Failed to connect to database: ${err.message}`);\n\t});",
              "err": {},
              "uuid": "256a8864-a72c-4b53-a3d3-1ba3cc0d5f5d",
              "parentUUID": "03ff69f2-a733-4fb9-8567-6115a91392e6",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \" banner system \"",
              "fullTitle": " banner system  \"before each\" hook in \" banner system \"",
              "timedOut": false,
              "duration": 6,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const userData = {\n\tlogin: 'dobriy.edu@gmail.com',\n\tpassword: '41424344'\n};\nuserToken += (await request(app).post('/login').send(userData))\n\t.body.token;",
              "err": {},
              "uuid": "3d304ed2-9dcb-4e48-8cbc-85229ded2113",
              "parentUUID": "03ff69f2-a733-4fb9-8567-6115a91392e6",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \" banner system \"",
              "fullTitle": " banner system  \"after all\" hook in \" banner system \"",
              "timedOut": false,
              "duration": 6,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mongoose.connection.collection('banners').deleteMany();\nawait mongoose.connection.close();",
              "err": {},
              "uuid": "f3a723d8-fee6-47a9-9063-1a04b841a0cf",
              "parentUUID": "03ff69f2-a733-4fb9-8567-6115a91392e6",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook in \" banner system \"",
              "fullTitle": " banner system  \"after each\" hook in \" banner system \"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "userToken = 'Bearer ';",
              "err": {},
              "uuid": "955b2364-709a-4e04-a5f1-d68b184fed50",
              "parentUUID": "03ff69f2-a733-4fb9-8567-6115a91392e6",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "c7172303-3bdf-46d7-b62b-5c88ad39b867",
              "title": " \"/banner/\" POST request ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\banner-test.js",
              "file": "\\test\\banner-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " the banner data is correct; the new banner object is returned ",
                  "fullTitle": " banner system   \"/banner/\" POST request   the banner data is correct; the new banner object is returned ",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "743b6df1-8664-4064-a624-21db9cea4a02",
                  "parentUUID": "c7172303-3bdf-46d7-b62b-5c88ad39b867",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "743b6df1-8664-4064-a624-21db9cea4a02"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b27e6323-6a97-46a0-8e1c-7e7f355d41d3",
              "title": " \"/banner/\" GET request ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\banner-test.js",
              "file": "\\test\\banner-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " should return an array of banners ",
                  "fullTitle": " banner system   \"/banner/\" GET request   should return an array of banners ",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "5f69ae00-123a-4fa9-88cf-2226bb5b7805",
                  "parentUUID": "b27e6323-6a97-46a0-8e1c-7e7f355d41d3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5f69ae00-123a-4fa9-88cf-2226bb5b7805"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e7c87f7d-2396-4e04-864f-36212877b981",
              "title": " \"/banner/:id\" GET request ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\banner-test.js",
              "file": "\\test\\banner-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " should return banner object",
                  "fullTitle": " banner system   \"/banner/:id\" GET request   should return banner object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "082ae827-0769-44bc-8f8c-eaa91ea45d94",
                  "parentUUID": "e7c87f7d-2396-4e04-864f-36212877b981",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "082ae827-0769-44bc-8f8c-eaa91ea45d94"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "92495a4a-4c15-4e26-9234-46581e59d925",
              "title": " \"/banner/:id\" PATCH request ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\banner-test.js",
              "file": "\\test\\banner-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " correct values are sent; the changed banner object is returned ",
                  "fullTitle": " banner system   \"/banner/:id\" PATCH request   correct values are sent; the changed banner object is returned ",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "517d3284-926b-4a97-8eab-05c08269f00f",
                  "parentUUID": "92495a4a-4c15-4e26-9234-46581e59d925",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "517d3284-926b-4a97-8eab-05c08269f00f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "897e5216-f109-41eb-8500-e68d5fc4c6d4",
              "title": " \"/banner/:id\" DELETE request ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\banner-test.js",
              "file": "\\test\\banner-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " should set the \"deletedAt\" field. the object must be removed from the database ",
                  "fullTitle": " banner system   \"/banner/:id\" DELETE request   should set the \"deletedAt\" field. the object must be removed from the database ",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "d0ced1be-ac6d-4031-b892-2438d2f8111d",
                  "parentUUID": "897e5216-f109-41eb-8500-e68d5fc4c6d4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d0ced1be-ac6d-4031-b892-2438d2f8111d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f2257e2a-b094-4c1f-bc83-9150ba9b4857",
          "title": " book-series system ",
          "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\book-series-test.js",
          "file": "\\test\\book-series-test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \" book-series system \"",
              "fullTitle": " book-series system  \"before all\" hook in \" book-series system \"",
              "timedOut": false,
              "duration": 507,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mongoose\n\t.connect(process.env.TEST_CONNECTION_STRING)\n\t.catch(err => {\n\t\tconsole.log(`Failed to connect to database: ${err.message}`);\n\t});\n//#region add admin user to db and take token\nawait request(app).post('/signup').send(adminUser);\nawait mongoose.connection\n\t.collection('users')\n\t.updateOne(\n\t\t{ email: adminUser.email },\n\t\t{ $set: { role: 'admin' } }\n\t);\nconst userData = {\n\tlogin: adminUser.email,\n\tpassword: adminUser.password\n};\nuserToken += (await request(app).post('/login').send(userData))\n\t.body.token;\n//#endregion",
              "err": {},
              "uuid": "16c7abc5-b5dc-458f-971c-a50a200a49a7",
              "parentUUID": "f2257e2a-b094-4c1f-bc83-9150ba9b4857",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \" book-series system \"",
              "fullTitle": " book-series system  \"after all\" hook in \" book-series system \"",
              "timedOut": false,
              "duration": 15,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mongoose.connection.collection('bookseries').deleteMany();\nawait mongoose.connection.collection('publishers').deleteMany();\nawait mongoose.connection.collection('users').deleteMany();\nawait mongoose.connection.collection('carts').deleteMany();\nawait mongoose.connection.close();",
              "err": {},
              "uuid": "790fa1db-3f7c-41bc-97ec-a803baa7d68b",
              "parentUUID": "f2257e2a-b094-4c1f-bc83-9150ba9b4857",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "6795b203-e0c8-4923-8e6e-3fe400138232",
              "title": " POST \"/book-series/\" Create new book series ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\book-series-test.js",
              "file": "\\test\\book-series-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should create new book series in database ",
                  "fullTitle": " book-series system   POST \"/book-series/\" Create new book series   Should create new book series in database ",
                  "timedOut": false,
                  "duration": 23,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//#region adding the necessary objects to the database\nconst Publisher = {\n\tname: 'Новий Вік',\n\tbooks: [],\n\tbookSeries: [],\n\tdescription:\n\t\t'Видавництво, спеціалізуючеся на публікації літератури різних жанрів',\n\tlogo: 'https://example.com/logo.png'\n};\nconst publisherId = (\n\tawait request(app)\n\t\t.post('/publisher/')\n\t\t.set('Authorization', userToken)\n\t\t.send(Publisher)\n).body._id;\n//#endregion\nconst newBookSeries = {\n\tname: 'Українська класика',\n\tpublisher: publisherId,\n\tbooks: []\n};\nconst expectedFields = [\n\t'name',\n\t'publisher',\n\t'books',\n\t'_id',\n\t'createdAt',\n\t'updatedAt'\n];\nawait request(app)\n\t.post('/book-series/')\n\t.set('Authorization', userToken)\n\t.send(newBookSeries)\n\t.then(response => {\n\t\texpect(response.status).to.equal(201);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body).to.include.keys(...expectedFields);\n\t\tbookSeriesId = response.body._id;\n\t});",
                  "err": {},
                  "uuid": "aee9ebb2-dfdc-4502-80ca-204df82773b3",
                  "parentUUID": "6795b203-e0c8-4923-8e6e-3fe400138232",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "aee9ebb2-dfdc-4502-80ca-204df82773b3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 23,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a14f9d5e-889c-4e9e-8878-572ee1d18875",
              "title": " GET \"/book-series/\" Get all book series ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\book-series-test.js",
              "file": "\\test\\book-series-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return all book series ",
                  "fullTitle": " book-series system   GET \"/book-series/\" Get all book series   Should return all book series ",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app)\n\t.get('/book-series/')\n\t.set('Authorization', userToken)\n\t.then(response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body).to.be.an('array');\n\t});",
                  "err": {},
                  "uuid": "86748cc2-ced3-4c9b-8199-8232c72149d0",
                  "parentUUID": "a14f9d5e-889c-4e9e-8878-572ee1d18875",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "86748cc2-ced3-4c9b-8199-8232c72149d0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "917a007c-9eb1-42e5-b5e3-63450699726f",
              "title": " GET \"/book-series/:id\" Get one book series ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\book-series-test.js",
              "file": "\\test\\book-series-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return one book series by id ",
                  "fullTitle": " book-series system   GET \"/book-series/:id\" Get one book series   Should return one book series by id ",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expectedFields = [\n\t'name',\n\t'publisher',\n\t'books',\n\t'_id',\n\t'createdAt',\n\t'updatedAt'\n];\nawait request(app)\n\t.get(`/book-series/${bookSeriesId}`)\n\t.set('Authorization', userToken)\n\t.then(response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body).to.include.keys(...expectedFields);\n\t});",
                  "err": {},
                  "uuid": "a72f0c45-2204-4cc5-aebe-5a0edfed5831",
                  "parentUUID": "917a007c-9eb1-42e5-b5e3-63450699726f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a72f0c45-2204-4cc5-aebe-5a0edfed5831"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b7c3a11d-7b31-4930-a71a-19dc1632e0f4",
              "title": " PATCH \"/book-series/:id\" Update one existing book series ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\book-series-test.js",
              "file": "\\test\\book-series-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return one book series with updated data ",
                  "fullTitle": " book-series system   PATCH \"/book-series/:id\" Update one existing book series   Should return one book series with updated data ",
                  "timedOut": false,
                  "duration": 16,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const updatedBookSeries = {\n\tname: 'Українська класика *updated'\n};\nawait request(app)\n\t.patch(`/book-series/${bookSeriesId}`)\n\t.set('Authorization', userToken)\n\t.send(updatedBookSeries)\n\t.then(response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body.name).to.equal(\n\t\t\t'Українська класика *updated'\n\t\t);\n\t});",
                  "err": {},
                  "uuid": "bf197e31-921d-456b-8dda-d3cbf609072c",
                  "parentUUID": "b7c3a11d-7b31-4930-a71a-19dc1632e0f4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bf197e31-921d-456b-8dda-d3cbf609072c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 16,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "731a1912-db44-4cd7-a937-dff317603bba",
              "title": " DELETE \"/book-series/:id\" Delete one book series ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\book-series-test.js",
              "file": "\\test\\book-series-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should mark book series as deleted via the \"deletedAt\" field, but not delete ",
                  "fullTitle": " book-series system   DELETE \"/book-series/:id\" Delete one book series   Should mark book series as deleted via the \"deletedAt\" field, but not delete ",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app)\n\t.delete(`/book-series/${bookSeriesId}`)\n\t.set('Authorization', userToken)\n\t.then(async response => {\n\t\texpect(response.status).to.be.equal(204);\n\t\tconst deletedBookSeries = await mongoose.connection\n\t\t\t.collection('bookseries')\n\t\t\t.findOne({});\n\t\texpect(deletedBookSeries.deletedAt).to.not.be.null;\n\t\tconst publisher = await mongoose.connection\n\t\t\t.collection('publishers')\n\t\t\t.findOne({});\n\t\texpect(publisher.bookSeries).to.be.empty;\n\t});",
                  "err": {},
                  "uuid": "10f1a2e9-1cb7-4147-899f-2f111bdc9a4c",
                  "parentUUID": "731a1912-db44-4cd7-a937-dff317603bba",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "10f1a2e9-1cb7-4147-899f-2f111bdc9a4c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 13,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e9d1de85-d48d-44d0-a246-80b3b8b0278a",
          "title": " boook system ",
          "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\book-test.js",
          "file": "\\test\\book-test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \" boook system \"",
              "fullTitle": " boook system  \"before all\" hook in \" boook system \"",
              "timedOut": false,
              "duration": 506,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mongoose\n\t.connect(process.env.TEST_CONNECTION_STRING)\n\t.catch(err => {\n\t\tconsole.log(`Failed to connect to database: ${err.message}`);\n\t});\n//#region add admin user to db and take token\nawait request(app).post('/signup').send(adminUser);\nawait mongoose.connection\n\t.collection('users')\n\t.updateOne(\n\t\t{ email: adminUser.email },\n\t\t{ $set: { role: 'admin' } }\n\t);\nconst userData = {\n\tlogin: adminUser.email,\n\tpassword: adminUser.password\n};\nuserToken += (await request(app).post('/login').send(userData))\n\t.body.token;\n//#endregion",
              "err": {},
              "uuid": "8661470a-e4d4-49c8-8257-43364e166c11",
              "parentUUID": "e9d1de85-d48d-44d0-a246-80b3b8b0278a",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \" boook system \"",
              "fullTitle": " boook system  \"after all\" hook in \" boook system \"",
              "timedOut": false,
              "duration": 15,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mongoose.connection.collection('books').deleteMany();\nawait mongoose.connection.collection('bookseries').deleteMany();\nawait mongoose.connection.collection('authors').deleteMany();\nawait mongoose.connection.collection('compilers').deleteMany();\nawait mongoose.connection.collection('editors').deleteMany();\nawait mongoose.connection.collection('illustrators').deleteMany();\nawait mongoose.connection.collection('products').deleteMany();\nawait mongoose.connection.collection('producttypes').deleteMany();\nawait mongoose.connection.collection('publishers').deleteMany();\nawait mongoose.connection.collection('sections').deleteMany();\nawait mongoose.connection.collection('translators').deleteMany();\nawait mongoose.connection.collection('users').deleteMany();\nawait mongoose.connection.collection('carts').deleteMany();\nawait mongoose.connection.close();",
              "err": {},
              "uuid": "2077be42-42ee-426a-a93d-de7db1610afd",
              "parentUUID": "e9d1de85-d48d-44d0-a246-80b3b8b0278a",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "99201aff-ed45-4f2c-b081-8aa40e3ea2a4",
              "title": " POST \"/book/\" Create new book ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\book-test.js",
              "file": "\\test\\book-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should create new book to database ",
                  "fullTitle": " boook system   POST \"/book/\" Create new book   Should create new book to database ",
                  "timedOut": false,
                  "duration": 76,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//#region adding the necessary objects to the database\nconst productType = {\n\tname: 'Книга',\n\tkey: 'book'\n};\nconst productTypeId = (\n\tawait mongoose.connection\n\t\t.collection('producttypes')\n\t\t.insertOne(productType)\n).insertedId;\nconst section = {\n\tname: 'Комікси і графічні романи',\n\tkey: 'Komiksy i hrafichni romany',\n\tproducts: [],\n\tsections: []\n};\nconst sectionId = (\n\tawait mongoose.connection\n\t\t.collection('sections')\n\t\t.insertOne(section)\n).insertedId;\nconst publisher = {\n\tname: 'Новий Вік',\n\tbooks: [],\n\tbookSeries: [],\n\tdescription:\n\t\t'Видавництво, спеціалізуючеся на публікації літератури різних жанрів',\n\tlogo: 'https://example.com/logo.png'\n};\nconst publisherId = (\n\tawait mongoose.connection\n\t\t.collection('publishers')\n\t\t.insertOne(publisher)\n).insertedId;\nconst author = {\n\tfullName: 'Іван Сидоренко',\n\tbiography: 'Текст біографії автора на українській мові.',\n\tbooks: [],\n\tpictures: ['picture1.jpg', 'picture2.jpg']\n};\nconst authorId = (\n\tawait mongoose.connection\n\t\t.collection('authors')\n\t\t.insertOne(author)\n).insertedId;\nconst authorName = (\n\tawait mongoose.connection.collection('authors').findOne({})\n).fullName;\nconst compiler = {\n\tfullName: 'Іван Бойко',\n\tbooks: []\n};\nconst compilerId = (\n\tawait mongoose.connection\n\t\t.collection('compilers')\n\t\t.insertOne(compiler)\n).insertedId;\nconst translator = {\n\tfullName: 'Анна Мельник',\n\tbooks: []\n};\nconst translatorId = (\n\tawait mongoose.connection\n\t\t.collection('translators')\n\t\t.insertOne(translator)\n).insertedId;\nconst illustrator = {\n\tfullName: 'Ірина Левченко',\n\tbooks: []\n};\nconst illustratorId = (\n\tawait mongoose.connection\n\t\t.collection('illustrators')\n\t\t.insertOne(illustrator)\n).insertedId;\nconst editor = {\n\tfullName: 'Юлія Григоренко',\n\tbooks: []\n};\nconst editorId = (\n\tawait mongoose.connection\n\t\t.collection('editors')\n\t\t.insertOne(editor)\n).insertedId;\nconst bookSeries = {\n\tname: 'Українська класика',\n\tpublisher: publisherId,\n\tbooks: []\n};\nconst bookSeriesId = (\n\tawait mongoose.connection\n\t\t.collection('bookseries')\n\t\t.insertOne(bookSeries)\n).insertedId;\nconst product = {\n\tname: 'Збірка українських поезій',\n\ttype: productTypeId,\n\tprice: 99,\n\tquantity: 10,\n\tdescription:\n\t\t'\"Збірка українських поезій\" - поетичний скарб, що втілює красу та духовність української літератури.',\n\timages: ['image1.png'],\n\tsections: [sectionId],\n\tcreators: [authorName]\n};\nconst productId = (\n\tawait request(app)\n\t\t.post('/product/')\n\t\t.set('Authorization', userToken)\n\t\t.send(product)\n).body._id;\n//#endregion\nconst expectedFields = [\n\t'product',\n\t'type',\n\t'publisher',\n\t'languages',\n\t'publishedIn',\n\t'authors',\n\t'compilers',\n\t'translators',\n\t'illustrators',\n\t'editors',\n\t'series',\n\t'copies',\n\t'isbns',\n\t'firstPublishedIn',\n\t'originalName',\n\t'font',\n\t'format',\n\t'pages',\n\t'weight',\n\t'bindingType',\n\t'paperType',\n\t'illustrationsType',\n\t'literaturePeriod',\n\t'literatureCountry',\n\t'foreignLiterature',\n\t'timePeriod',\n\t'suitableAge',\n\t'packaging',\n\t'occasion',\n\t'style',\n\t'suitableFor'\n];\nconst newBook = {\n\tproduct: productId,\n\ttype: 'Паперова',\n\tpublisher: publisherId,\n\tlanguages: ['Українська'],\n\tpublishedIn: '1980',\n\tauthors: [authorId],\n\tcompilers: [compilerId],\n\ttranslators: [translatorId],\n\tillustrators: [illustratorId],\n\teditors: [editorId],\n\tseries: [bookSeriesId],\n\tcopies: 100,\n\tisbns: ['978-3-16-148410-0'],\n\tfirstPublishedIn: '1981',\n\toriginalName: 'Збірка українських поезій',\n\tfont: 'Arial',\n\tformat: '135х205 мм',\n\tpages: 180,\n\tweight: 300,\n\tbindingType: 'Пришивна палітурка',\n\tpaperType: 'Глянцевий',\n\tillustrationsType: ['Повнокольоровий'],\n\tliteraturePeriod: ['Постмодернізм'],\n\tliteratureCountry: ['Україна'],\n\tforeignLiterature: false,\n\ttimePeriod: ['1980-1990'],\n\tsuitableAge: ['12+'],\n\tpackaging: 'У коробці',\n\toccasion: ['Без приводу'],\n\tstyle: ['Сучасна поезія'],\n\tsuitableFor: ['Дорослих']\n};\nawait request(app)\n\t.post('/book/')\n\t.set('Authorization', userToken)\n\t.send(newBook)\n\t.then(async response => {\n\t\texpect(response.status).to.equal(201);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body).to.include.keys(...expectedFields);\n\t\tbookId = response.body._id;\n\t\t//#region check data integrity\n\t\tawait mongoose.connection\n\t\t\t.collection('publishers')\n\t\t\t.findOne({})\n\t\t\t.then(result => {\n\t\t\t\texpect(\n\t\t\t\t\tresult.books.map(id => id.toString())\n\t\t\t\t).to.include(bookId);\n\t\t\t});\n\t\tawait mongoose.connection\n\t\t\t.collection('authors')\n\t\t\t.findOne({})\n\t\t\t.then(result => {\n\t\t\t\texpect(\n\t\t\t\t\tresult.books.map(id => id.toString())\n\t\t\t\t).to.include(bookId);\n\t\t\t});\n\t\tawait mongoose.connection\n\t\t\t.collection('compilers')\n\t\t\t.findOne({})\n\t\t\t.then(result => {\n\t\t\t\texpect(\n\t\t\t\t\tresult.books.map(id => id.toString())\n\t\t\t\t).to.include(bookId);\n\t\t\t});\n\t\tawait mongoose.connection\n\t\t\t.collection('translators')\n\t\t\t.findOne({})\n\t\t\t.then(result => {\n\t\t\t\texpect(\n\t\t\t\t\tresult.books.map(id => id.toString())\n\t\t\t\t).to.include(bookId);\n\t\t\t});\n\t\tawait mongoose.connection\n\t\t\t.collection('illustrators')\n\t\t\t.findOne({})\n\t\t\t.then(result => {\n\t\t\t\texpect(\n\t\t\t\t\tresult.books.map(id => id.toString())\n\t\t\t\t).to.include(bookId);\n\t\t\t});\n\t\tawait mongoose.connection\n\t\t\t.collection('editors')\n\t\t\t.findOne({})\n\t\t\t.then(result => {\n\t\t\t\texpect(\n\t\t\t\t\tresult.books.map(id => id.toString())\n\t\t\t\t).to.include(bookId);\n\t\t\t});\n\t\tawait mongoose.connection\n\t\t\t.collection('bookseries')\n\t\t\t.findOne({})\n\t\t\t.then(result => {\n\t\t\t\texpect(\n\t\t\t\t\tresult.books.map(id => id.toString())\n\t\t\t\t).to.include(bookId);\n\t\t\t});\n\t\t//#endregion\n\t});",
                  "err": {},
                  "uuid": "3cf37238-6e8b-4607-bd31-d3baf1ad3199",
                  "parentUUID": "99201aff-ed45-4f2c-b081-8aa40e3ea2a4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3cf37238-6e8b-4607-bd31-d3baf1ad3199"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 76,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a973850b-4584-4c86-a1bc-e69cbd714d5d",
              "title": " GET \"/book/\" Get all books ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\book-test.js",
              "file": "\\test\\book-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return all books ",
                  "fullTitle": " boook system   GET \"/book/\" Get all books   Should return all books ",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app)\n\t.get('/book/')\n\t.set('Authorization', userToken)\n\t.then(response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body.result).to.be.an('array');\n\t});",
                  "err": {},
                  "uuid": "fd2aeaf5-87eb-4797-8ed7-7c904c24e229",
                  "parentUUID": "a973850b-4584-4c86-a1bc-e69cbd714d5d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fd2aeaf5-87eb-4797-8ed7-7c904c24e229"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 11,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0e601670-f0ba-4bc2-8642-3e3f9547ae78",
              "title": " GET \"/book/:id\" Get one book ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\book-test.js",
              "file": "\\test\\book-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return one book by id ",
                  "fullTitle": " boook system   GET \"/book/:id\" Get one book   Should return one book by id ",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expectedFields = [\n\t'product',\n\t'type',\n\t'publisher',\n\t'languages',\n\t'publishedIn',\n\t'authors',\n\t'compilers',\n\t'translators',\n\t'illustrators',\n\t'editors',\n\t'series',\n\t'copies',\n\t'isbns',\n\t'firstPublishedIn',\n\t'originalName',\n\t'font',\n\t'format',\n\t'pages',\n\t'weight',\n\t'bindingType',\n\t'paperType',\n\t'illustrationsType',\n\t'literaturePeriod',\n\t'literatureCountry',\n\t'foreignLiterature',\n\t'timePeriod',\n\t'suitableAge',\n\t'packaging',\n\t'occasion',\n\t'style',\n\t'suitableFor'\n];\nawait request(app)\n\t.get(`/book/${bookId}`)\n\t.set('Authorization', userToken)\n\t.then(response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body).to.include.keys(...expectedFields);\n\t});",
                  "err": {},
                  "uuid": "32f40f5e-dff4-4139-843f-502643a34443",
                  "parentUUID": "0e601670-f0ba-4bc2-8642-3e3f9547ae78",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "32f40f5e-dff4-4139-843f-502643a34443"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 13,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8ffc34eb-ba29-4e3e-abce-aba83aa6e2c1",
              "title": " PATCH \"/book/:id\" Update one existing book ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\book-test.js",
              "file": "\\test\\book-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return book with updated data ",
                  "fullTitle": " boook system   PATCH \"/book/:id\" Update one existing book   Should return book with updated data ",
                  "timedOut": false,
                  "duration": 19,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const updatedBookData = {\n\tpublishedIn: '1982',\n\tlanguages: ['English']\n};\nawait request(app)\n\t.patch(`/book/${bookId}`)\n\t.set('Authorization', userToken)\n\t.send(updatedBookData)\n\t.then(response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body.publishedIn).to.equal(1982);\n\t\texpect(response.body.languages).to.include('English');\n\t});",
                  "err": {},
                  "uuid": "f8dd12f7-a854-4da0-8229-1fe5b04639fa",
                  "parentUUID": "8ffc34eb-ba29-4e3e-abce-aba83aa6e2c1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f8dd12f7-a854-4da0-8229-1fe5b04639fa"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 19,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ea474632-3aa3-461c-98f7-1afbb8899b81",
              "title": " DELETE \"/book/:id\" Delete one book ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\book-test.js",
              "file": "\\test\\book-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should mark product as deleted via the \"deletedAt\" field, but not delete. ",
                  "fullTitle": " boook system   DELETE \"/book/:id\" Delete one book   Should mark product as deleted via the \"deletedAt\" field, but not delete. ",
                  "timedOut": false,
                  "duration": 27,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app)\n\t.delete(`/book/${bookId}`)\n\t.set('Authorization', userToken)\n\t.then(async response => {\n\t\texpect(response.status).to.be.equal(204);\n\t\tconst deletedBook = await mongoose.connection\n\t\t\t.collection('books')\n\t\t\t.findOne({});\n\t\texpect(deletedBook.deletedAt).to.not.be.null;\n\t\t//#region checking all dependencies\n\t\tconst author = await mongoose.connection\n\t\t\t.collection('authors')\n\t\t\t.findOne();\n\t\texpect(author.books).to.be.empty;\n\t\tconst compiler = await mongoose.connection\n\t\t\t.collection('compilers')\n\t\t\t.findOne();\n\t\texpect(compiler.books).to.be.empty;\n\t\tconst editor = await mongoose.connection\n\t\t\t.collection('editors')\n\t\t\t.findOne();\n\t\texpect(editor.books).to.be.empty;\n\t\tconst illustrator = await mongoose.connection\n\t\t\t.collection('illustrators')\n\t\t\t.findOne();\n\t\texpect(illustrator.books).to.be.empty;\n\t\tconst translator = await mongoose.connection\n\t\t\t.collection('translators')\n\t\t\t.findOne();\n\t\texpect(translator.books).to.be.empty;\n\t\tconst product = await mongoose.connection\n\t\t\t.collection('products')\n\t\t\t.findOne();\n\t\texpect(product.deletedAt).to.not.be.null;\n\t\tconst section = await mongoose.connection\n\t\t\t.collection('sections')\n\t\t\t.findOne();\n\t\texpect(section.products).to.be.empty;\n\t\t//#endregion\n\t});",
                  "err": {},
                  "uuid": "e2d46e39-1a7e-4c67-94b8-e05ce46c6dc2",
                  "parentUUID": "ea474632-3aa3-461c-98f7-1afbb8899b81",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e2d46e39-1a7e-4c67-94b8-e05ce46c6dc2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 27,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "ab8bbee5-5872-4e57-8f51-621003e5e8b4",
          "title": " cart system ",
          "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\cart-test.js",
          "file": "\\test\\cart-test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \" cart system \"",
              "fullTitle": " cart system  \"before all\" hook in \" cart system \"",
              "timedOut": false,
              "duration": 496,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mongoose\n\t.connect(process.env.TEST_CONNECTION_STRING)\n\t.catch(err => {\n\t\tconsole.log(`Failed to connect to database: ${err.message}`);\n\t});\n//#region add admin user to db and take token\nawait request(app).post('/signup').send(adminUser);\nawait mongoose.connection\n\t.collection('users')\n\t.updateOne(\n\t\t{ email: adminUser.email },\n\t\t{ $set: { role: 'admin' } }\n\t);\nconst userData = {\n\tlogin: adminUser.email,\n\tpassword: adminUser.password\n};\nuserToken += (await request(app).post('/login').send(userData))\n\t.body.token;\n//#endregion",
              "err": {},
              "uuid": "fe8fd2ed-592d-4992-8fcc-f2bafb04f9fd",
              "parentUUID": "ab8bbee5-5872-4e57-8f51-621003e5e8b4",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \" cart system \"",
              "fullTitle": " cart system  \"after all\" hook in \" cart system \"",
              "timedOut": false,
              "duration": 14,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mongoose.connection.collection('products').deleteMany();\nawait mongoose.connection.collection('producttypes').deleteMany();\nawait mongoose.connection.collection('sections').deleteMany();\nawait mongoose.connection.collection('cartitems').deleteMany();\nawait mongoose.connection.collection('users').deleteMany();\nawait mongoose.connection.collection('carts').deleteMany();\nawait mongoose.connection.close();",
              "err": {},
              "uuid": "1dbcdc6a-df96-4e30-9cab-a0c1ff07a0bf",
              "parentUUID": "ab8bbee5-5872-4e57-8f51-621003e5e8b4",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "70ab15d8-f2cb-49c8-91b6-849f33396d08",
              "title": " GET \"/cart/\" Get cart associated with user ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\cart-test.js",
              "file": "\\test\\cart-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return information about the cart of the authorized user ",
                  "fullTitle": " cart system   GET \"/cart/\" Get cart associated with user   Should return information about the cart of the authorized user ",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expectedFields = ['items', 'totalPrice', 'totalQuantity'];\nawait request(app)\n\t.get('/cart/')\n\t.set('Authorization', userToken)\n\t.then(response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body).to.be.include.keys(...expectedFields);\n\t});",
                  "err": {},
                  "uuid": "9bfcb0a7-1f63-438c-811a-a7f35ba47820",
                  "parentUUID": "70ab15d8-f2cb-49c8-91b6-849f33396d08",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9bfcb0a7-1f63-438c-811a-a7f35ba47820"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 9,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "852b69e6-49ae-4b71-b0c4-985a86c68e04",
              "title": " DELETE \"/cart/\" Clear user cart ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\cart-test.js",
              "file": "\\test\\cart-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should empty cart of the authorized user ",
                  "fullTitle": " cart system   DELETE \"/cart/\" Clear user cart   Should empty cart of the authorized user ",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app)\n\t.delete('/cart/')\n\t.set('Authorization', userToken)\n\t.then(async response => {\n\t\texpect(response.status).to.equal(204);\n\t\tconst cart = await mongoose.connection\n\t\t\t.collection('carts')\n\t\t\t.findOne({});\n\t\texpect(cart.items).to.be.empty;\n\t});",
                  "err": {},
                  "uuid": "cb87cc80-81d1-4697-85aa-82e4df41359e",
                  "parentUUID": "852b69e6-49ae-4b71-b0c4-985a86c68e04",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cb87cc80-81d1-4697-85aa-82e4df41359e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 9,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b766d581-8283-4519-926a-f9c787a09345",
              "title": " POST \"/cart-item/\" Add item to user cart ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\cart-test.js",
              "file": "\\test\\cart-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should add the product to the cart of an authorized user ",
                  "fullTitle": " cart system   POST \"/cart-item/\" Add item to user cart   Should add the product to the cart of an authorized user ",
                  "timedOut": false,
                  "duration": 28,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//#region adding the necessary objects to the database\nconst productType = {\n\tname: 'Книга',\n\tkey: 'book'\n};\nconst productTypeId = (\n\tawait mongoose.connection\n\t\t.collection('producttypes')\n\t\t.insertOne(productType)\n).insertedId;\nconst section = {\n\tname: 'Фантастика',\n\tkey: 'fantastic',\n\tproducts: [],\n\tsections: []\n};\nconst sectionId = (\n\tawait mongoose.connection\n\t\t.collection('sections')\n\t\t.insertOne(section)\n).insertedId;\nconst product = {\n\tname: 'Збірка українських поезій',\n\ttype: productTypeId,\n\tprice: 99,\n\tdeliveryPrice: 60,\n\tquantity: 10,\n\tdescription:\n\t\t'\"Збірка українських поезій\" - поетичний скарб, що втілює красу та духовність української літератури.',\n\timages: ['image1.png'],\n\tsections: [sectionId],\n\tmodel: 'Book'\n};\nproductId = (\n\tawait request(app)\n\t\t.post('/product/')\n\t\t.set('Authorization', userToken)\n\t\t.send(product)\n).body._id;\n//#endregion\nconst body = {\n\tproduct: productId.toString()\n};\nawait request(app)\n\t.post('/cart-item/')\n\t.set('Authorization', userToken)\n\t.send(body)\n\t.then(async response => {\n\t\texpect(response.status).to.equal(204);\n\t\tconst cart = await mongoose.connection\n\t\t\t.collection('carts')\n\t\t\t.findOne({});\n\t\texpect(cart.items).to.be.not.empty;\n\t\tconst cartItem = await mongoose.connection\n\t\t\t.collection('cartitems')\n\t\t\t.findOne({ _id: cart.items[0] });\n\t\texpect(cartItem.product.toString()).to.be.equal(productId);\n\t});",
                  "err": {},
                  "uuid": "787a498b-988e-48b4-a160-af06eddb8aeb",
                  "parentUUID": "b766d581-8283-4519-926a-f9c787a09345",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "787a498b-988e-48b4-a160-af06eddb8aeb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 28,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c60bb9f6-915d-4aaa-88c4-bd974fe5f550",
              "title": " DELETE \"/cart-item/\" Remove item from user cart ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\cart-test.js",
              "file": "\\test\\cart-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should remove the product from the cart of an authorized user ",
                  "fullTitle": " cart system   DELETE \"/cart-item/\" Remove item from user cart   Should remove the product from the cart of an authorized user ",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const body = {\n\tproduct: productId.toString()\n};\nawait request(app)\n\t.delete('/cart-item/')\n\t.set('Authorization', userToken)\n\t.send(body)\n\t.then(async response => {\n\t\texpect(response.status).to.equal(204);\n\t\tconst cart = await mongoose.connection\n\t\t\t.collection('carts')\n\t\t\t.findOne({});\n\t\texpect(cart.items).to.be.empty;\n\t\tconst cartItems = await mongoose.connection\n\t\t\t.collection('cartitems')\n\t\t\t.findOne({});\n\t\texpect(cartItems).to.be.null;\n\t});",
                  "err": {},
                  "uuid": "b07786a2-1377-4bfe-9f7f-a24806a0a184",
                  "parentUUID": "c60bb9f6-915d-4aaa-88c4-bd974fe5f550",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b07786a2-1377-4bfe-9f7f-a24806a0a184"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 13,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "c3710e77-8931-4cdd-95df-97ff0861f2f3",
          "title": " compiler system ",
          "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\compiler-test.js",
          "file": "\\test\\compiler-test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \" compiler system \"",
              "fullTitle": " compiler system  \"before all\" hook in \" compiler system \"",
              "timedOut": false,
              "duration": 491,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mongoose\n\t.connect(process.env.TEST_CONNECTION_STRING)\n\t.catch(err => {\n\t\tconsole.log(`Failed to connect to database: ${err.message}`);\n\t});\n//#region add admin user to db and take token\nawait request(app).post('/signup').send(adminUser);\nawait mongoose.connection\n\t.collection('users')\n\t.updateOne(\n\t\t{ email: adminUser.email },\n\t\t{ $set: { role: 'admin' } }\n\t);\nconst userData = {\n\tlogin: adminUser.email,\n\tpassword: adminUser.password\n};\nuserToken += (await request(app).post('/login').send(userData))\n\t.body.token;\n//#endregion",
              "err": {},
              "uuid": "94328626-de8d-4d3a-94ca-a2d90b4c668b",
              "parentUUID": "c3710e77-8931-4cdd-95df-97ff0861f2f3",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \" compiler system \"",
              "fullTitle": " compiler system  \"after all\" hook in \" compiler system \"",
              "timedOut": false,
              "duration": 17,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mongoose.connection.collection('compilers').deleteMany();\nawait mongoose.connection.collection('users').deleteMany();\nawait mongoose.connection.collection('carts').deleteMany();\nawait mongoose.connection.close();",
              "err": {},
              "uuid": "928df06a-0ecd-4e17-8215-99c693c779e3",
              "parentUUID": "c3710e77-8931-4cdd-95df-97ff0861f2f3",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "23fd0416-fd9e-4e4e-9243-7e3a8ea33dbb",
              "title": " POST \"/compiler/\" Create new compiler ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\compiler-test.js",
              "file": "\\test\\compiler-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should create new compiler in database ",
                  "fullTitle": " compiler system   POST \"/compiler/\" Create new compiler   Should create new compiler in database ",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const newCompiler = {\n\tfullName: 'John Smith',\n\tbooks: []\n};\nconst expectedFields = [\n\t'fullName',\n\t'books',\n\t'_id',\n\t'createdAt',\n\t'updatedAt'\n];\nawait request(app)\n\t.post('/compiler/')\n\t.set('Authorization', userToken)\n\t.send(newCompiler)\n\t.then(response => {\n\t\texpect(response.status).to.equal(201);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body).to.include.keys(...expectedFields);\n\t\tcompilerId = response.body._id;\n\t});",
                  "err": {},
                  "uuid": "38dca0ab-4211-4113-9ca5-072ed56f178f",
                  "parentUUID": "23fd0416-fd9e-4e4e-9243-7e3a8ea33dbb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "38dca0ab-4211-4113-9ca5-072ed56f178f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 9,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "038fc3c2-c661-4638-96b5-318b802432d4",
              "title": " GET \"/compiler/\" Get all compilers ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\compiler-test.js",
              "file": "\\test\\compiler-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return all compilers ",
                  "fullTitle": " compiler system   GET \"/compiler/\" Get all compilers   Should return all compilers ",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app)\n\t.get('/compiler/')\n\t.set('Authorization', userToken)\n\t.then(response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body).to.be.an('array');\n\t});",
                  "err": {},
                  "uuid": "c3360af0-72f0-4850-a4b7-92a90907e7e2",
                  "parentUUID": "038fc3c2-c661-4638-96b5-318b802432d4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c3360af0-72f0-4850-a4b7-92a90907e7e2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d11508c9-4335-490b-b770-306301650cfa",
              "title": " GET \"/compiler/:id\" Get one compiler ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\compiler-test.js",
              "file": "\\test\\compiler-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return one compiler by id ",
                  "fullTitle": " compiler system   GET \"/compiler/:id\" Get one compiler   Should return one compiler by id ",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expectedFields = [\n\t'fullName',\n\t'books',\n\t'_id',\n\t'createdAt',\n\t'updatedAt'\n];\nawait request(app)\n\t.get(`/compiler/${compilerId}`)\n\t.set('Authorization', userToken)\n\t.then(response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body).to.include.keys(...expectedFields);\n\t});",
                  "err": {},
                  "uuid": "6e15bedf-d848-4cf4-a812-40e6402f5ed2",
                  "parentUUID": "d11508c9-4335-490b-b770-306301650cfa",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6e15bedf-d848-4cf4-a812-40e6402f5ed2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "40ead108-a143-4426-8dde-6ef3911f1d55",
              "title": " PATCH \"/compiler/:id\" Update one existing compiler ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\compiler-test.js",
              "file": "\\test\\compiler-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return one compiler with updated data ",
                  "fullTitle": " compiler system   PATCH \"/compiler/:id\" Update one existing compiler   Should return one compiler with updated data ",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const updatedCompilerData = {\n\tfullName: 'Updated compiler name'\n};\nawait request(app)\n\t.patch(`/compiler/${compilerId}`)\n\t.set('Authorization', userToken)\n\t.send(updatedCompilerData)\n\t.then(response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body.fullName).to.be.equal(\n\t\t\t'Updated compiler name'\n\t\t);\n\t});",
                  "err": {},
                  "uuid": "bcd8fe6a-e8a9-4678-b6da-b4b08c6e010d",
                  "parentUUID": "40ead108-a143-4426-8dde-6ef3911f1d55",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bcd8fe6a-e8a9-4678-b6da-b4b08c6e010d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 12,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2f2ed8ea-c3f3-44da-a90d-a4a1f2a1812f",
              "title": " DELETE \"/compiler/:id\" Delete one compiler ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\compiler-test.js",
              "file": "\\test\\compiler-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should mark compiler as deleted via the \"deletedAt\" field, but not delete ",
                  "fullTitle": " compiler system   DELETE \"/compiler/:id\" Delete one compiler   Should mark compiler as deleted via the \"deletedAt\" field, but not delete ",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app)\n\t.delete(`/compiler/${compilerId}`)\n\t.set('Authorization', userToken)\n\t.then(async response => {\n\t\texpect(response.status).to.be.equal(204);\n\t\tconst deletedCompiler = await mongoose.connection\n\t\t\t.collection('compilers')\n\t\t\t.findOne({});\n\t\texpect(deletedCompiler.deletedAt).to.not.be.null;\n\t});",
                  "err": {},
                  "uuid": "ad327c3e-c9b8-4ca6-9819-3ca259f27f35",
                  "parentUUID": "2f2ed8ea-c3f3-44da-a90d-a4a1f2a1812f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ad327c3e-c9b8-4ca6-9819-3ca259f27f35"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 11,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f46a697a-834e-4b6e-aafd-af7e41dba57f",
          "title": " country system ",
          "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\country-test.js",
          "file": "\\test\\country-test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \" country system \"",
              "fullTitle": " country system  \"before all\" hook in \" country system \"",
              "timedOut": false,
              "duration": 520,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mongoose\n\t.connect(process.env.TEST_CONNECTION_STRING)\n\t.catch(err => {\n\t\tconsole.log(`Failed to connect to database: ${err.message}`);\n\t});\n//#region add admin user to db and take token\nawait request(app).post('/signup').send(adminUser);\nawait mongoose.connection\n\t.collection('users')\n\t.updateOne(\n\t\t{ email: adminUser.email },\n\t\t{ $set: { role: 'admin' } }\n\t);\nconst userData = {\n\tlogin: adminUser.email,\n\tpassword: adminUser.password\n};\nuserToken += (await request(app).post('/login').send(userData))\n\t.body.token;\n//#endregion",
              "err": {},
              "uuid": "5734b6c4-ae5a-4023-bb15-4ed0d1a976d7",
              "parentUUID": "f46a697a-834e-4b6e-aafd-af7e41dba57f",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \" country system \"",
              "fullTitle": " country system  \"after all\" hook in \" country system \"",
              "timedOut": false,
              "duration": 4,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mongoose.connection.collection('countries').deleteMany();\nawait mongoose.connection.collection('users').deleteMany();\nawait mongoose.connection.collection('carts').deleteMany();\nawait mongoose.connection.close();",
              "err": {},
              "uuid": "9e86ad38-8cfa-4350-8ce7-87bcfdb54850",
              "parentUUID": "f46a697a-834e-4b6e-aafd-af7e41dba57f",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "f87a9c54-f6b4-4996-b680-643b2ed22944",
              "title": " GET \"/country/\" Get all countries ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\country-test.js",
              "file": "\\test\\country-test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \" GET \"/country/\" Get all countries \"",
                  "fullTitle": " country system   GET \"/country/\" Get all countries  \"before all\" hook in \" GET \"/country/\" Get all countries \"",
                  "timedOut": false,
                  "duration": 1,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const country = {\n\tname: 'Україна',\n\tcities: ['Одеса', 'Житомир'],\n\tkey: 'ukraine'\n};\ncountryId = (\n\tawait mongoose.connection\n\t\t.collection('countries')\n\t\t.insertOne(country)\n).insertedId;",
                  "err": {},
                  "uuid": "9b82becf-6d19-431b-a722-caf46e7a3ad0",
                  "parentUUID": "f87a9c54-f6b4-4996-b680-643b2ed22944",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return all countries ",
                  "fullTitle": " country system   GET \"/country/\" Get all countries   Should return all countries ",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app)\n\t.get('/country/')\n\t.set('Authorization', userToken)\n\t.then(response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body).to.be.an('array');\n\t});",
                  "err": {},
                  "uuid": "9edd2372-140f-43db-b183-247754314979",
                  "parentUUID": "f87a9c54-f6b4-4996-b680-643b2ed22944",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9edd2372-140f-43db-b183-247754314979"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2d82552e-6610-4e60-a43c-5fa7fdc88262",
              "title": " GET \"/country/:id\" Get one country ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\country-test.js",
              "file": "\\test\\country-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return one country by id ",
                  "fullTitle": " country system   GET \"/country/:id\" Get one country   Should return one country by id ",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expectedFields = ['name', 'cities'];\nawait request(app)\n\t.get(`/country/${countryId}`)\n\t.set('Authorization', userToken)\n\t.then(response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body).to.include.keys(...expectedFields);\n\t});",
                  "err": {},
                  "uuid": "e4339c5a-31d7-4d6d-b08d-6e82e4f0db04",
                  "parentUUID": "2d82552e-6610-4e60-a43c-5fa7fdc88262",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e4339c5a-31d7-4d6d-b08d-6e82e4f0db04"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "67f8ff37-ec18-4966-b4a5-b9ff170f936a",
          "title": " delivery type system ",
          "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\delivery-type-test.js",
          "file": "\\test\\delivery-type-test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \" delivery type system \"",
              "fullTitle": " delivery type system  \"before all\" hook in \" delivery type system \"",
              "timedOut": false,
              "duration": 479,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mongoose\n\t.connect(process.env.TEST_CONNECTION_STRING)\n\t.catch(err => {\n\t\tconsole.log(`Failed to connect to database: ${err.message}`);\n\t});\n//#region add admin user to db and take token\nawait request(app).post('/signup').send(adminUser);\nawait mongoose.connection\n\t.collection('users')\n\t.updateOne(\n\t\t{ email: adminUser.email },\n\t\t{ $set: { role: 'admin' } }\n\t);\nconst userData = {\n\tlogin: adminUser.email,\n\tpassword: adminUser.password\n};\nuserToken += (await request(app).post('/login').send(userData))\n\t.body.token;\n//#endregion",
              "err": {},
              "uuid": "2d7c9b99-7b50-4c3e-b794-10c81b34e0f6",
              "parentUUID": "67f8ff37-ec18-4966-b4a5-b9ff170f936a",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \" delivery type system \"",
              "fullTitle": " delivery type system  \"after all\" hook in \" delivery type system \"",
              "timedOut": false,
              "duration": 16,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mongoose.connection\n\t.collection('deliverytypes')\n\t.deleteMany();\nawait mongoose.connection.collection('countries').deleteMany();\nawait mongoose.connection.collection('users').deleteMany();\nawait mongoose.connection.collection('carts').deleteMany();\nawait mongoose.connection.close();",
              "err": {},
              "uuid": "efd34722-2b05-4f7b-97a5-254e714e5742",
              "parentUUID": "67f8ff37-ec18-4966-b4a5-b9ff170f936a",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "7f48c62a-aa62-4a5f-b5e0-6bdbcce6d36b",
              "title": " GET \"/delivery-type/\" Get all delivery types ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\delivery-type-test.js",
              "file": "\\test\\delivery-type-test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \" GET \"/delivery-type/\" Get all delivery types \"",
                  "fullTitle": " delivery type system   GET \"/delivery-type/\" Get all delivery types  \"before all\" hook in \" GET \"/delivery-type/\" Get all delivery types \"",
                  "timedOut": false,
                  "duration": 1,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const country = {\n\tname: 'Україна',\n\tcities: ['Одеса', 'Житомир'],\n\tkey: 'ukraine'\n};\nconst countryId = (\n\tawait mongoose.connection\n\t\t.collection('countries')\n\t\t.insertOne(country)\n).insertedId;\nconst deliveryType = {\n\tname: 'Відділення Нова Пошта',\n\tprice: 60,\n\tcountries: [countryId],\n\tcontactInfoRequired: false,\n\tfullAddressRequired: false,\n\tpaymentTypes: [\n\t\t'Оплата карткою On-line',\n\t\t'Готівкою або карткою: При отриманні',\n\t\t'Передплата: по б/г рахунку (для юр. осіб)'\n\t],\n\tvariablePrice: false,\n\tkey: 'viddilennya-nova-poshta'\n};\nawait mongoose.connection\n\t.collection('deliverytypes')\n\t.insertOne(deliveryType);",
                  "err": {},
                  "uuid": "a84ad4ed-e7f3-48b1-aec6-41894ef153b8",
                  "parentUUID": "7f48c62a-aa62-4a5f-b5e0-6bdbcce6d36b",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return all delivery types ",
                  "fullTitle": " delivery type system   GET \"/delivery-type/\" Get all delivery types   Should return all delivery types ",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app)\n\t.get('/delivery-type/')\n\t.set('Authorization', userToken)\n\t.then(response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body).to.be.an('array').and.not.be.empty;\n\t});",
                  "err": {},
                  "uuid": "5ba71b4e-21d8-4fa9-8a5b-15c8c7624a58",
                  "parentUUID": "7f48c62a-aa62-4a5f-b5e0-6bdbcce6d36b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5ba71b4e-21d8-4fa9-8a5b-15c8c7624a58"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "3df9dc2d-bb09-4d4b-9e5a-51b2e6a9c8f4",
          "title": " editor system ",
          "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\editor-test.js",
          "file": "\\test\\editor-test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \" editor system \"",
              "fullTitle": " editor system  \"before all\" hook in \" editor system \"",
              "timedOut": false,
              "duration": 487,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mongoose\n\t.connect(process.env.TEST_CONNECTION_STRING)\n\t.catch(err => {\n\t\tconsole.log(`Failed to connect to database: ${err.message}`);\n\t});\n//#region add admin user to db and take token\nawait request(app).post('/signup').send(adminUser);\nawait mongoose.connection\n\t.collection('users')\n\t.updateOne(\n\t\t{ email: adminUser.email },\n\t\t{ $set: { role: 'admin' } }\n\t);\nconst userData = {\n\tlogin: adminUser.email,\n\tpassword: adminUser.password\n};\nuserToken += (await request(app).post('/login').send(userData))\n\t.body.token;\n//#endregion",
              "err": {},
              "uuid": "164e8343-c604-46c0-9a49-c36f4f9ed36a",
              "parentUUID": "3df9dc2d-bb09-4d4b-9e5a-51b2e6a9c8f4",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \" editor system \"",
              "fullTitle": " editor system  \"after all\" hook in \" editor system \"",
              "timedOut": false,
              "duration": 13,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mongoose.connection.collection('editors').deleteMany();\nawait mongoose.connection.collection('users').deleteMany();\nawait mongoose.connection.collection('carts').deleteMany();\nawait mongoose.connection.close();",
              "err": {},
              "uuid": "7c59874c-196f-4fbc-88c6-440cc8351df1",
              "parentUUID": "3df9dc2d-bb09-4d4b-9e5a-51b2e6a9c8f4",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "74716f47-500f-4619-afd9-5a5dc7c41df3",
              "title": " POST \"/editor/\" Create new editor ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\editor-test.js",
              "file": "\\test\\editor-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should create new editor in database ",
                  "fullTitle": " editor system   POST \"/editor/\" Create new editor   Should create new editor in database ",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const newEditor = {\n\tfullName: 'Anna Petrova',\n\tbooks: []\n};\nconst expectedFields = [\n\t'fullName',\n\t'books',\n\t'_id',\n\t'createdAt',\n\t'updatedAt'\n];\nawait request(app)\n\t.post('/editor/')\n\t.set('Authorization', userToken)\n\t.send(newEditor)\n\t.then(response => {\n\t\texpect(response.status).to.equal(201);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body).to.include.keys(...expectedFields);\n\t\teditorId = response.body._id;\n\t});",
                  "err": {},
                  "uuid": "28d47da9-9157-45f5-897e-44648e758026",
                  "parentUUID": "74716f47-500f-4619-afd9-5a5dc7c41df3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "28d47da9-9157-45f5-897e-44648e758026"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 9,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9c4da681-5a3f-4690-b181-31125ecc423f",
              "title": " GET \"/editor/\" Get all editors ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\editor-test.js",
              "file": "\\test\\editor-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return all editors ",
                  "fullTitle": " editor system   GET \"/editor/\" Get all editors   Should return all editors ",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app)\n\t.get('/editor/')\n\t.set('Authorization', userToken)\n\t.then(response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body).to.be.an('array');\n\t});",
                  "err": {},
                  "uuid": "49b79309-92e6-4441-8d48-3f8852a75667",
                  "parentUUID": "9c4da681-5a3f-4690-b181-31125ecc423f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "49b79309-92e6-4441-8d48-3f8852a75667"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "628e4ca5-9aee-4f60-9569-63a7a57d2b0d",
              "title": " GET \"/editor/:id\" Get one editor ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\editor-test.js",
              "file": "\\test\\editor-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return one editor by id  ",
                  "fullTitle": " editor system   GET \"/editor/:id\" Get one editor   Should return one editor by id  ",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expectedFields = [\n\t'fullName',\n\t'books',\n\t'_id',\n\t'createdAt',\n\t'updatedAt'\n];\nawait request(app)\n\t.get(`/editor/${editorId}`)\n\t.set('Authorization', userToken)\n\t.then(response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body).to.include.keys(...expectedFields);\n\t});",
                  "err": {},
                  "uuid": "9e7735ca-b006-418a-94d1-c17232c95f47",
                  "parentUUID": "628e4ca5-9aee-4f60-9569-63a7a57d2b0d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9e7735ca-b006-418a-94d1-c17232c95f47"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6694baa9-cae0-4804-a872-463154f5eba6",
              "title": " PATCH \"/editor/:id\" Update one existing editor ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\editor-test.js",
              "file": "\\test\\editor-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return one editor with updated data ",
                  "fullTitle": " editor system   PATCH \"/editor/:id\" Update one existing editor   Should return one editor with updated data ",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const updatedEditorData = {\n\tfullName: 'Updated editor name'\n};\nawait request(app)\n\t.patch(`/editor/${editorId}`)\n\t.set('Authorization', userToken)\n\t.send(updatedEditorData)\n\t.then(response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body.fullName).to.be.equal(\n\t\t\t'Updated editor name'\n\t\t);\n\t});",
                  "err": {},
                  "uuid": "65fd9c86-bd2e-4b75-adb4-027bf0616580",
                  "parentUUID": "6694baa9-cae0-4804-a872-463154f5eba6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "65fd9c86-bd2e-4b75-adb4-027bf0616580"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 9,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3604675b-e56c-4fcd-b523-5857d3ba930a",
              "title": " DELETE \"/editor/:id\" Delete one editor ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\editor-test.js",
              "file": "\\test\\editor-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should mark editor as deleted via the \"deletedAt\" field, but not delete ",
                  "fullTitle": " editor system   DELETE \"/editor/:id\" Delete one editor   Should mark editor as deleted via the \"deletedAt\" field, but not delete ",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app)\n\t.delete(`/editor/${editorId}`)\n\t.set('Authorization', userToken)\n\t.then(async response => {\n\t\texpect(response.status).to.be.equal(204);\n\t\tconst deletedEditor = await mongoose.connection\n\t\t\t.collection('editors')\n\t\t\t.findOne({});\n\t\texpect(deletedEditor.deletedAt).to.not.be.null;\n\t});",
                  "err": {},
                  "uuid": "d249e815-b867-44f7-9f2e-973bfb3c96a2",
                  "parentUUID": "3604675b-e56c-4fcd-b523-5857d3ba930a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d249e815-b867-44f7-9f2e-973bfb3c96a2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 10,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "124ada19-2b56-485a-a533-f891a5e97c6c",
          "title": " illustrator system ",
          "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\illustrator-test.js",
          "file": "\\test\\illustrator-test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \" illustrator system \"",
              "fullTitle": " illustrator system  \"before all\" hook in \" illustrator system \"",
              "timedOut": false,
              "duration": 470,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mongoose\n\t.connect(process.env.TEST_CONNECTION_STRING)\n\t.catch(err => {\n\t\tconsole.log(`Failed to connect to database: ${err.message}`);\n\t});\n//#region add admin user to db and take token\nawait request(app).post('/signup').send(adminUser);\nawait mongoose.connection\n\t.collection('users')\n\t.updateOne(\n\t\t{ email: adminUser.email },\n\t\t{ $set: { role: 'admin' } }\n\t);\nconst userData = {\n\tlogin: adminUser.email,\n\tpassword: adminUser.password\n};\nuserToken += (await request(app).post('/login').send(userData))\n\t.body.token;\n//#endregion",
              "err": {},
              "uuid": "6595a97b-7b0f-441a-a6bc-b442c4a88512",
              "parentUUID": "124ada19-2b56-485a-a533-f891a5e97c6c",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \" illustrator system \"",
              "fullTitle": " illustrator system  \"after all\" hook in \" illustrator system \"",
              "timedOut": false,
              "duration": 13,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mongoose.connection.collection('illustrators').deleteMany();\nawait mongoose.connection.collection('users').deleteMany();\nawait mongoose.connection.collection('carts').deleteMany();\nawait mongoose.connection.close();",
              "err": {},
              "uuid": "c705f87e-4685-4afd-8690-bda926838e5e",
              "parentUUID": "124ada19-2b56-485a-a533-f891a5e97c6c",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "ddd784d8-8e8a-4ff8-8b46-7f279a1ecac6",
              "title": " POST \"/illustrator/\" Create new illustrator ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\illustrator-test.js",
              "file": "\\test\\illustrator-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Shold create new illustrator in database ",
                  "fullTitle": " illustrator system   POST \"/illustrator/\" Create new illustrator   Shold create new illustrator in database ",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const newIllustrator = {\n\tfullName: 'Anna Petrova',\n\tbooks: []\n};\nconst expectedFields = [\n\t'fullName',\n\t'books',\n\t'_id',\n\t'createdAt',\n\t'updatedAt'\n];\nawait request(app)\n\t.post('/illustrator/')\n\t.set('Authorization', userToken)\n\t.send(newIllustrator)\n\t.then(response => {\n\t\texpect(response.status).to.equal(201);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body).to.include.keys(...expectedFields);\n\t\tillustratorId = response.body._id;\n\t});",
                  "err": {},
                  "uuid": "d13d4ebe-67c4-4155-aca2-fd59ba3be5fd",
                  "parentUUID": "ddd784d8-8e8a-4ff8-8b46-7f279a1ecac6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d13d4ebe-67c4-4155-aca2-fd59ba3be5fd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e67cf328-e6d5-4926-9a63-9b0584e1b482",
              "title": " GET \"/illustrator/\" Get all illustrators ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\illustrator-test.js",
              "file": "\\test\\illustrator-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return all illustrators ",
                  "fullTitle": " illustrator system   GET \"/illustrator/\" Get all illustrators   Should return all illustrators ",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app)\n\t.get('/illustrator/')\n\t.set('Authorization', userToken)\n\t.then(response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body).to.be.an('array');\n\t});",
                  "err": {},
                  "uuid": "1e1d5e0c-6036-4e82-a0e1-7d855de0c60b",
                  "parentUUID": "e67cf328-e6d5-4926-9a63-9b0584e1b482",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1e1d5e0c-6036-4e82-a0e1-7d855de0c60b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d2918798-d08c-4cad-9648-b3fbce29f4e4",
              "title": " GET \"/illustrator/:id\" Get one illustrator ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\illustrator-test.js",
              "file": "\\test\\illustrator-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return one illustrator by id ",
                  "fullTitle": " illustrator system   GET \"/illustrator/:id\" Get one illustrator   Should return one illustrator by id ",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expectedFields = [\n\t'fullName',\n\t'books',\n\t'_id',\n\t'createdAt',\n\t'updatedAt'\n];\nawait request(app)\n\t.get(`/illustrator/${illustratorId}`)\n\t.set('Authorization', userToken)\n\t.then(response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body).to.include.keys(...expectedFields);\n\t});",
                  "err": {},
                  "uuid": "ef00d692-f283-4c77-bab1-1df9d668c371",
                  "parentUUID": "d2918798-d08c-4cad-9648-b3fbce29f4e4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ef00d692-f283-4c77-bab1-1df9d668c371"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1bcda37c-9818-4cf5-a129-250b64a7e8ce",
              "title": " PATCH \"/illustrator/:id\" Update one existing illustrator ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\illustrator-test.js",
              "file": "\\test\\illustrator-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return one illustrator with updated data ",
                  "fullTitle": " illustrator system   PATCH \"/illustrator/:id\" Update one existing illustrator   Should return one illustrator with updated data ",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const updatedIllustratorData = {\n\tfullName: 'Updated illustrator name'\n};\nawait request(app)\n\t.patch(`/illustrator/${illustratorId}`)\n\t.set('Authorization', userToken)\n\t.send(updatedIllustratorData)\n\t.then(response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body.fullName).to.be.equal(\n\t\t\t'Updated illustrator name'\n\t\t);\n\t});",
                  "err": {},
                  "uuid": "777b8362-5dd7-44cc-bbf5-b8410f4d33af",
                  "parentUUID": "1bcda37c-9818-4cf5-a129-250b64a7e8ce",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "777b8362-5dd7-44cc-bbf5-b8410f4d33af"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 9,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3add433a-6f3e-4897-8d66-1a9470325bfd",
              "title": " DELETE \"/illustrator/:id\" Delete one illustrator ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\illustrator-test.js",
              "file": "\\test\\illustrator-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should mark illustrator as deleted via the \"deletedAt\" field, but not delete ",
                  "fullTitle": " illustrator system   DELETE \"/illustrator/:id\" Delete one illustrator   Should mark illustrator as deleted via the \"deletedAt\" field, but not delete ",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app)\n\t.delete(`/illustrator/${illustratorId}`)\n\t.set('Authorization', userToken)\n\t.then(async response => {\n\t\texpect(response.status).to.be.equal(204);\n\t\tconst deletedIllustrator = await mongoose.connection\n\t\t\t.collection('illustrators')\n\t\t\t.findOne({});\n\t\texpect(deletedIllustrator.deletedAt).to.not.be.null;\n\t});",
                  "err": {},
                  "uuid": "755a10a4-4777-4705-9996-c4558ceb86d7",
                  "parentUUID": "3add433a-6f3e-4897-8d66-1a9470325bfd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "755a10a4-4777-4705-9996-c4558ceb86d7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 9,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "1d832f06-cb23-43ee-a0cf-df39cb13cc4e",
          "title": " Order system ",
          "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\order-test.js",
          "file": "\\test\\order-test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \" Order system \"",
              "fullTitle": " Order system  \"before all\" hook in \" Order system \"",
              "timedOut": false,
              "duration": 474,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mongoose\n\t.connect(process.env.TEST_CONNECTION_STRING)\n\t.catch(err => {\n\t\tconsole.log(`Failed to connect to database: ${err.message}`);\n\t});\n//#region add admin user to db and take token\nawait request(app).post('/signup').send(adminUser);\nawait mongoose.connection\n\t.collection('users')\n\t.updateOne(\n\t\t{ email: adminUser.email },\n\t\t{ $set: { role: 'admin' } }\n\t);\nconst userData = {\n\tlogin: adminUser.email,\n\tpassword: adminUser.password\n};\nuserToken += (await request(app).post('/login').send(userData))\n\t.body.token;\n//#endregion",
              "err": {},
              "uuid": "d0a27a38-c655-44dc-8920-d5e21fa67c75",
              "parentUUID": "1d832f06-cb23-43ee-a0cf-df39cb13cc4e",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \" Order system \"",
              "fullTitle": " Order system  \"after all\" hook in \" Order system \"",
              "timedOut": false,
              "duration": 11,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mongoose.connection.collection('products').deleteMany();\nawait mongoose.connection.collection('producttypes').deleteMany();\nawait mongoose.connection.collection('sections').deleteMany();\nawait mongoose.connection.collection('countries').deleteMany();\nawait mongoose.connection.collection('cartitems').deleteMany();\nawait mongoose.connection.collection('orders').deleteMany();\nawait mongoose.connection\n\t.collection('deliverytypes')\n\t.deleteMany();\nawait mongoose.connection.collection('users').deleteMany();\nawait mongoose.connection.collection('carts').deleteMany();\nawait mongoose.connection.close();",
              "err": {},
              "uuid": "b7afd113-5389-44c3-a924-71f9d241d9c0",
              "parentUUID": "1d832f06-cb23-43ee-a0cf-df39cb13cc4e",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "46cb6f03-ab57-4623-bc0d-473e9be1d6bd",
              "title": " POST \"/order/\" Create new order ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\order-test.js",
              "file": "\\test\\order-test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \" POST \"/order/\" Create new order \"",
                  "fullTitle": " Order system   POST \"/order/\" Create new order  \"before all\" hook in \" POST \"/order/\" Create new order \"",
                  "timedOut": false,
                  "duration": 3,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const country = {\n\tname: 'Україна',\n\tcities: ['Одеса', 'Житомир'],\n\tkey: 'ukraine'\n};\nconst countryId = (\n\tawait mongoose.connection\n\t\t.collection('countries')\n\t\t.insertOne(country)\n).insertedId;\nconst deliveryType = {\n\tname: \"Кур'єр Нова Пошта\",\n\tprice: 60,\n\tcountries: [countryId],\n\tcontactInfoRequired: false,\n\tfullAddressRequired: false,\n\tpaymentTypes: [\n\t\t'Оплата карткою On-line',\n\t\t'Готівкою або карткою: При отриманні',\n\t\t'Передплата: по б/г рахунку (для юр. осіб)'\n\t],\n\tvariablePrice: false,\n\tkey: 'viddilennya-nova-poshta'\n};\nawait mongoose.connection\n\t.collection('deliverytypes')\n\t.insertOne(deliveryType);\nconst productType = {\n\tname: 'Книга',\n\tkey: 'book'\n};\nconst productTypeId = (\n\tawait mongoose.connection\n\t\t.collection('producttypes')\n\t\t.insertOne(productType)\n).insertedId;\nconst section = {\n\tname: 'Фантастика',\n\tkey: 'fantastic',\n\tproducts: [],\n\tsections: []\n};\nconst sectionId = (\n\tawait mongoose.connection\n\t\t.collection('sections')\n\t\t.insertOne(section)\n).insertedId;\nconst product = {\n\tname: 'Збірка українських поезій',\n\ttype: productTypeId,\n\tprice: 99,\n\tquantity: 10,\n\tdescription:\n\t\t'\"Збірка українських поезій\" - поетичний скарб, що втілює красу та духовність української літератури.',\n\timages: ['image1.png'],\n\tsections: [sectionId],\n\tcode: '1023022'\n};\nproductId = (\n\tawait mongoose.connection\n\t\t.collection('products')\n\t\t.insertOne(product)\n).insertedId;",
                  "err": {},
                  "uuid": "0fab02b8-1e70-46f8-ae22-fdd446b64ced",
                  "parentUUID": "46cb6f03-ab57-4623-bc0d-473e9be1d6bd",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should register a new user and create an order. Also send 2 emails ",
                  "fullTitle": " Order system   POST \"/order/\" Create new order   Should register a new user and create an order. Also send 2 emails ",
                  "timedOut": false,
                  "duration": 6500,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(10000);\nconst order = {\n\tcontactInfo: {\n\t\tfirstName: 'Микола',\n\t\tlastName: 'Пшеничний',\n\t\tphoneNumber: '+380687744321',\n\t\temail: 'jorobe6702@dronetz.com'\n\t},\n\tgift: false,\n\tcallback: true,\n\tdeliveryInfo: {\n\t\tcountry: 'Україна',\n\t\tcity: 'Київ',\n\t\ttype: \"Кур'єр Нова Пошта\",\n\t\taddress: 'вул. Шевченка, 10'\n\t},\n\tpaymentType: 'Готівкою або карткою: При отриманні',\n\titems: [{ product: productId, quantity: 3 }]\n};\nawait request(app)\n\t.post('/order/')\n\t.send(order)\n\t.then(async response => {\n\t\texpect(response.status).to.be.equal(201);\n\t\tconst user = await mongoose.connection\n\t\t\t.collection('users')\n\t\t\t.findOne({ role: { $ne: 'admin' } });\n\t\texpect(user).to.not.be.null;\n\t\tconst cart = await mongoose.connection\n\t\t\t.collection('carts')\n\t\t\t.findOne({ _id: user.cart });\n\t\texpect(cart).to.not.be.null;\n\t\tconst order = await mongoose.connection\n\t\t\t.collection('orders')\n\t\t\t.findOne({});\n\t\texpect(order).to.not.be.null;\n\t\texpect(order.user.toString()).to.be.equal(\n\t\t\tuser._id.toString()\n\t\t);\n\t\torderId = order._id;\n\t});",
                  "err": {},
                  "uuid": "454a959b-19f0-4f52-8b1f-bb92a35ab8f5",
                  "parentUUID": "46cb6f03-ab57-4623-bc0d-473e9be1d6bd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "454a959b-19f0-4f52-8b1f-bb92a35ab8f5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6500,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f177e910-b842-4d88-ae5d-4fbfc7439897",
              "title": " GET \"/order/\" Get all orders ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\order-test.js",
              "file": "\\test\\order-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return all orders ",
                  "fullTitle": " Order system   GET \"/order/\" Get all orders   Should return all orders ",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app)\n\t.get('/order/')\n\t.set('Authorization', userToken)\n\t.then(response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body).to.be.an('array').and.not.be.empty;\n\t});",
                  "err": {},
                  "uuid": "467acf0f-c791-4d7f-80c9-fb609484ae8b",
                  "parentUUID": "f177e910-b842-4d88-ae5d-4fbfc7439897",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "467acf0f-c791-4d7f-80c9-fb609484ae8b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 9,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "60846d82-95db-49e7-981a-5ccfa64e4d96",
              "title": " GET \"/order/statuses\" Get all order statuses ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\order-test.js",
              "file": "\\test\\order-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return all order statuses",
                  "fullTitle": " Order system   GET \"/order/statuses\" Get all order statuses   Should return all order statuses",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app)\n\t.get('/order/statuses/')\n\t.set('Authorization', userToken)\n\t.then(response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body).to.be.an('array').and.not.be.empty;\n\t});",
                  "err": {},
                  "uuid": "84abb22e-2529-4685-aea8-adfa5aa59c8b",
                  "parentUUID": "60846d82-95db-49e7-981a-5ccfa64e4d96",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "84abb22e-2529-4685-aea8-adfa5aa59c8b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e83c5494-0afd-4240-972f-4f20c6cbf71b",
              "title": " GET \"/order/:id\" Get one order ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\order-test.js",
              "file": "\\test\\order-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return one order by id ",
                  "fullTitle": " Order system   GET \"/order/:id\" Get one order   Should return one order by id ",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app)\n\t.get(`/order/${orderId}`)\n\t.set('Authorization', userToken)\n\t.then(response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body).to.be.an('object').and.not.be.null;\n\t});",
                  "err": {},
                  "uuid": "9a9b6933-cd59-4bba-9e76-95859c96ed33",
                  "parentUUID": "e83c5494-0afd-4240-972f-4f20c6cbf71b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9a9b6933-cd59-4bba-9e76-95859c96ed33"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "85d9f6c8-a7c7-40c9-bf48-fd7b4ff1fc2c",
              "title": " PATCH \"/order/status/:id\" Update status of one existing order ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\order-test.js",
              "file": "\\test\\order-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return one order by id with updated status ",
                  "fullTitle": " Order system   PATCH \"/order/status/:id\" Update status of one existing order   Should return one order by id with updated status ",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const status = await mongoose.connection\n\t.collection('order_statuses')\n\t.findOne({ name: 'Виконаний' });\nawait request(app)\n\t.patch(`/order/status/${orderId}`)\n\t.set('Authorization', userToken)\n\t.send({ status: status._id })\n\t.then(async response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\tconst order = await mongoose.connection\n\t\t\t.collection('orders')\n\t\t\t.findOne({});\n\t\texpect(order.status.name).to.be.equal('Виконаний');\n\t});",
                  "err": {},
                  "uuid": "05c6fce1-72a8-46f7-b6d6-6e84f8534609",
                  "parentUUID": "85d9f6c8-a7c7-40c9-bf48-fd7b4ff1fc2c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "05c6fce1-72a8-46f7-b6d6-6e84f8534609"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 13,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "5f086cbe-b229-41c7-b1e1-05924fc987e1",
          "title": " product system ",
          "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\product-test.js",
          "file": "\\test\\product-test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \" product system \"",
              "fullTitle": " product system  \"before all\" hook in \" product system \"",
              "timedOut": false,
              "duration": 498,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mongoose\n\t.connect(process.env.TEST_CONNECTION_STRING)\n\t.catch(err => {\n\t\tconsole.log(`Failed to connect to database: ${err.message}`);\n\t});\n//#region add admin user to db and take token\nawait request(app).post('/signup').send(adminUser);\nawait mongoose.connection\n\t.collection('users')\n\t.updateOne(\n\t\t{ email: adminUser.email },\n\t\t{ $set: { role: 'admin' } }\n\t);\nconst userData = {\n\tlogin: adminUser.email,\n\tpassword: adminUser.password\n};\nuserToken += (await request(app).post('/login').send(userData))\n\t.body.token;\n//#endregion",
              "err": {},
              "uuid": "6bc63cf9-0114-48a3-951a-daa71a5ff249",
              "parentUUID": "5f086cbe-b229-41c7-b1e1-05924fc987e1",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \" product system \"",
              "fullTitle": " product system  \"after all\" hook in \" product system \"",
              "timedOut": false,
              "duration": 22,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mongoose.connection.collection('books').deleteMany();\nawait mongoose.connection.collection('bookseries').deleteMany();\nawait mongoose.connection.collection('authors').deleteMany();\nawait mongoose.connection.collection('compilers').deleteMany();\nawait mongoose.connection.collection('editors').deleteMany();\nawait mongoose.connection.collection('illustrators').deleteMany();\nawait mongoose.connection.collection('products').deleteMany();\nawait mongoose.connection.collection('producttypes').deleteMany();\nawait mongoose.connection.collection('publishers').deleteMany();\nawait mongoose.connection.collection('sections').deleteMany();\nawait mongoose.connection.collection('translators').deleteMany();\nawait mongoose.connection.collection('users').deleteMany();\nawait mongoose.connection.collection('carts').deleteMany();\nawait mongoose.connection.close();",
              "err": {},
              "uuid": "ff595c2d-c93c-4030-80d7-7a6e818adbd6",
              "parentUUID": "5f086cbe-b229-41c7-b1e1-05924fc987e1",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "71e59cce-50eb-411d-9b9d-40c9d7eb3799",
              "title": " GET \"/product/\" Create new product ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\product-test.js",
              "file": "\\test\\product-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should add new product to database. The value of the \"currentProductsQuantity\" property of the \"products_quantity\" collection should increase",
                  "fullTitle": " product system   GET \"/product/\" Create new product   Should add new product to database. The value of the \"currentProductsQuantity\" property of the \"products_quantity\" collection should increase",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//#region adding the necessary objects to the database\nconst productType = {\n\tname: 'Книга',\n\tkey: 'book'\n};\nconst productTypeId = (\n\tawait mongoose.connection\n\t\t.collection('producttypes')\n\t\t.insertOne(productType)\n).insertedId;\nconst section = {\n\tname: 'Фантастика',\n\tkey: 'fantastic',\n\tproducts: [],\n\tsections: []\n};\nconst sectionId = (\n\tawait mongoose.connection\n\t\t.collection('sections')\n\t\t.insertOne(section)\n).insertedId;\nconst author = {\n\tfullName: 'John Smith',\n\tbiography:\n\t\t'Lorem ipsum dolor sit amet, consectetur adipiscing elit.',\n\tbooks: [],\n\tpictures: ['picture1.jpg', 'picture2.jpg']\n};\nawait mongoose.connection\n\t.collection('authors')\n\t.insertOne(author);\nconst authorName = (\n\tawait mongoose.connection.collection('authors').findOne({})\n).fullName;\n//#endregion\nconst oldProductsQuantity = (\n\tawait mongoose.connection\n\t\t.collection('products_quantity')\n\t\t.findOne({})\n).currentProductsQuantity;\nconst product = {\n\tname: 'Збірка українських поезій',\n\ttype: productTypeId,\n\tprice: 99,\n\tquantity: 10,\n\tdescription:\n\t\t'\"Збірка українських поезій\" - поетичний скарб, що втілює красу та духовність української літератури.',\n\timages: ['image1.png'],\n\tsections: [sectionId],\n\tcreators: [authorName]\n};\nconst expectedFields = [\n\t'name',\n\t'key',\n\t'price',\n\t'quantity',\n\t'type',\n\t'sections',\n\t'description',\n\t'reviews',\n\t'images',\n\t'creators',\n\t'requiresDelivery',\n\t'_id',\n\t'createdAt',\n\t'updatedAt',\n\t'code'\n];\nawait request(app)\n\t.post('/product/')\n\t.set('Authorization', userToken)\n\t.send(product)\n\t.then(async response => {\n\t\texpect(response.status).to.equal(201);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body).to.include.keys(...expectedFields);\n\t\tconst newProductsQuantity = (\n\t\t\tawait mongoose.connection\n\t\t\t\t.collection('products_quantity')\n\t\t\t\t.findOne({})\n\t\t).currentProductsQuantity;\n\t\texpect(newProductsQuantity).to.be.above(\n\t\t\toldProductsQuantity\n\t\t);\n\t\tproductId = response.body._id;\n\t});",
                  "err": {},
                  "uuid": "0b09c053-4f17-43fa-b0fc-3b3bb1327a24",
                  "parentUUID": "71e59cce-50eb-411d-9b9d-40c9d7eb3799",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0b09c053-4f17-43fa-b0fc-3b3bb1327a24"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 21,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3f09b469-c78c-48ac-9762-7bb89f596a66",
              "title": " GET \"/product/\" Get all products ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\product-test.js",
              "file": "\\test\\product-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return all products ",
                  "fullTitle": " product system   GET \"/product/\" Get all products   Should return all products ",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app)\n\t.get('/product/')\n\t.set('Authorization', userToken)\n\t.then(response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body.result).to.be.an('array');\n\t});",
                  "err": {},
                  "uuid": "e80ba890-94ee-47d0-a208-4bcb6a54ca78",
                  "parentUUID": "3f09b469-c78c-48ac-9762-7bb89f596a66",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e80ba890-94ee-47d0-a208-4bcb6a54ca78"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 9,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fd945a8b-7d38-47a2-b034-65672883e24d",
              "title": " GET \"/product/:id\" Get one product ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\product-test.js",
              "file": "\\test\\product-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return one product by id ",
                  "fullTitle": " product system   GET \"/product/:id\" Get one product   Should return one product by id ",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expectedFields = [\n\t'name',\n\t'key',\n\t'price',\n\t'quantity',\n\t'type',\n\t'sections',\n\t'description',\n\t'reviews',\n\t'images',\n\t'creators',\n\t'requiresDelivery',\n\t'_id',\n\t'createdAt',\n\t'updatedAt',\n\t'code'\n];\nawait request(app)\n\t.get(`/product/${productId}`)\n\t.set('Authorization', userToken)\n\t.then(response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body).to.include.keys(...expectedFields);\n\t});",
                  "err": {},
                  "uuid": "337109cb-164c-4fe8-b9eb-2bd999a3ce9e",
                  "parentUUID": "fd945a8b-7d38-47a2-b034-65672883e24d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "337109cb-164c-4fe8-b9eb-2bd999a3ce9e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "303050ab-18c4-44ef-87c9-3046b8f0508a",
              "title": " PATCH \"/product/:id\" Update one existing product ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\product-test.js",
              "file": "\\test\\product-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return product with updated data  ",
                  "fullTitle": " product system   PATCH \"/product/:id\" Update one existing product   Should return product with updated data  ",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const updatedProductData = {\n\tprice: 1000,\n\tquantity: 3\n};\nawait request(app)\n\t.patch(`/product/${productId}`)\n\t.set('Authorization', userToken)\n\t.send(updatedProductData)\n\t.then(response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body.price).to.equal(\n\t\t\tupdatedProductData.price\n\t\t);\n\t\texpect(response.body.quantity).to.equal(\n\t\t\tupdatedProductData.quantity\n\t\t);\n\t});",
                  "err": {},
                  "uuid": "af185b3c-8624-4650-932b-99b08884625f",
                  "parentUUID": "303050ab-18c4-44ef-87c9-3046b8f0508a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "af185b3c-8624-4650-932b-99b08884625f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 11,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a9347ce6-eae0-4e74-a544-0a4e4bf971aa",
              "title": " DELETE \"/prodcut/:id\" Delete one product ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\product-test.js",
              "file": "\\test\\product-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should mark product as deleted via the \"deletedAt\" field, but not delete ",
                  "fullTitle": " product system   DELETE \"/prodcut/:id\" Delete one product   Should mark product as deleted via the \"deletedAt\" field, but not delete ",
                  "timedOut": false,
                  "duration": 50,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//#region add necessary dependencies\nconst publisher = {\n\tname: 'Квітка',\n\tbooks: [],\n\tbookSeries: []\n};\nconst publisherId = (\n\tawait mongoose.connection\n\t\t.collection('publishers')\n\t\t.insertOne(publisher)\n).insertedId;\nconst book = {\n\tproduct: productId,\n\tpublisher: publisherId,\n\tlanguages: ['Українська'],\n\ttype: 'Паперова',\n\tpublishedIn: 1994\n};\nawait request(app)\n\t.post('/book/')\n\t.set('Authorization', userToken)\n\t.send(book);\n//#endregion\nawait request(app)\n\t.delete(`/product/${productId}`)\n\t.set('Authorization', userToken)\n\t.then(async response => {\n\t\texpect(response.status).to.equal(204);\n\t\tconst product = await mongoose.connection\n\t\t\t.collection('products')\n\t\t\t.findOne({});\n\t\texpect(product.deletedAt).to.be.not.null;\n\t\tconst book = await mongoose.connection\n\t\t\t.collection('books')\n\t\t\t.findOne({});\n\t\texpect(book.deletedAt).to.be.not.null;\n\t\tconst section = await mongoose.connection\n\t\t\t.collection('sections')\n\t\t\t.findOne({});\n\t\texpect(section.products).to.be.empty;\n\t});",
                  "err": {},
                  "uuid": "1b863b8e-8d65-422e-89c5-904560396672",
                  "parentUUID": "a9347ce6-eae0-4e74-a544-0a4e4bf971aa",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1b863b8e-8d65-422e-89c5-904560396672"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 50,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9391259b-28d5-4bb0-bb7a-4207fdf1747b",
          "title": " product-type system ",
          "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\product-type-test.js",
          "file": "\\test\\product-type-test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \" product-type system \"",
              "fullTitle": " product-type system  \"before all\" hook in \" product-type system \"",
              "timedOut": false,
              "duration": 500,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mongoose\n\t.connect(process.env.TEST_CONNECTION_STRING)\n\t.catch(err => {\n\t\tconsole.log(`Failed to connect to database: ${err.message}`);\n\t});\n//#region add admin user to db and take token\nawait request(app).post('/signup').send(adminUser);\nawait mongoose.connection\n\t.collection('users')\n\t.updateOne(\n\t\t{ email: adminUser.email },\n\t\t{ $set: { role: 'admin' } }\n\t);\nconst userData = {\n\tlogin: adminUser.email,\n\tpassword: adminUser.password\n};\nuserToken += (await request(app).post('/login').send(userData))\n\t.body.token;\n//#endregion",
              "err": {},
              "uuid": "af1d5aef-ab3f-4770-b05d-2174dd6241b6",
              "parentUUID": "9391259b-28d5-4bb0-bb7a-4207fdf1747b",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \" product-type system \"",
              "fullTitle": " product-type system  \"after all\" hook in \" product-type system \"",
              "timedOut": false,
              "duration": 4,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mongoose.connection.collection('producttypes').deleteMany();\nawait mongoose.connection.collection('users').deleteMany();\nawait mongoose.connection.collection('carts').deleteMany();\nawait mongoose.connection.close();",
              "err": {},
              "uuid": "10d99e6c-b98b-4d14-888c-cc44a60cf2e7",
              "parentUUID": "9391259b-28d5-4bb0-bb7a-4207fdf1747b",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "d78d90bb-7a28-4a7a-ba56-c9df71a8db74",
              "title": " POST \"/product-type/\" Create new product type ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\product-type-test.js",
              "file": "\\test\\product-type-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should add new product type to database ",
                  "fullTitle": " product-type system   POST \"/product-type/\" Create new product type   Should add new product type to database ",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const newProductType = {\n\tname: 'Book',\n\tkey: 'book'\n};\nconst expectedFields = [\n\t'name',\n\t'_id',\n\t'createdAt',\n\t'updatedAt'\n];\nawait request(app)\n\t.post('/product-type/')\n\t.set('Authorization', userToken)\n\t.send(newProductType)\n\t.then(response => {\n\t\texpect(response.status).to.equal(201);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body).to.include.keys(...expectedFields);\n\t\tproductTypeId = response.body._id;\n\t});",
                  "err": {},
                  "uuid": "dbbe6754-4c8f-419d-8c32-670425befd50",
                  "parentUUID": "d78d90bb-7a28-4a7a-ba56-c9df71a8db74",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dbbe6754-4c8f-419d-8c32-670425befd50"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 9,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "393055f9-b180-408a-b69b-817d844b4f1f",
              "title": " GET \"/product-type/\" Get all product types ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\product-type-test.js",
              "file": "\\test\\product-type-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return all product types ",
                  "fullTitle": " product-type system   GET \"/product-type/\" Get all product types   Should return all product types ",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app)\n\t.get('/product-type/')\n\t.set('Authorization', userToken)\n\t.then(response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body).to.be.an('array');\n\t});",
                  "err": {},
                  "uuid": "6e096bed-d5f4-40b5-bc9c-03c7b1e930c1",
                  "parentUUID": "393055f9-b180-408a-b69b-817d844b4f1f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6e096bed-d5f4-40b5-bc9c-03c7b1e930c1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ff621f32-9055-435b-852a-8d75c172575a",
              "title": " GET \"/product-type/:id\" Get one product type ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\product-type-test.js",
              "file": "\\test\\product-type-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return one product type by id ",
                  "fullTitle": " product-type system   GET \"/product-type/:id\" Get one product type   Should return one product type by id ",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expectedFields = [\n\t'name',\n\t'_id',\n\t'createdAt',\n\t'updatedAt'\n];\nawait request(app)\n\t.get(`/product-type/${productTypeId}`)\n\t.set('Authorization', userToken)\n\t.then(response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body).to.include.keys(...expectedFields);\n\t});",
                  "err": {},
                  "uuid": "0c48c670-3df2-4f8b-91f9-ba1396b709bb",
                  "parentUUID": "ff621f32-9055-435b-852a-8d75c172575a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0c48c670-3df2-4f8b-91f9-ba1396b709bb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7cafa64a-c072-4135-87d8-108d7ac5610b",
              "title": " PATCH \"/product-type/:id\" Update one existing product type ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\product-type-test.js",
              "file": "\\test\\product-type-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return product type with updated data ",
                  "fullTitle": " product-type system   PATCH \"/product-type/:id\" Update one existing product type   Should return product type with updated data ",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const updatedProductTypeData = {\n\tname: 'E-Book',\n\tkey: 'e-book'\n};\nconst expectedFields = [\n\t'name',\n\t'_id',\n\t'createdAt',\n\t'updatedAt'\n];\nawait request(app)\n\t.patch(`/product-type/${productTypeId}`)\n\t.set('Authorization', userToken)\n\t.send(updatedProductTypeData)\n\t.then(response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body).to.include.keys(...expectedFields);\n\t});",
                  "err": {},
                  "uuid": "6f926160-5a91-43f8-8385-1d54f1d0ad44",
                  "parentUUID": "7cafa64a-c072-4135-87d8-108d7ac5610b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6f926160-5a91-43f8-8385-1d54f1d0ad44"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 11,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a40ecfa7-bdc5-489f-9333-79f05b85c895",
              "title": " DELETE \"/prodcut-type/:id\" Delete one product type ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\product-type-test.js",
              "file": "\\test\\product-type-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should delete one product type from database ",
                  "fullTitle": " product-type system   DELETE \"/prodcut-type/:id\" Delete one product type   Should delete one product type from database ",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app)\n\t.delete(`/product-type/${productTypeId}`)\n\t.set('Authorization', userToken)\n\t.then(async response => {\n\t\texpect(response.status).to.be.equal(204);\n\t\tconst productTypeObject = await mongoose.connection\n\t\t\t.collection('producttypes')\n\t\t\t.findOne();\n\t\texpect(productTypeObject).to.be.null;\n\t});",
                  "err": {},
                  "uuid": "fd4b32f5-119a-4a7d-8c4a-51b9c988d9f9",
                  "parentUUID": "a40ecfa7-bdc5-489f-9333-79f05b85c895",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fd4b32f5-119a-4a7d-8c4a-51b9c988d9f9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 9,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "52f63b34-2ed9-461e-a967-1f781ac2b20d",
          "title": " publisher system ",
          "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\publisher-test.js",
          "file": "\\test\\publisher-test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \" publisher system \"",
              "fullTitle": " publisher system  \"before all\" hook in \" publisher system \"",
              "timedOut": false,
              "duration": 511,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mongoose\n\t.connect(process.env.TEST_CONNECTION_STRING)\n\t.catch(err => {\n\t\tconsole.log(`Failed to connect to database: ${err.message}`);\n\t});\n//#region add admin user to db and take token\nawait request(app).post('/signup').send(adminUser);\nawait mongoose.connection\n\t.collection('users')\n\t.updateOne(\n\t\t{ email: adminUser.email },\n\t\t{ $set: { role: 'admin' } }\n\t);\nconst userData = {\n\tlogin: adminUser.email,\n\tpassword: adminUser.password\n};\nuserToken += (await request(app).post('/login').send(userData))\n\t.body.token;\n//#endregion",
              "err": {},
              "uuid": "3cb98306-7cf7-4c42-8b55-93f688ce9d73",
              "parentUUID": "52f63b34-2ed9-461e-a967-1f781ac2b20d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \" publisher system \"",
              "fullTitle": " publisher system  \"after all\" hook in \" publisher system \"",
              "timedOut": false,
              "duration": 9,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mongoose.connection.collection('publishers').deleteMany();\nawait mongoose.connection.collection('users').deleteMany();\nawait mongoose.connection.collection('carts').deleteMany();\nawait mongoose.connection.close();",
              "err": {},
              "uuid": "bb98b2a8-bbe7-4f62-9cc5-b538ac5289f5",
              "parentUUID": "52f63b34-2ed9-461e-a967-1f781ac2b20d",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "896c533d-1a2f-48f8-8d47-6626d575d1ce",
              "title": " POST \"/publisher/\" Create new publisher ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\publisher-test.js",
              "file": "\\test\\publisher-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should create new publisher ",
                  "fullTitle": " publisher system   POST \"/publisher/\" Create new publisher   Should create new publisher ",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const newPublisher = {\n\tname: 'OpenAI',\n\tbooks: [],\n\tbookSeries: [],\n\tdescription: 'Publishing company specializing in AI research',\n\tlogo: 'https://example.com/logo.png'\n};\nconst expectedFields = [\n\t'name',\n\t'books',\n\t'bookSeries',\n\t'description',\n\t'_id',\n\t'createdAt',\n\t'updatedAt'\n];\nawait request(app)\n\t.post('/publisher/')\n\t.set('Authorization', userToken)\n\t.send(newPublisher)\n\t.then(response => {\n\t\texpect(response.status).to.equal(201);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body).to.include.keys(...expectedFields);\n\t\tpublisherId = response.body._id;\n\t});",
                  "err": {},
                  "uuid": "322e86b8-1b6d-45e0-9845-3b8db40518f4",
                  "parentUUID": "896c533d-1a2f-48f8-8d47-6626d575d1ce",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "322e86b8-1b6d-45e0-9845-3b8db40518f4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 10,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b2c315b5-d35b-4a29-a99a-1ffc0b8c24ff",
              "title": " GET \"/publisher/\" Get all publishers ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\publisher-test.js",
              "file": "\\test\\publisher-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return fll publishers ",
                  "fullTitle": " publisher system   GET \"/publisher/\" Get all publishers   Should return fll publishers ",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app)\n\t.get('/publisher/')\n\t.set('Authorization', userToken)\n\t.then(response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body).to.be.an('array');\n\t});",
                  "err": {},
                  "uuid": "c8feca68-ae35-4ba7-b95e-b758a026da90",
                  "parentUUID": "b2c315b5-d35b-4a29-a99a-1ffc0b8c24ff",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c8feca68-ae35-4ba7-b95e-b758a026da90"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0e304c62-f234-4a46-8753-62338fc5384f",
              "title": " GET \"/publisher/:id\" Get one publisher ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\publisher-test.js",
              "file": "\\test\\publisher-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return one publisher by id ",
                  "fullTitle": " publisher system   GET \"/publisher/:id\" Get one publisher   Should return one publisher by id ",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expectedFields = [\n\t'name',\n\t'books',\n\t'bookSeries',\n\t'description',\n\t'_id',\n\t'createdAt',\n\t'updatedAt'\n];\nawait request(app)\n\t.get(`/publisher/${publisherId}`)\n\t.set('Authorization', userToken)\n\t.then(response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body).to.include.keys(...expectedFields);\n\t});",
                  "err": {},
                  "uuid": "51591aee-0b97-4b71-b892-de8cf4222dc7",
                  "parentUUID": "0e304c62-f234-4a46-8753-62338fc5384f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "51591aee-0b97-4b71-b892-de8cf4222dc7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9729697a-5b51-4b14-8d3e-ead29fe83859",
              "title": " PATCH \"/publisher/:id\" Update one existing publisher ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\publisher-test.js",
              "file": "\\test\\publisher-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return one publisher with updated data ",
                  "fullTitle": " publisher system   PATCH \"/publisher/:id\" Update one existing publisher   Should return one publisher with updated data ",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const updatedPublisherData = {\n\tname: 'Updated Publisher',\n\tdescription:\n\t\t'This is an updated description with more than 40 characters.',\n\tlogo: 'https://example.com/updated-logo.png'\n};\nconst expectedFields = [\n\t'name',\n\t'books',\n\t'bookSeries',\n\t'description',\n\t'_id',\n\t'createdAt',\n\t'updatedAt'\n];\nawait request(app)\n\t.patch(`/publisher/${publisherId}`)\n\t.set('Authorization', userToken)\n\t.send(updatedPublisherData)\n\t.then(response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body).to.include.keys(...expectedFields);\n\t});",
                  "err": {},
                  "uuid": "9e9942b4-9735-48ce-92cc-0d0fb9f472f4",
                  "parentUUID": "9729697a-5b51-4b14-8d3e-ead29fe83859",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9e9942b4-9735-48ce-92cc-0d0fb9f472f4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 11,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a595085e-4f41-4f62-a4d6-9458f376d493",
              "title": " DELETE \"/publisher/:id\" Delete one publisher ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\publisher-test.js",
              "file": "\\test\\publisher-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should mark section as deleted via the \"deletedAt\" field, but not delete ",
                  "fullTitle": " publisher system   DELETE \"/publisher/:id\" Delete one publisher   Should mark section as deleted via the \"deletedAt\" field, but not delete ",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app)\n\t.delete(`/publisher/${publisherId}`)\n\t.set('Authorization', userToken)\n\t.then(async response => {\n\t\texpect(response.status).to.be.equal(204);\n\t\tconst publisher = await mongoose.connection\n\t\t\t.collection('publishers')\n\t\t\t.findOne({});\n\t\texpect(publisher.deletedAt).to.be.not.null;\n\t});",
                  "err": {},
                  "uuid": "11a1caea-6a21-46ff-8dc3-b7d64db01511",
                  "parentUUID": "a595085e-4f41-4f62-a4d6-9458f376d493",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "11a1caea-6a21-46ff-8dc3-b7d64db01511"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 10,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "7231fe16-f46b-4167-a157-726e0b1781ff",
          "title": " review system ",
          "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\review-test.js",
          "file": "\\test\\review-test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \" review system \"",
              "fullTitle": " review system  \"before all\" hook in \" review system \"",
              "timedOut": false,
              "duration": 533,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mongoose\n\t.connect(process.env.TEST_CONNECTION_STRING)\n\t.catch(err => {\n\t\tconsole.log(`Failed to connect to database: ${err.message}`);\n\t});\n//#region add admin user to db and take token\nawait request(app).post('/signup').send(adminUser);\nawait mongoose.connection\n\t.collection('users')\n\t.updateOne(\n\t\t{ email: adminUser.email },\n\t\t{ $set: { role: 'admin' } }\n\t);\nconst userData = {\n\tlogin: adminUser.email,\n\tpassword: adminUser.password\n};\nuserToken += (await request(app).post('/login').send(userData))\n\t.body.token;\n//#endregion",
              "err": {},
              "uuid": "70db817a-dabc-436e-b792-0dfe3575d819",
              "parentUUID": "7231fe16-f46b-4167-a157-726e0b1781ff",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \" review system \"",
              "fullTitle": " review system  \"after all\" hook in \" review system \"",
              "timedOut": false,
              "duration": 7,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mongoose.connection.collection('products').deleteMany();\nawait mongoose.connection.collection('producttypes').deleteMany();\nawait mongoose.connection.collection('sections').deleteMany();\nawait mongoose.connection.collection('reviews').deleteMany();\nawait mongoose.connection.collection('users').deleteMany();\nawait mongoose.connection.collection('carts').deleteMany();\nawait mongoose.connection.close();",
              "err": {},
              "uuid": "19c14587-ae4a-4751-81c7-5150ed7ff892",
              "parentUUID": "7231fe16-f46b-4167-a157-726e0b1781ff",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "261f4789-e6a2-4344-bf3c-32ac29284ad1",
              "title": " POST \"/review/\" Create new review ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\review-test.js",
              "file": "\\test\\review-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should create new review ",
                  "fullTitle": " review system   POST \"/review/\" Create new review   Should create new review ",
                  "timedOut": false,
                  "duration": 30,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//#region adding the necessary objects to the database\nconst productType = {\n\tname: 'Книга',\n\tkey: 'book'\n};\nconst productTypeId = (\n\tawait mongoose.connection\n\t\t.collection('producttypes')\n\t\t.insertOne(productType)\n).insertedId;\nconst section = {\n\tname: 'Фантастика',\n\tkey: 'fantastic',\n\tproducts: [],\n\tsections: []\n};\nconst sectionId = (\n\tawait mongoose.connection\n\t\t.collection('sections')\n\t\t.insertOne(section)\n).insertedId;\nconst product = {\n\tname: 'Збірка українських поезій',\n\ttype: productTypeId,\n\tprice: 99,\n\tdeliveryPrice: 60,\n\tquantity: 10,\n\tdescription:\n\t\t'\"Збірка українських поезій\" - поетичний скарб, що втілює красу та духовність української літератури.',\n\timages: ['image1.png'],\n\tsections: [sectionId],\n\tmodel: 'Book'\n};\nconst productId = (\n\tawait request(app)\n\t\t.post('/product/')\n\t\t.set('Authorization', userToken)\n\t\t.send(product)\n).body._id;\nconst userId = (\n\tawait mongoose.connection.collection('users').findOne({})\n)._id;\n//#endregion\nconst review = {\n\tproduct: productId,\n\tuser: userId,\n\ttitle: 'Приголомшлива книжкова подорож',\n\ttext: 'Ця книга змушує вас погрузнутися у захопливий світ, де кожна сторінка відкриває нові глибини емоцій та незабутніх пригод. Ви не зможете відірвати очі від її сторінок, а кожне речення залишить слід у вашому серці.',\n\trating: 5\n};\nconst expectedFields = [\n\t'product',\n\t'user',\n\t'title',\n\t'text',\n\t'likes',\n\t'dislikes',\n\t'rating',\n\t'_id',\n\t'createdAt',\n\t'updatedAt'\n];\nawait request(app)\n\t.post('/review/')\n\t.set('Authorization', userToken)\n\t.send(review)\n\t.then(response => {\n\t\texpect(response.status).to.equal(201);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body).to.include.keys(...expectedFields);\n\t\treviewId = response.body._id;\n\t});",
                  "err": {},
                  "uuid": "01782c93-a456-4feb-b171-a036e4716528",
                  "parentUUID": "261f4789-e6a2-4344-bf3c-32ac29284ad1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "01782c93-a456-4feb-b171-a036e4716528"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 30,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "dddcd369-a03f-4b71-908e-9a5168777519",
              "title": " PATCH \"/review/:id\" Update one existing review ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\review-test.js",
              "file": "\\test\\review-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return one section with updated data ",
                  "fullTitle": " review system   PATCH \"/review/:id\" Update one existing review   Should return one section with updated data ",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const updatedReviewData = {\n\ttitle: 'Приголомшлива подорож.'\n};\nawait request(app)\n\t.patch(`/review/${reviewId}`)\n\t.set('Authorization', userToken)\n\t.send(updatedReviewData)\n\t.then(response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body.title).to.be.equal(\n\t\t\t'Приголомшлива подорож.'\n\t\t);\n\t});",
                  "err": {},
                  "uuid": "63d8ce23-e732-4706-a5d8-f92b7ba29a24",
                  "parentUUID": "dddcd369-a03f-4b71-908e-9a5168777519",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "63d8ce23-e732-4706-a5d8-f92b7ba29a24"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 9,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ae5a8ef6-6ca9-4c92-9397-8ae179dce284",
              "title": " DELETE \"/review/:id\" Delete one review ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\review-test.js",
              "file": "\\test\\review-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should mark review as deleted via the \"deletedAt\" field, but not delete ",
                  "fullTitle": " review system   DELETE \"/review/:id\" Delete one review   Should mark review as deleted via the \"deletedAt\" field, but not delete ",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app)\n\t.delete(`/review/${reviewId}`)\n\t.set('Authorization', userToken)\n\t.then(async response => {\n\t\texpect(response.status).to.equal(204);\n\t\tconst review = await mongoose.connection\n\t\t\t.collection('reviews')\n\t\t\t.findOne({});\n\t\texpect(review.deletedAt).to.be.not.null;\n\t});",
                  "err": {},
                  "uuid": "3b1a8cc3-eb7f-4408-bbb7-7f9b8f51652a",
                  "parentUUID": "ae5a8ef6-6ca9-4c92-9397-8ae179dce284",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3b1a8cc3-eb7f-4408-bbb7-7f9b8f51652a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 12,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "4eacee41-df29-4393-b61f-c54cca82af29",
          "title": " serach system ",
          "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\search-test.js",
          "file": "\\test\\search-test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \" serach system \"",
              "fullTitle": " serach system  \"before all\" hook in \" serach system \"",
              "timedOut": false,
              "duration": 526,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mongoose\n\t.connect(process.env.TEST_CONNECTION_STRING)\n\t.catch(err => {\n\t\tconsole.log(`Failed to connect to database: ${err.message}`);\n\t});\n//#region add admin user to db and take token\nawait request(app).post('/signup').send(adminUser);\nawait mongoose.connection\n\t.collection('users')\n\t.updateOne(\n\t\t{ email: adminUser.email },\n\t\t{ $set: { role: 'admin' } }\n\t);\nconst userData = {\n\tlogin: adminUser.email,\n\tpassword: adminUser.password\n};\nuserToken += (await request(app).post('/login').send(userData))\n\t.body.token;\n//#endregion",
              "err": {},
              "uuid": "45ad386a-1089-4334-aa22-f419f9e978e2",
              "parentUUID": "4eacee41-df29-4393-b61f-c54cca82af29",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \" serach system \"",
              "fullTitle": " serach system  \"after all\" hook in \" serach system \"",
              "timedOut": false,
              "duration": 22,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mongoose.connection.collection('authors').deleteMany();\nawait mongoose.connection.collection('products').deleteMany();\nawait mongoose.connection.collection('producttypes').deleteMany();\nawait mongoose.connection.collection('sections').deleteMany();\nawait mongoose.connection.collection('users').deleteMany();\nawait mongoose.connection.collection('carts').deleteMany();\nawait mongoose.connection.close();",
              "err": {},
              "uuid": "122da1ae-f0e4-4874-a0db-6c40abd22f54",
              "parentUUID": "4eacee41-df29-4393-b61f-c54cca82af29",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "b45018f1-8ab1-40d6-b6f5-0c39983e242d",
              "title": "GET \"/search?q=\" Search for product(s) ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\search-test.js",
              "file": "\\test\\search-test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"GET \"/search?q=\" Search for product(s) \"",
                  "fullTitle": " serach system  GET \"/search?q=\" Search for product(s)  \"before all\" hook in \"GET \"/search?q=\" Search for product(s) \"",
                  "timedOut": false,
                  "duration": 67,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const productType = {\n\tname: 'Книга',\n\tkey: 'book'\n};\nconst productTypeId = (\n\tawait mongoose.connection\n\t\t.collection('producttypes')\n\t\t.insertOne(productType)\n).insertedId;\nconst section = {\n\tname: 'Фантастика',\n\tkey: 'fantastic',\n\tproducts: [],\n\tsections: []\n};\nconst sectionId = (\n\tawait mongoose.connection\n\t\t.collection('sections')\n\t\t.insertOne(section)\n).insertedId;\nconst author = {\n\tfullName: 'John Smith',\n\tbiography:\n\t\t'Lorem ipsum dolor sit amet, consectetur adipiscing elit.',\n\tbooks: [],\n\tpictures: ['picture1.jpg', 'picture2.jpg']\n};\nawait mongoose.connection\n\t.collection('authors')\n\t.insertOne(author);\nconst authorName = (\n\tawait mongoose.connection.collection('authors').findOne({})\n).fullName;\nconst product1 = {\n\tname: 'Збірка українських поезій',\n\ttype: productTypeId,\n\tprice: 99,\n\tquantity: 10,\n\tdescription:\n\t\t'\"Збірка українських поезій\" - поетичний скарб, що втілює красу та духовність української літератури.',\n\timages: ['image1.png'],\n\tsections: [sectionId],\n\tcreators: [authorName]\n};\nconst product2 = {\n\tname: 'Мистецтво говорити. Таємниці ефективного спілкування',\n\ttype: productTypeId,\n\tprice: 80,\n\tquantity: 10,\n\tdescription:\n\t\t'Бізнес-тренер Джеймс Борґ, відомий своїми відкриттями в галузях спілкування, особистісного розвитку, мови тіла та «контролю мислення», пропонує прості і дієві поради для кожної людини. ',\n\timages: ['image2.png'],\n\tsections: [sectionId],\n\tcreators: [authorName]\n};\nconst product3 = {\n\tname: '48 законів влади',\n\ttype: productTypeId,\n\tprice: 99,\n\tquantity: 10,\n\tdescription:\n\t\t'Сорок вісім хитрих, безжальних, повчальних законів влади від Роберта Гріна, які стануть у пригоді кожному, хто прагне досягати вершин.',\n\timages: ['image3.png'],\n\tsections: [sectionId],\n\tcreators: [authorName]\n};\nproduct1Code = (\n\tawait request(app)\n\t\t.post('/product/')\n\t\t.set('Authorization', userToken)\n\t\t.send(product1)\n).body.code;\nawait request(app)\n\t.post('/product/')\n\t.set('Authorization', userToken)\n\t.send(product2);\nawait request(app)\n\t.post('/product/')\n\t.set('Authorization', userToken)\n\t.send(product3);",
                  "err": {},
                  "uuid": "5009ee16-8511-4417-b7d8-7c18525383a4",
                  "parentUUID": "b45018f1-8ab1-40d6-b6f5-0c39983e242d",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return three poducts with entered author ",
                  "fullTitle": " serach system  GET \"/search?q=\" Search for product(s)   Should return three poducts with entered author ",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app)\n\t.get(`/search?q=${'John Smith'}`)\n\t.then(response => {\n\t\texpect(response.status).to.be.equal(200);\n\t\texpect(response.body.result).to.not.be.empty;\n\t\texpect(response.body.total).to.be.equal(3);\n\t});",
                  "err": {},
                  "uuid": "11de99db-756f-4c4e-b45c-6fa93a5f4a78",
                  "parentUUID": "b45018f1-8ab1-40d6-b6f5-0c39983e242d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": " Should return three products with an incomplete entered author ",
                  "fullTitle": " serach system  GET \"/search?q=\" Search for product(s)   Should return three products with an incomplete entered author ",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app)\n\t.get(`/search?q=${'Joh'}`)\n\t.then(response => {\n\t\texpect(response.status).to.be.equal(200);\n\t\texpect(response.body.result).to.not.be.empty;\n\t\texpect(response.body.total).to.be.equal(3);\n\t});",
                  "err": {},
                  "uuid": "46206bea-161b-48e0-9528-ae3c10e084e6",
                  "parentUUID": "b45018f1-8ab1-40d6-b6f5-0c39983e242d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": " Should return one product with entered product code ",
                  "fullTitle": " serach system  GET \"/search?q=\" Search for product(s)   Should return one product with entered product code ",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app)\n\t.get(`/search?q=${product1Code}`)\n\t.then(response => {\n\t\texpect(response.status).to.be.equal(200);\n\t\texpect(response.body.result).to.not.be.empty;\n\t\texpect(response.body.total).to.be.equal(1);\n\t});",
                  "err": {},
                  "uuid": "896d2dc8-cd98-4448-a618-57d06bf557a1",
                  "parentUUID": "b45018f1-8ab1-40d6-b6f5-0c39983e242d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": " Should return one product with an incomplete entered product name ",
                  "fullTitle": " serach system  GET \"/search?q=\" Search for product(s)   Should return one product with an incomplete entered product name ",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app)\n\t.get(\n\t\t`/search?q=${encodeURIComponent(\n\t\t\t'Мистецтво говорити. Таємниці ефективного спілкування'\n\t\t)}`\n\t)\n\t.then(response => {\n\t\texpect(response.status).to.be.equal(200);\n\t\texpect(response.body.result).to.not.be.empty;\n\t\texpect(response.body.total).to.be.equal(1);\n\t});",
                  "err": {},
                  "uuid": "00f67688-ee44-477b-8c47-25c43101a001",
                  "parentUUID": "b45018f1-8ab1-40d6-b6f5-0c39983e242d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "11de99db-756f-4c4e-b45c-6fa93a5f4a78",
                "46206bea-161b-48e0-9528-ae3c10e084e6",
                "896d2dc8-cd98-4448-a618-57d06bf557a1",
                "00f67688-ee44-477b-8c47-25c43101a001"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 29,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "8c1ad8d5-c6d4-49ce-be4e-68032c5b99c0",
          "title": " section system",
          "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\section-test.js",
          "file": "\\test\\section-test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \" section system\"",
              "fullTitle": " section system \"before all\" hook in \" section system\"",
              "timedOut": false,
              "duration": 486,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mongoose\n\t.connect(process.env.TEST_CONNECTION_STRING)\n\t.catch(err => {\n\t\tconsole.log(`Failed to connect to database: ${err.message}`);\n\t});\n//#region add admin user to db and take token\nawait request(app).post('/signup').send(adminUser);\nawait mongoose.connection\n\t.collection('users')\n\t.updateOne(\n\t\t{ email: adminUser.email },\n\t\t{ $set: { role: 'admin' } }\n\t);\nconst userData = {\n\tlogin: adminUser.email,\n\tpassword: adminUser.password\n};\nuserToken += (await request(app).post('/login').send(userData))\n\t.body.token;\n//#endregion",
              "err": {},
              "uuid": "3432fd73-e465-4c3e-937a-d9c11dcc0418",
              "parentUUID": "8c1ad8d5-c6d4-49ce-be4e-68032c5b99c0",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \" section system\"",
              "fullTitle": " section system \"after all\" hook in \" section system\"",
              "timedOut": false,
              "duration": 13,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mongoose.connection.collection('sections').deleteMany();\nawait mongoose.connection.collection('users').deleteMany();\nawait mongoose.connection.collection('carts').deleteMany();\nawait mongoose.connection.close();",
              "err": {},
              "uuid": "bd5f839a-0225-4625-8d00-c5921682b1b8",
              "parentUUID": "8c1ad8d5-c6d4-49ce-be4e-68032c5b99c0",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "92ffa446-b9c0-4552-a221-6c8d38abc83d",
              "title": " POST \"/section/\" Create new section ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\section-test.js",
              "file": "\\test\\section-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should add new section to database ",
                  "fullTitle": " section system  POST \"/section/\" Create new section   Should add new section to database ",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const section = {\n\tname: 'Художня література',\n\tkey: 'khudozhnia-literatura',\n\tproducts: [],\n\tsections: []\n};\nconst expectedFields = [\n\t'name',\n\t'key',\n\t'products',\n\t'_id',\n\t'sections',\n\t'createdAt',\n\t'updatedAt'\n];\nawait request(app)\n\t.post('/section/')\n\t.set('Authorization', userToken)\n\t.send(section)\n\t.then(response => {\n\t\texpect(response.status).to.equal(201);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body).to.include.keys(...expectedFields);\n\t\tsectionId = response.body._id;\n\t});",
                  "err": {},
                  "uuid": "5b633d0b-29da-4fa4-a41d-e31472a52481",
                  "parentUUID": "92ffa446-b9c0-4552-a221-6c8d38abc83d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5b633d0b-29da-4fa4-a41d-e31472a52481"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d29b8791-21dd-43a2-b2d8-f7c0068f037b",
              "title": " GET \"/section/\" Get all sections ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\section-test.js",
              "file": "\\test\\section-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return all sections  ",
                  "fullTitle": " section system  GET \"/section/\" Get all sections   Should return all sections  ",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app)\n\t.get('/section/')\n\t.set('Authorization', userToken)\n\t.then(response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body).to.be.an('array');\n\t});",
                  "err": {},
                  "uuid": "c1c9fffd-b84f-4e71-a5d5-8bc76c906882",
                  "parentUUID": "d29b8791-21dd-43a2-b2d8-f7c0068f037b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c1c9fffd-b84f-4e71-a5d5-8bc76c906882"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "64960b23-7e27-4d49-8faf-d98a0dce7033",
              "title": " GET \"/section/:id\" Get one section ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\section-test.js",
              "file": "\\test\\section-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return one section by id ",
                  "fullTitle": " section system  GET \"/section/:id\" Get one section   Should return one section by id ",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expectedFields = ['name', 'key', '_id', 'sections'];\nawait request(app)\n\t.get(`/section/${sectionId}`)\n\t.set('Authorization', userToken)\n\t.then(response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body).to.include.keys(...expectedFields);\n\t});",
                  "err": {},
                  "uuid": "77a682a2-4705-406a-99d3-ea04e01f447d",
                  "parentUUID": "64960b23-7e27-4d49-8faf-d98a0dce7033",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "77a682a2-4705-406a-99d3-ea04e01f447d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ad5605ae-984e-40fb-826e-b5807970d2e5",
              "title": " PATCH \"/section/:id\" Update one existing section ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\section-test.js",
              "file": "\\test\\section-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return updated section ",
                  "fullTitle": " section system  PATCH \"/section/:id\" Update one existing section   Should return updated section ",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//#region adding the necessary objects to the database\nconst newSection = {\n\tname: 'Фантастика',\n\tkey: 'fantastic',\n\tproducts: [],\n\tsections: []\n};\nconst newSectionId = (\n\tawait mongoose.connection\n\t\t.collection('sections')\n\t\t.insertOne(newSection)\n).insertedId;\n//#endregion\nconst updatedSectionData = {\n\tsections: [newSectionId]\n};\nawait request(app)\n\t.patch(`/section/${sectionId}`)\n\t.set('Authorization', userToken)\n\t.send(updatedSectionData)\n\t.then(response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body.sections).to.include(\n\t\t\tnewSectionId.toString()\n\t\t);\n\t});",
                  "err": {},
                  "uuid": "67ce6ee9-5c2b-4b21-b90a-2e2a3b91dd7c",
                  "parentUUID": "ad5605ae-984e-40fb-826e-b5807970d2e5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "67ce6ee9-5c2b-4b21-b90a-2e2a3b91dd7c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 10,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "16e75eed-263d-4342-9491-3de895d5792b",
              "title": " GET \"/section/:id/products\" Get all section products ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\section-test.js",
              "file": "\\test\\section-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return all section products ",
                  "fullTitle": " section system  GET \"/section/:id/products\" Get all section products   Should return all section products ",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app)\n\t.get(`/section/${sectionId}/products`)\n\t.set('Authorization', userToken)\n\t.then(response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body.result).to.be.an('array');\n\t});",
                  "err": {},
                  "uuid": "848f7ecc-9693-4b0e-a863-6149458a2839",
                  "parentUUID": "16e75eed-263d-4342-9491-3de895d5792b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "848f7ecc-9693-4b0e-a863-6149458a2839"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 11,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fdac8cd6-c61a-4eaf-b25f-a52d4215e7da",
              "title": " DELETE \"/section/:id\" Delete one section ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\section-test.js",
              "file": "\\test\\section-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should mark section as deleted via the \"deletedAt\" field, but not delete ",
                  "fullTitle": " section system  DELETE \"/section/:id\" Delete one section   Should mark section as deleted via the \"deletedAt\" field, but not delete ",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app)\n\t.delete(`/section/${sectionId}`)\n\t.set('Authorization', userToken)\n\t.then(async response => {\n\t\texpect(response.status).to.equal(204);\n\t\tconst section = await mongoose.connection\n\t\t\t.collection('sections')\n\t\t\t.findOne({ _id: new ObjectId(sectionId) });\n\t\texpect(section.deletedAt).not.be.null;\n\t});",
                  "err": {},
                  "uuid": "802616f5-39e3-4ed1-9533-984e2be860b2",
                  "parentUUID": "fdac8cd6-c61a-4eaf-b25f-a52d4215e7da",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "802616f5-39e3-4ed1-9533-984e2be860b2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 9,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "0320d342-ac6d-46b0-972b-420245453d77",
          "title": " translator system ",
          "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\translator-test.js",
          "file": "\\test\\translator-test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \" translator system \"",
              "fullTitle": " translator system  \"before all\" hook in \" translator system \"",
              "timedOut": false,
              "duration": 486,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mongoose\n\t.connect(process.env.TEST_CONNECTION_STRING)\n\t.catch(err => {\n\t\tconsole.log(`Failed to connect to database: ${err.message}`);\n\t});\n//#region add admin user to db and take token\nawait request(app).post('/signup').send(adminUser);\nawait mongoose.connection\n\t.collection('users')\n\t.updateOne(\n\t\t{ email: adminUser.email },\n\t\t{ $set: { role: 'admin' } }\n\t);\nconst userData = {\n\tlogin: adminUser.email,\n\tpassword: adminUser.password\n};\nuserToken += (await request(app).post('/login').send(userData))\n\t.body.token;\n//#endregion",
              "err": {},
              "uuid": "4d8a69af-c9ce-4441-8209-84da3de01e87",
              "parentUUID": "0320d342-ac6d-46b0-972b-420245453d77",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \" translator system \"",
              "fullTitle": " translator system  \"after all\" hook in \" translator system \"",
              "timedOut": false,
              "duration": 16,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mongoose.connection.collection('translators').deleteMany();\nawait mongoose.connection.collection('users').deleteMany();\nawait mongoose.connection.collection('carts').deleteMany();\nawait mongoose.connection.close();",
              "err": {},
              "uuid": "42c55ae8-162c-4b9b-9f6e-a5d8fe3dcabc",
              "parentUUID": "0320d342-ac6d-46b0-972b-420245453d77",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "bcfeffab-97a5-4b9c-be6e-431a737adadf",
              "title": " POST \"/translator/\" Create new translator ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\translator-test.js",
              "file": "\\test\\translator-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should create new translator in database ",
                  "fullTitle": " translator system   POST \"/translator/\" Create new translator   Should create new translator in database ",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const newTranslator = {\n\tfullName: 'Anna Petrova',\n\tbooks: []\n};\nconst expectedFields = [\n\t'fullName',\n\t'books',\n\t'_id',\n\t'createdAt',\n\t'updatedAt'\n];\nawait request(app)\n\t.post('/translator/')\n\t.set('Authorization', userToken)\n\t.send(newTranslator)\n\t.then(response => {\n\t\texpect(response.status).to.equal(201);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body).to.include.keys(...expectedFields);\n\t\ttranslatorId = response.body._id;\n\t});",
                  "err": {},
                  "uuid": "14291e09-a4bf-4aba-be2e-e8420ba54a02",
                  "parentUUID": "bcfeffab-97a5-4b9c-be6e-431a737adadf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "14291e09-a4bf-4aba-be2e-e8420ba54a02"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 10,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c77ded0c-ebfe-432b-9daa-ace52ae29546",
              "title": " GET \"/translator/\" Get all translators ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\translator-test.js",
              "file": "\\test\\translator-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return all translators ",
                  "fullTitle": " translator system   GET \"/translator/\" Get all translators   Should return all translators ",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app)\n\t.get('/translator/')\n\t.set('Authorization', userToken)\n\t.then(response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body).to.be.an('array');\n\t});",
                  "err": {},
                  "uuid": "10395fd5-92f2-4ca2-9697-1138c423ce8d",
                  "parentUUID": "c77ded0c-ebfe-432b-9daa-ace52ae29546",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "10395fd5-92f2-4ca2-9697-1138c423ce8d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ca0c6858-b162-46fc-85fc-156817874a89",
              "title": " GET \"/translator/:id\" Get one translator ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\translator-test.js",
              "file": "\\test\\translator-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return one translator by id ",
                  "fullTitle": " translator system   GET \"/translator/:id\" Get one translator   Should return one translator by id ",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expectedFields = [\n\t'fullName',\n\t'books',\n\t'_id',\n\t'createdAt',\n\t'updatedAt'\n];\nawait request(app)\n\t.get(`/translator/${translatorId}`)\n\t.set('Authorization', userToken)\n\t.then(response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body).to.include.keys(...expectedFields);\n\t});",
                  "err": {},
                  "uuid": "04cef8fe-c417-4b20-8fe4-90053e6c8516",
                  "parentUUID": "ca0c6858-b162-46fc-85fc-156817874a89",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "04cef8fe-c417-4b20-8fe4-90053e6c8516"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8f1890a5-9811-4728-96e5-1168d7b635d8",
              "title": " PATCH \"/translator/:id\" Update one existing translator ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\translator-test.js",
              "file": "\\test\\translator-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return one translator with updated data ",
                  "fullTitle": " translator system   PATCH \"/translator/:id\" Update one existing translator   Should return one translator with updated data ",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const updatedTranslatorData = {\n\tfullName: 'Updated translator name'\n};\nawait request(app)\n\t.patch(`/translator/${translatorId}`)\n\t.set('Authorization', userToken)\n\t.send(updatedTranslatorData)\n\t.then(response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body.fullName).to.be.equal(\n\t\t\t'Updated translator name'\n\t\t);\n\t});",
                  "err": {},
                  "uuid": "510d5fbe-c929-4557-997f-04360e046023",
                  "parentUUID": "8f1890a5-9811-4728-96e5-1168d7b635d8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "510d5fbe-c929-4557-997f-04360e046023"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 10,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8cfc9283-8fc2-4b4d-9e9a-c10ba3c67675",
              "title": " DELETE \"/translator/:id\" Delete one translator ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\translator-test.js",
              "file": "\\test\\translator-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should mark translator as deleted via the \"deletedAt\" field, but not delete ",
                  "fullTitle": " translator system   DELETE \"/translator/:id\" Delete one translator   Should mark translator as deleted via the \"deletedAt\" field, but not delete ",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app)\n\t.delete(`/translator/${translatorId}`)\n\t.set('Authorization', userToken)\n\t.then(async response => {\n\t\texpect(response.status).to.be.equal(204);\n\t\tconst deletedTranslator = await mongoose.connection\n\t\t\t.collection('translators')\n\t\t\t.findOne({});\n\t\texpect(deletedTranslator.deletedAt).to.be.not.null;\n\t});",
                  "err": {},
                  "uuid": "b75f3a9d-25fc-4eda-8ddc-6b1caf8282d0",
                  "parentUUID": "8cfc9283-8fc2-4b4d-9e9a-c10ba3c67675",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b75f3a9d-25fc-4eda-8ddc-6b1caf8282d0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 12,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "405d2bad-740e-4f7a-960d-0c419e33e6f1",
          "title": "user system",
          "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\user-test.js",
          "file": "\\test\\user-test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"user system\"",
              "fullTitle": "user system \"before all\" hook in \"user system\"",
              "timedOut": false,
              "duration": 503,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mongoose\n\t.connect(process.env.TEST_CONNECTION_STRING)\n\t.catch(err => {\n\t\tconsole.log(`Failed to connect to database: ${err.message}`);\n\t});\n//#region add admin user to db and take token\nawait request(app).post('/signup').send(adminUser);\nawait mongoose.connection\n\t.collection('users')\n\t.updateOne(\n\t\t{ email: adminUser.email },\n\t\t{ $set: { role: 'admin' } }\n\t);\nconst userData = {\n\tlogin: adminUser.email,\n\tpassword: adminUser.password\n};\nuserToken += (await request(app).post('/login').send(userData))\n\t.body.token;\n//#endregion",
              "err": {},
              "uuid": "9f1ee34e-0ea6-464c-925c-a94fc4c913f6",
              "parentUUID": "405d2bad-740e-4f7a-960d-0c419e33e6f1",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"user system\"",
              "fullTitle": "user system \"after all\" hook in \"user system\"",
              "timedOut": false,
              "duration": 16,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await mongoose.connection.collection('products').deleteMany();\nawait mongoose.connection.collection('producttypes').deleteMany();\nawait mongoose.connection.collection('sections').deleteMany();\nawait mongoose.connection.collection('users').deleteMany();\nawait mongoose.connection.collection('carts').deleteMany();\nawait mongoose.connection.close();",
              "err": {},
              "uuid": "7f4039c2-26b9-4c39-96d4-cff3ca03d787",
              "parentUUID": "405d2bad-740e-4f7a-960d-0c419e33e6f1",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "7d2563ab-544d-4152-9c8a-a187d5db92e3",
              "title": " GET \"/user/\" Get all users ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\user-test.js",
              "file": "\\test\\user-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return an array of users ",
                  "fullTitle": "user system  GET \"/user/\" Get all users   Should return an array of users ",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app)\n\t.get('/user/')\n\t.set('Authorization', userToken)\n\t.then(response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body).to.be.an('array');\n\t\tuserId = response.body[0]._id;\n\t});",
                  "err": {},
                  "uuid": "53efa207-79ac-4508-baa3-a6e49eff202a",
                  "parentUUID": "7d2563ab-544d-4152-9c8a-a187d5db92e3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "53efa207-79ac-4508-baa3-a6e49eff202a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 9,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "11439663-199f-4dab-87c2-48dfe5b6718b",
              "title": " GET \"/user/:id\" Get one user ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\user-test.js",
              "file": "\\test\\user-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return user by id ",
                  "fullTitle": "user system  GET \"/user/:id\" Get one user   Should return user by id ",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expectedFields = [\n\t'_id',\n\t'firstName',\n\t'lastName',\n\t'phoneNumber',\n\t'email',\n\t'role',\n\t'reviews',\n\t'wishlist',\n\t'createdAt',\n\t'updatedAt',\n\t'cart'\n];\nawait request(app)\n\t.get(`/user/${userId}`)\n\t.set('Authorization', userToken)\n\t.then(response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body).to.include.keys(...expectedFields);\n\t});",
                  "err": {},
                  "uuid": "24b9bd3e-8537-4202-a995-49aa9623d2a2",
                  "parentUUID": "11439663-199f-4dab-87c2-48dfe5b6718b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "24b9bd3e-8537-4202-a995-49aa9623d2a2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a73f5b2d-d47a-4560-8140-e914ac6c9229",
              "title": " PATCH \"/user/:id\" Update one existing user ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\user-test.js",
              "file": "\\test\\user-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return the user with updated data ",
                  "fullTitle": "user system  PATCH \"/user/:id\" Update one existing user   Should return the user with updated data ",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const newData = {\n\tfirstName: 'Артем',\n\tlastName: 'Желіковський'\n};\nawait request(app)\n\t.patch(`/user/${userId}`)\n\t.set('Authorization', userToken)\n\t.send(newData)\n\t.then(response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body.firstName).to.equal(newData.firstName);\n\t\texpect(response.body.lastName).to.equal(newData.lastName);\n\t});",
                  "err": {},
                  "uuid": "75739b5c-024f-4574-8a00-b9a8acad11b5",
                  "parentUUID": "a73f5b2d-d47a-4560-8140-e914ac6c9229",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "75739b5c-024f-4574-8a00-b9a8acad11b5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 9,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a9504846-75a9-4690-a013-0945e0377707",
              "title": " DELETE \"/user/:id\" Delete one user ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\user-test.js",
              "file": "\\test\\user-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should mark the user as deleted via the \"deletedAt\" field, but not delete him ",
                  "fullTitle": "user system  DELETE \"/user/:id\" Delete one user   Should mark the user as deleted via the \"deletedAt\" field, but not delete him ",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const newUser = {\n\tfirstName: 'Oleg',\n\tlastName: 'Smirniv',\n\tphoneNumber: '380957846372',\n\temail: 'lahefi3700@devswp.com',\n\tpassword: '41424344',\n\trole: 'user'\n};\nconst userId = (\n\tawait mongoose.connection\n\t\t.collection('users')\n\t\t.insertOne(newUser)\n).insertedId.toString();\nawait request(app)\n\t.delete(`/user/${userId}`)\n\t.set('Authorization', userToken)\n\t.then(async () => {\n\t\tconst deletedUser = await mongoose.connection\n\t\t\t.collection('users')\n\t\t\t.findOne({ email: 'lahefi3700@devswp.com' });\n\t\texpect(deletedUser).to.include.keys('deletedAt');\n\t});",
                  "err": {},
                  "uuid": "ea899df3-02ec-4501-9638-656e546a9ff0",
                  "parentUUID": "a9504846-75a9-4690-a013-0945e0377707",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ea899df3-02ec-4501-9638-656e546a9ff0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 12,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f95cb952-181a-4c10-9636-d9ad365e0889",
              "title": " GET \"/user/account\" Get user account ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\user-test.js",
              "file": "\\test\\user-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return information about the authorized user ",
                  "fullTitle": "user system  GET \"/user/account\" Get user account   Should return information about the authorized user ",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expectedFields = [\n\t'_id',\n\t'firstName',\n\t'lastName',\n\t'phoneNumber',\n\t'email',\n\t'role',\n\t'reviews',\n\t'wishlist',\n\t'createdAt',\n\t'updatedAt',\n\t'cart'\n];\nawait request(app)\n\t.get(`/user/${userId}`)\n\t.set('Authorization', userToken)\n\t.then(response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body).to.include.keys(...expectedFields);\n\t});",
                  "err": {},
                  "uuid": "9e2bd182-b3f2-42c7-9bf3-965807811bcd",
                  "parentUUID": "f95cb952-181a-4c10-9636-d9ad365e0889",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9e2bd182-b3f2-42c7-9bf3-965807811bcd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5d6ad73a-68db-492f-a185-08e307738093",
              "title": " POST \"/user/wishlist/\" Add product to user's wishlist ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\user-test.js",
              "file": "\\test\\user-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should add product to wishlist ",
                  "fullTitle": "user system  POST \"/user/wishlist/\" Add product to user's wishlist   Should add product to wishlist ",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//#region adding the necessary objects to the database\nconst productType = {\n\tname: 'Книга',\n\tkey: 'book'\n};\nconst productTypeId = (\n\tawait mongoose.connection\n\t\t.collection('producttypes')\n\t\t.insertOne(productType)\n).insertedId;\nconst section = {\n\tname: 'Фантастика',\n\tkey: 'fantastic',\n\tproducts: [],\n\tsections: []\n};\nconst sectionId = (\n\tawait mongoose.connection\n\t\t.collection('sections')\n\t\t.insertOne(section)\n).insertedId;\nconst product = {\n\tname: 'Збірка українських поезій',\n\ttype: productTypeId,\n\tprice: 99.99,\n\tquantity: 10,\n\tdescription:\n\t\t'\"Збірка українських поезій\" - поетичний скарб, що втілює красу та духовність української літератури.',\n\timages: ['image1.png'],\n\tsections: [sectionId],\n\tmodel: 'Book'\n};\nproductId = (\n\tawait mongoose.connection\n\t\t.collection('products')\n\t\t.insertOne(product)\n).insertedId;\n//#endregion\nconst requestBody = {\n\tproduct: productId\n};\nawait request(app)\n\t.post('/user/wishlist')\n\t.set('Authorization', userToken)\n\t.send(requestBody)\n\t.then(async response => {\n\t\texpect(response.status).to.equal(204);\n\t\tconst userWishlist = (\n\t\t\tawait mongoose.connection.collection('users').findOne()\n\t\t).wishlist;\n\t\texpect(\n\t\t\tuserWishlist.map(obj => obj.toString())\n\t\t).to.be.include(productId.toString());\n\t});",
                  "err": {},
                  "uuid": "5c41e9b5-24eb-45e5-9d77-818ee680dbc8",
                  "parentUUID": "5d6ad73a-68db-492f-a185-08e307738093",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5c41e9b5-24eb-45e5-9d77-818ee680dbc8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 11,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5a7f7579-cd02-41ef-8d0d-fdf65bfec31a",
              "title": " DELETE \"/user/wishlist/\" Remove product from user's wishlist ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\user-test.js",
              "file": "\\test\\user-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Must remove product from wishlist ",
                  "fullTitle": "user system  DELETE \"/user/wishlist/\" Remove product from user's wishlist   Must remove product from wishlist ",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const requestBody = {\n\tproduct: productId\n};\nawait request(app)\n\t.delete('/user/wishlist/')\n\t.set('Authorization', userToken)\n\t.send(requestBody)\n\t.then(async response => {\n\t\texpect(response.status).to.equal(204);\n\t\tconst userWishlist = (\n\t\t\tawait mongoose.connection.collection('users').findOne()\n\t\t).wishlist;\n\t\texpect(userWishlist).to.be.empty;\n\t});",
                  "err": {},
                  "uuid": "c0d46418-d040-41e6-8bd0-200870a345b7",
                  "parentUUID": "5a7f7579-cd02-41ef-8d0d-fdf65bfec31a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c0d46418-d040-41e6-8bd0-200870a345b7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 9,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "19085c63-edac-4df0-adee-ea85b71bf3f3",
              "title": " GET \"/user/orders/\" Get all orders made by user ",
              "fullFile": "D:\\Historium Projects\\main branch\\api\\test\\user-test.js",
              "file": "\\test\\user-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": " Should return an array of orders ",
                  "fullTitle": "user system  GET \"/user/orders/\" Get all orders made by user   Should return an array of orders ",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request(app)\n\t.get(`/user/orders/`)\n\t.set('Authorization', userToken)\n\t.then(response => {\n\t\texpect(response.status).to.equal(200);\n\t\texpect(response.header['content-type']).to.include(\n\t\t\t'application/json'\n\t\t);\n\t\texpect(response.body).to.be.an('array');\n\t});",
                  "err": {},
                  "uuid": "81b73b53-e4b0-4a38-a622-e98b4637b087",
                  "parentUUID": "19085c63-edac-4df0-adee-ea85b71bf3f3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "81b73b53-e4b0-4a38-a622-e98b4637b087"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 8,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}